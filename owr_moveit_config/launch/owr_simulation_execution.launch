<launch>

	<!-- By default, we are not in debug mode -->
  	<arg	name="debug"	default="false" />
  	<arg	name="config"	default="true"	doc=""/>
	<arg 	name="use_gui" default="false" /> 
	<arg	name="load_robot_description"	default="true" />

	<!--<rosparam command="load" file="$(find owr_moveit_config)/config/owr_jog.yaml"/>-->
	
	<!-- We do not have a robot connected, so publish fake joint states -->
	<!-- If you are using Gazebo as your simulator within the ROS framework, 
		 you typically don't need to include the joint_state_publisher separately. 
		 Gazebo provides its own plugin called "gazebo_ros_control" 
		 that automatically publishes joint states to the ROS system.-->
	<!-- https://answers.ros.org/question/252114/failed-to-validate-trajectory-couldnt-receive-full-current-joint-state-within-1s-error/ -->
	<!--<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
		<param name="use_gui" value="$(arg use_gui)"/>
		<rosparam param="source_list">["/joint_states"]</rosparam>
	</node>-->

	<!-- Given the published joint states, publish tf for the robot links -->
	<node	name="robot_state_publisher"	pkg="robot_state_publisher"	type="robot_state_publisher" respawn="true" output="screen" />

    <!-- http://wiki.ros.org/tf -->
	<!-- static_transform_publisher x y z yaw pitch roll frame_id child_frame_id period_in_ms -->
	<node	name="static_transform_publisher_1"	pkg="tf" type="static_transform_publisher" 
          	args="0 0 0 0 0 0 /map /world 100"/>
	
	<!-- GAZEBO POSE OF CAMERA W.R.T. WORLD : [1.274070 0.020488 1.961223 0.000808 0.735998 -3.118214] -->

	<!--<node	name="kinect_static_transform_publisher"	pkg="tf" type="static_transform_publisher" 
		args="1.274070 0.020488 1.961223 -3.118214 0.735998 0.000808 world camera_link 100"/> 
	
	<node	name="kinect_optical_transform"	pkg="tf" type="static_transform_publisher" 
		args="0 0 0 -1.5707 0 -1.5707 camera_link camera_rgb_optical_frame 100"/> -->

	<!--1.488899 0.024878 1.8878 0.038789 0.735965 -3.107858-->
	<node	name="kinect_static_transform_publisher"	pkg="tf" type="static_transform_publisher" 
		args="1.488899 0.024878 1.8878 -3.107858 0.735965 0.038789 world camera_link 100"/> 
	
	<node	name="kinect_optical_transform"	pkg="tf" type="static_transform_publisher" 
		args="0 0 0 -1.5707 0 -1.5707 camera_link camera_rgb_optical_frame 100"/> 
	
	<!-- Launch moveit -->
	<include	file="$(find owr_moveit_config)/launch/move_group.launch">
		<!--<arg name="fake_execution" value="true"/> -->
		<!-- <arg 	name="config"	value="$(arg config)"/> -->
    	<arg 	name="debug"	value="$(arg debug)" />
    	<arg 	name="load_robot_description"	value="$(arg load_robot_description)" />
	</include>

	<!-- Launch rviz-->
	<include	file="$(find owr_moveit_config)/launch/moveit_rviz.launch">
    	<arg	name="config"	value="$(arg config)"/>
    	<arg	name="debug"	value="$(arg debug)"/>
  	</include>

	<!-- go to HOME pose on start -->
	<!--<node	name="setHomePose"	pkg="owr_moveit_config"	type="setHomePose" respawn="false" output="screen" />-->

	<!-- Launch pointcloud downsampling node -->
	<!--<node	name="downsampling"	pkg="robot_vision"	type="downsampling" respawn="true" output="screen" />-->
	<!-- Point cloud data transformer node -->
	<!--<node	name="transformer"	pkg="robot_vision"	type="transformer" respawn="false" output="screen"/>--> 
	
	<!-- Point cloud data preprocessing node -->
	<node	name="point_cloud_preprocess"	pkg="robot_vision"	type="point_cloud_preprocess" respawn="false" output="screen"/>
</launch>
