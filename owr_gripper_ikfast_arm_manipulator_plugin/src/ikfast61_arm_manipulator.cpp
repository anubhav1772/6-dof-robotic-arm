/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2023-06-04 17:41:08.782450
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "../include/ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.12)*x6);
x13=((0.35575)*x0);
x14=((0.1685)*x6);
x15=((0.12)*x2);
x16=((0.1685)*x0);
x17=((0.35575)*x3);
x18=((0.12)*x0);
x19=((1.0)*x6);
x20=((1.0)*x0);
x21=((0.1685)*x5);
x22=(x3*x4);
x23=(x1*x6);
x24=(x1*x2);
x25=(x10*x5);
x26=(x1*x4);
x27=(x2*x3);
x28=(x11*x5);
x29=(x19*x5);
x30=((1.0)*x22);
x31=(x20*x24);
x32=(x19*x24);
x33=((((-1.0)*x30))+x24);
x34=((((1.0)*x27))+(((1.0)*x26)));
x35=(x20*((x26+x27)));
x36=((-1.0)*x35);
x37=(x19*((x26+x27)));
x38=((-1.0)*x37);
x39=(x38*x5);
x40=(x37*x7);
x41=(x35*x7);
x42=(x36*x5);
x43=((((-1.0)*x19*x7))+x42);
x44=(((x0*x7))+x39);
x45=(((x11*x34))+((x25*x33)));
x46=(((x11*((x31+(((-1.0)*x20*x22))))))+((x10*x43)));
x47=(((x10*x44))+((x11*(((((-1.0)*x19*x22))+x32)))));
eerot[0]=(((x8*(((((-1.0)*x41))+x29))))+((x46*x9)));
eerot[1]=(((x9*(((((-1.0)*x29))+x41))))+((x46*x8)));
eerot[2]=(((x11*x43))+((x10*(((((-1.0)*x31))+((x0*x22)))))));
IkReal x48=((1.0)*x24);
eetrans[0]=(((x10*((((x16*x22))+(((-1.0)*x16*x48))))))+((x1*x13))+((x11*((((x21*x36))+(((-1.0)*x14*x7))))))+((x11*((((x18*x22))+(((-1.0)*x0*x1*x15))))))+((x10*(((((-0.12)*x42))+((x12*x7))))))+((x13*x22))+(((-1.0)*x13*x48)));
eerot[3]=(((x47*x9))+((x8*(((((-1.0)*x40))+(((-1.0)*x20*x5)))))));
eerot[4]=(((x47*x8))+((x9*((((x0*x5))+x40)))));
eerot[5]=(((x10*(((((-1.0)*x32))+((x22*x6))))))+((x11*x44)));
IkReal x49=((0.35575)*x23);
IkReal x50=((1.0)*x24);
eetrans[1]=(((x10*(((((-1.0)*x18*x7))+(((-0.12)*x39))))))+((x11*((((x21*x38))+((x16*x7))))))+((x17*x4*x6))+x49+((x11*(((((-1.0)*x12*x50))+((x12*x22))))))+((x10*(((((-1.0)*x14*x50))+((x14*x22))))))+(((-1.0)*x2*x49)));
eerot[6]=(((x45*x9))+((x33*x7*x8)));
eerot[7]=(((x7*x9*(((((-1.0)*x24))+x30))))+((x45*x8)));
eerot[8]=(((x28*x33))+(((-1.0)*x10*x34)));
IkReal x51=((1.0)*x15);
eetrans[2]=((0.1956)+((x28*(((((-0.1685)*x22))+(((0.1685)*x24))))))+((x10*(((((-0.1685)*x27))+(((-0.1685)*x26))))))+((x11*(((((-0.12)*x26))+(((-1.0)*x3*x51))))))+(((-1.0)*x17*x2))+((x25*(((((0.12)*x22))+(((-1.0)*x1*x51))))))+x17+(((-0.35575)*x26)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r01;
new_r01=((-1.0)*r00);
new_r02=r02;
new_px=((((-0.1685)*r02))+px);
new_r10=r11;
new_r11=((-1.0)*r10);
new_r12=r12;
new_py=((((-0.1685)*r12))+py);
new_r20=r21;
new_r21=((-1.0)*r20);
new_r22=r22;
new_pz=((-0.1956)+pz+(((-0.1685)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x52=((1.0)*px);
IkReal x53=((1.0)*pz);
IkReal x54=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x54))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x53)));
rxp0_2=((((-1.0)*r10*x52))+((py*r00)));
rxp1_0=((((-1.0)*r21*x54))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x53)));
rxp1_2=((((-1.0)*r11*x52))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x54)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x53)));
rxp2_2=((((-1.0)*r12*x52))+((py*r02)));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x55=((0.35575)*pp);
IkReal x56=((0.08538)*npx);
IkReal x57=((0.253116125)*npz);
IkReal x58=((0.12)*r21);
IkReal x59=((1.0)*rxp2_2);
IkReal x60=(x58+(((-1.0)*x59)));
IkReal x61=((0.0051228)+x55);
IkReal x62=((((-1.0)*x58))+(((-1.0)*x59)));
IkReal x63=(x57+x56);
IkReal x64=(x56+x61+(((-1.0)*x57)));
IkReal x65=(x61+(((-1.0)*x63)));
IkReal x66=(x57+x61+(((-1.0)*x56)));
IkReal x67=(x61+x63);
IkReal gconst0=x64;
IkReal gconst1=x65;
IkReal gconst2=x64;
IkReal gconst3=x65;
IkReal gconst4=x62;
IkReal gconst5=x60;
IkReal gconst6=x67;
IkReal gconst7=x66;
IkReal gconst8=x62;
IkReal gconst9=x60;
IkReal gconst10=x67;
IkReal gconst11=x66;
IkReal x68=npy*npy;
IkReal x69=r20*r20;
IkReal x70=rxp2_2*rxp2_2;
IkReal x71=r21*r21;
IkReal x72=((0.50623225)*npx);
IkReal x73=(gconst5*gconst8);
IkReal x74=(npy*rxp1_2);
IkReal x75=(gconst7*gconst8);
IkReal x76=(gconst0*gconst2);
IkReal x77=(gconst7*gconst9);
IkReal x78=((0.0291589776)*npx);
IkReal x79=(gconst1*gconst2);
IkReal x80=(npy*r20);
IkReal x81=(gconst10*gconst5);
IkReal x82=(gconst1*gconst3);
IkReal x83=(npx*r21);
IkReal x84=(gconst1*r21);
IkReal x85=((0.0409824)*rxp2_2);
IkReal x86=((0.06074787)*gconst11);
IkReal x87=(gconst4*gconst8);
IkReal x88=(r21*rxp2_2);
IkReal x89=((0.06074787)*gconst6);
IkReal x90=(gconst5*gconst9);
IkReal x91=((0.0207466125624)*npx);
IkReal x92=(gconst2*r21);
IkReal x93=((0.06074787)*gconst9);
IkReal x94=(gconst6*gconst9);
IkReal x95=((0.68304)*rxp2_2);
IkReal x96=(gconst10*gconst4);
IkReal x97=(gconst4*gconst7);
IkReal x98=((0.0819648)*rxp0_2);
IkReal x99=(gconst0*gconst3);
IkReal x100=((0.12149574)*rxp2_2);
IkReal x101=((0.24299148)*rxp2_2);
IkReal x102=((0.06074787)*gconst4);
IkReal x103=(gconst3*x88);
IkReal x104=(gconst10*x69);
IkReal x105=((1.0)*x70);
IkReal x106=((0.48)*r21*rxp0_2);
IkReal x107=((0.34577687604)*x68);
IkReal x108=((0.001749538656)*x71);
IkReal x109=((0.0144)*x71);
IkReal x110=((0.0291589776)*x68);
IkReal x111=((2.0)*gconst11*rxp0_2);
IkReal x112=((1.92)*r20*rxp1_2);
IkReal x113=(gconst7*x69);
IkReal x114=((2.0)*gconst10*rxp0_2);
IkReal x115=((0.003499077312)*x69);
IkReal x116=(rxp0_2*x68);
IkReal x117=((4.0)*rxp0_2*rxp2_2);
IkReal x118=((1.0124645)*npx*x70);
IkReal x119=(x68*x71);
op[0]=((((0.0409824)*x80*x81))+(((-1.0)*gconst11*gconst4*x75))+(((0.0409824)*x75*x80))+(((-1.0)*x81*x94))+(((-0.0576)*gconst7*x104))+((gconst11*gconst6*x73))+(((-1.0)*x110*x73))+((x77*x96)));
op[1]=(((gconst10*gconst7*x112))+((gconst4*x72*x77))+((gconst4*x72*x75))+(((-1.0)*x114*x94))+(((-1.0)*gconst7*x80*x98))+(((-0.68304)*x74*x75))+((x111*x75))+(((-1.0)*x113*x78))+(((-1.0)*gconst9*x72*x81))+(((-1.0)*gconst9*x72*x96))+((gconst5*x80*x91))+((gconst6*gconst8*x111))+(((0.002489593507488)*gconst5*x80))+(((-0.003499077312)*x113))+((gconst11*x72*x87))+(((-0.003499077312)*x104))+((x73*x86))+((x73*x89))+(((-1.0)*x86*x87))+((x104*x78))+(((0.24299148)*x75*x80))+(((-0.68304)*x74*x81))+((x93*x96))+((x111*x97))+(((-2.0)*gconst6*rxp0_2*x81))+(((-1.0)*gconst6*x72*x90))+(((-1.0)*gconst6*x72*x73))+(((-0.0583179552)*gconst8*x116))+(((0.002489593507488)*gconst8*x80))+(((-1.0)*x107*x73))+(((-1.0)*x114*x77))+(((0.0583179552)*gconst5*x116))+(((-1.0)*gconst8*x80*x91))+(((0.24299148)*x80*x81))+(((-1.0)*gconst5*gconst6*x111))+((gconst11*x72*x73))+((gconst10*x80*x98))+(((-1.0)*x81*x93))+((x102*x77))+(((2.0)*gconst7*rxp0_2*x96))+(((-1.0)*x89*x90))+(((-1.0)*x102*x75)));
op[2]=((((-0.256271090940063)*gconst4*gconst9*(npx*npx)))+(((0.97196592)*gconst7*npx*r20*rxp1_2))+(((-0.004917888)*gconst10*npy*r20*r21))+(((0.0036903037095369)*gconst4*gconst9))+(((0.0409824)*gconst7*npy*r20*rxp2_2))+(((-1.0)*gconst10*gconst5*gconst6*rxp2_2))+(((-0.34577687604)*gconst5*npx*npy*rxp1_2))+(((0.12149574)*gconst11*gconst4*rxp0_2))+(((-0.0036903037095369)*gconst4*gconst8))+(((-0.003499077312)*gconst5*r21*(npy*npy)))+(((0.48598296)*gconst10*npy*r20*rxp0_2))+(((0.0036903037095369)*gconst5*gconst8))+(((-0.0291589776)*gconst8*rxp2_2*(npy*npy)))+(((-1.0124645)*gconst10*gconst4*npx*rxp0_2))+(((0.0147612148381476)*gconst8*npy*r20))+(((-4.0)*gconst10*gconst7*(rxp0_2*rxp0_2)))+(((-4.0)*gconst11*gconst7*(rxp0_2*rxp0_2)))+(((-1.0)*gconst2*gconst5*gconst6*gconst9))+(((-0.12)*gconst10*gconst4*gconst7*r21))+(((0.0409824)*gconst2*gconst5*npy*r20))+(((-4.049858)*gconst10*gconst5*npy*rxp1_2))+(((-4.049858)*gconst7*gconst8*npy*rxp1_2))+(((-0.48598296)*gconst7*npy*r20*rxp0_2))+(((-0.0036903037095369)*gconst5*gconst9))+(((0.0409824)*gconst10*npy*r20*rxp2_2))+(((-1.0)*gconst11*gconst4*gconst7*rxp2_2))+((gconst11*gconst6*gconst8*rxp2_2))+(((0.12)*gconst11*gconst5*gconst6*r21))+(((0.1166359104)*gconst7*r20*rxp1_2))+(((-0.0576)*gconst2*gconst7*(r20*r20)))+(((0.12149574)*gconst6*gconst8*rxp0_2))+(((-1.0124645)*gconst6*gconst8*npx*rxp0_2))+(((-0.12149574)*gconst10*gconst5*rxp0_2))+(((-1.0124645)*gconst7*gconst8*npx*rxp0_2))+(((-1.0)*gconst0*gconst10*gconst5*gconst9))+(((-0.12301012365123)*gconst8*npx*npy*r20))+(((-4.0)*gconst11*gconst6*(rxp0_2*rxp0_2)))+(((-0.12149574)*gconst7*gconst9*rxp0_2))+((gconst10*gconst7*gconst9*rxp2_2))+(((-0.69155375208)*gconst8*rxp0_2*(npy*npy)))+(((0.1166359104)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-1.0124645)*gconst7*gconst9*npx*rxp0_2))+(((0.12149574)*gconst10*gconst4*rxp0_2))+(((-16.0)*gconst10*gconst7*(rxp1_2*rxp1_2)))+(((0.24299148)*gconst11*gconst8*rxp0_2))+(((-1.36608)*gconst10*npy*rxp0_2*rxp1_2))+(((-0.256271090940063)*gconst5*gconst9*(npx*npx)))+(((-1.0)*gconst11*gconst7*gconst8*rxp2_2))+(((-1.0124645)*gconst11*gconst5*npx*rxp0_2))+(((0.0409824)*gconst1*gconst8*npy*r20))+(((-0.12)*gconst11*gconst7*gconst8*r21))+(((0.003499077312)*gconst8*r21*(npy*npy)))+(((0.0147612148381476)*(npx*npx)*(r20*r20)))+(((-4.0)*gconst10*gconst6*(rxp0_2*rxp0_2)))+((gconst3*gconst5*gconst6*gconst8))+(((-0.256271090940063)*gconst5*gconst8*(npx*npx)))+((gconst10*gconst4*gconst7*rxp2_2))+(((0.24299148)*gconst4*gconst7*rxp0_2))+(((0.0147612148381476)*gconst5*npy*r20))+(((-0.0414932251248)*gconst8*npy*rxp1_2))+(((0.12)*gconst10*gconst6*gconst9*r21))+(((-1.0)*gconst10*gconst6*gconst9*rxp2_2))+(((-0.0414932251248)*gconst5*npy*rxp1_2))+(((0.34577687604)*gconst8*npx*npy*rxp1_2))+(((-1.0124645)*gconst6*gconst9*npx*rxp0_2))+(((0.0829864502496)*npx*npy*r20*rxp0_2))+(((-0.97196592)*gconst10*npx*r20*rxp1_2))+(((-1.08340231896025)*gconst5*gconst8*(npy*npy)))+(((-1.0124645)*gconst10*gconst5*npx*rxp0_2))+(((0.12)*gconst10*gconst7*gconst9*r21))+(((0.061505061825615)*gconst4*gconst8*npx))+(((0.12)*gconst10*gconst5*gconst6*r21))+(((0.12301012365123)*gconst5*npx*npy*r20))+(((-0.0291589776)*gconst5*rxp2_2*(npy*npy)))+((gconst1*gconst10*gconst4*gconst9))+(((0.12149574)*gconst7*gconst8*rxp0_2))+(((-0.12)*gconst11*gconst6*gconst8*r21))+(((0.1152)*gconst10*gconst7*(r20*r20)))+((gconst2*gconst4*gconst7*gconst9))+(((-1.0124645)*gconst11*gconst4*npx*rxp0_2))+((gconst0*gconst11*gconst5*gconst8))+(((-0.12149574)*gconst6*gconst9*rxp0_2))+(((-0.12)*gconst11*gconst4*gconst7*r21))+(((0.1166359104)*gconst10*r20*rxp1_2))+(((-0.0576)*gconst1*gconst10*(r20*r20)))+(((-0.24299148)*gconst10*gconst9*rxp0_2))+(((-0.24299148)*gconst5*gconst6*rxp0_2))+(((-0.256271090940063)*gconst4*gconst8*(npx*npx)))+(((-0.000212561493669325)*(r20*r20)))+(((0.004917888)*gconst7*npy*r20*r21))+(((-0.061505061825615)*gconst5*gconst9*npx))+((gconst11*gconst5*gconst6*rxp2_2))+(((-0.12149574)*gconst11*gconst5*rxp0_2))+(((-1.0)*gconst1*gconst11*gconst4*gconst8))+(((0.69155375208)*gconst5*rxp0_2*(npy*npy)))+(((-1.0)*gconst3*gconst4*gconst7*gconst8))+(((1.36608)*gconst7*npy*rxp0_2*rxp1_2)));
op[3]=((((0.48)*gconst10*gconst6*r21*rxp0_2))+(((8.099716)*gconst7*npy*rxp0_2*rxp1_2))+(((-0.49204049460492)*r20*rxp1_2*(npx*npx)))+(((0.49204049460492)*npx*npy*r20*rxp0_2))+(((-0.68304)*gconst10*npy*rxp1_2*rxp2_2))+(((0.0414932251248)*gconst8*r21*(npy*npy)))+(((-0.0583179552)*gconst10*npx*(r20*r20)))+(((-2.0)*gconst2*gconst5*gconst6*rxp0_2))+(((-1.38310750416)*npx*npy*rxp0_2*rxp1_2))+(((-0.48598296)*gconst11*(rxp0_2*rxp0_2)))+(((0.0145794888)*gconst10*gconst9*r21))+(((0.06074787)*gconst11*gconst5*rxp2_2))+(((-0.50623225)*gconst10*gconst4*npx*rxp2_2))+(((-2.0)*gconst2*gconst6*gconst9*rxp0_2))+(((0.0072897444)*gconst10*gconst5*r21))+(((0.006998154624)*gconst7*(r20*r20)))+(((-0.06074787)*gconst0*gconst5*gconst9))+(((-0.12301012365123)*gconst5*npx*rxp0_2))+(((-0.48598296)*gconst6*(rxp0_2*rxp0_2)))+(((0.0147612148381476)*gconst8*rxp0_2))+(((-1.92)*gconst10*gconst7*r20*rxp1_2))+(((8.099716)*gconst10*npx*(rxp1_2*rxp1_2)))+(((0.50623225)*gconst11*gconst5*npx*rxp2_2))+(((-0.24602024730246)*gconst8*npy*rxp1_2))+(((-0.12301012365123)*gconst8*npx*rxp0_2))+(((0.06074787)*gconst7*gconst8*npx*r21))+(((-0.24299148)*gconst10*gconst5*npy*r20))+(((-0.003499077312)*gconst2*(r20*r20)))+(((0.0819648)*gconst2*npy*r20*rxp0_2))+(((2.0)*gconst0*gconst11*gconst8*rxp0_2))+(((2.0)*gconst3*gconst4*gconst7*rxp0_2))+(((-2.0)*gconst0*gconst10*gconst5*rxp0_2))+(((-0.06074787)*gconst7*gconst8*rxp2_2))+(((0.24299148)*gconst7*npy*r20*rxp2_2))+(((-8.099716)*gconst7*npx*(rxp1_2*rxp1_2)))+(((-0.06074787)*gconst11*gconst4*rxp2_2))+(((0.0145794888)*gconst5*gconst6*r21))+(((-0.0145794888)*gconst4*gconst7*r21))+(((-0.68304)*gconst1*gconst8*npy*rxp1_2))+(((0.0072897444)*gconst7*gconst9*r21))+(((-0.06074787)*gconst3*gconst4*gconst8))+(((0.06074787)*gconst10*gconst4*rxp2_2))+(((0.06074787)*gconst3*gconst5*gconst8))+(((0.48)*gconst11*gconst7*r21*rxp0_2))+(((-1.0124645)*gconst10*gconst9*npx*rxp2_2))+(((-0.0072897444)*gconst7*gconst8*r21))+(((0.0291589776)*gconst7*npy*r20*r21))+(((4.0)*gconst11*gconst7*rxp0_2*rxp2_2))+(((0.50623225)*gconst1*gconst4*gconst8*npx))+(((2.0)*gconst3*gconst7*gconst8*rxp0_2))+(((0.06074787)*gconst6*gconst8*npx*r21))+(((0.06074787)*gconst10*gconst4*npx*r21))+(((2.0)*gconst3*gconst6*gconst8*rxp0_2))+(((1.38310750416)*(npy*npy)*(rxp0_2*rxp0_2)))+(((0.06074787)*gconst7*gconst9*npx*r21))+(((-0.004979187014976)*npx*npy*r20*r21))+(((-0.013996309248)*r21*rxp0_2*(npy*npy)))+(((-0.50623225)*gconst6*gconst8*npx*rxp2_2))+(((1.92)*gconst2*gconst7*r20*rxp1_2))+(((0.48)*gconst10*gconst7*r21*rxp0_2))+(((-0.0072897444)*gconst11*gconst4*r21))+(((1.0124645)*gconst4*gconst7*npx*rxp2_2))+(((-0.68304)*gconst7*gconst8*npy*rxp1_2))+(((-0.50623225)*gconst2*gconst5*gconst9*npx))+(((0.50623225)*gconst7*gconst9*npx*rxp2_2))+(((0.06074787)*gconst2*gconst4*gconst9))+(((0.0072897444)*gconst6*gconst9*r21))+(((0.50623225)*gconst3*gconst4*gconst8*npx))+(((-1.0124645)*gconst5*gconst6*npx*rxp2_2))+(((0.06074787)*gconst0*gconst5*gconst8))+(((-8.099716)*gconst10*npy*rxp0_2*rxp1_2))+(((-0.06074787)*gconst1*gconst4*gconst8))+(((-0.0414932251248)*gconst5*r21*(npy*npy)))+(((0.50623225)*gconst11*gconst4*npx*rxp2_2))+(((-0.24299148)*gconst7*gconst8*npy*r20))+(((-0.50623225)*gconst0*gconst5*gconst9*npx))+(((-0.0819648)*gconst1*npy*r20*rxp0_2))+(((-0.24602024730246)*gconst5*npy*rxp1_2))+(((-0.50623225)*gconst2*gconst4*gconst9*npx))+(((0.06074787)*gconst11*gconst4*npx*r21))+(((-0.34577687604)*gconst5*gconst8*(npy*npy)))+(((0.06074787)*gconst6*gconst9*npx*r21))+(((0.0291589776)*gconst2*npx*(r20*r20)))+(((-2.0)*gconst1*gconst10*gconst9*rxp0_2))+(((-0.06074787)*gconst2*gconst5*gconst9))+(((-0.12301012365123)*gconst4*npx*rxp0_2))+(((-2.0501687275205)*gconst5*npx*npy*rxp1_2))+(((-0.48598296)*gconst7*(rxp0_2*rxp0_2)))+(((0.50623225)*gconst3*gconst5*gconst8*npx))+(((0.24299148)*gconst2*gconst5*npy*r20))+(((-0.97196592)*gconst10*(rxp1_2*rxp1_2)))+(((-0.0072897444)*gconst6*gconst8*r21))+(((-0.34577687604)*gconst5*rxp2_2*(npy*npy)))+(((-0.34577687604)*gconst8*rxp2_2*(npy*npy)))+(((1.92)*gconst1*gconst10*r20*rxp1_2))+(((2.0)*gconst1*gconst10*gconst4*rxp0_2))+(((0.00708538312231085)*r20*rxp1_2))+(((-0.12301012365123)*gconst9*npx*rxp0_2))+(((0.06074787)*gconst10*gconst5*npx*r21))+(((2.0)*gconst1*gconst11*gconst4*rxp0_2))+(((-2.1668046379205)*gconst8*rxp0_2*(npy*npy)))+(((-0.50623225)*gconst6*gconst9*npx*rxp2_2))+(((2.1668046379205)*gconst5*rxp0_2*(npy*npy)))+(((0.06074787)*gconst7*gconst9*rxp2_2))+(((-0.0147612148381476)*gconst9*rxp0_2))+(((-0.68304)*gconst2*gconst5*npy*rxp1_2))+(((-2.0)*gconst0*gconst10*gconst9*rxp0_2))+(((0.06074787)*gconst11*gconst5*npx*r21))+(((-0.0819648)*gconst7*npy*r21*rxp1_2))+(((0.50623225)*gconst1*gconst4*gconst9*npx))+(((0.0819648)*gconst10*npy*r21*rxp1_2))+(((-2.0)*gconst0*gconst11*gconst5*rxp0_2))+(((-0.0145794888)*gconst11*gconst8*r21))+(((0.0583179552)*gconst7*npx*(r20*r20)))+(((-2.0)*gconst2*gconst7*gconst9*rxp0_2))+(((-0.0072897444)*gconst10*gconst4*r21))+(((0.006998154624)*gconst10*(r20*r20)))+(((-0.97196592)*gconst7*(rxp1_2*rxp1_2)))+(((0.06074787)*gconst6*gconst8*rxp2_2))+(((1.0124645)*gconst11*gconst8*npx*rxp2_2))+(((-0.0291589776)*gconst1*npx*(r20*r20)))+(((0.48)*gconst11*gconst6*r21*rxp0_2))+(((-0.003499077312)*gconst1*(r20*r20)))+(((-0.68304)*gconst7*npy*rxp1_2*rxp2_2))+(((0.0147612148381476)*gconst4*rxp0_2))+(((0.004979187014976)*npy*r20*rxp2_2))+(((-0.68304)*gconst10*gconst5*npy*rxp1_2))+(((2.0501687275205)*gconst8*npx*npy*rxp1_2))+(((0.50623225)*gconst7*gconst8*npx*rxp2_2))+(((0.0072897444)*gconst11*gconst5*r21))+(((-0.06074787)*gconst6*gconst9*rxp2_2))+(((-0.0147612148381476)*gconst5*rxp0_2))+(((-0.50623225)*gconst0*gconst5*gconst8*npx))+(((-2.0)*gconst3*gconst5*gconst6*rxp0_2))+(((-4.0)*gconst10*gconst6*rxp0_2*rxp2_2))+(((2.0)*gconst1*gconst11*gconst8*rxp0_2))+(((0.24299148)*gconst1*gconst8*npy*r20))+(((-0.06074787)*gconst10*gconst5*rxp2_2))+(((0.06074787)*gconst1*gconst4*gconst9))+(((-0.0291589776)*gconst10*npy*r20*r21))+(((-0.48598296)*gconst10*(rxp0_2*rxp0_2)))+(((2.0)*gconst2*gconst4*gconst7*rxp0_2))+(((-0.50623225)*gconst10*gconst5*npx*rxp2_2))+(((0.24299148)*gconst10*npy*r20*rxp2_2)));
op[4]=((((-4.0)*gconst0*gconst10*(rxp0_2*rxp0_2)))+(((0.061505061825615)*gconst4*npx*rxp2_2))+((gconst1*gconst2*gconst4*gconst9))+(((-0.24299148)*gconst6*rxp0_2*rxp2_2))+(((-0.24299148)*gconst2*gconst9*rxp0_2))+(((0.12149574)*gconst0*gconst8*rxp0_2))+(((-0.0590448593525904)*(rxp0_2*rxp0_2)))+(((-0.24299148)*gconst10*rxp0_2*rxp2_2))+(((-0.061505061825615)*gconst5*npx*rxp2_2))+(((-0.0144)*gconst11*gconst7*(r21*r21)))+(((-0.0829864502496)*npy*rxp1_2*rxp2_2))+(((-4.049858)*gconst7*npy*rxp1_2*rxp2_2))+((gconst0*gconst11*gconst5*rxp2_2))+(((0.1166359104)*gconst2*r20*rxp1_2))+(((-2.024929)*gconst7*npx*rxp0_2*rxp2_2))+(((-0.34577687604)*gconst5*npx*npy*rxp1_2))+(((-1.08340231896025)*gconst5*rxp2_2*(npy*npy)))+(((0.0073806074190738)*gconst9*npx*r21))+(((0.12149574)*gconst2*gconst4*rxp0_2))+(((0.0583179552)*gconst11*r21*rxp0_2))+(((-0.0144)*gconst10*gconst7*(r21*r21)))+(((-0.512542181880125)*gconst8*rxp2_2*(npx*npx)))+(((0.1152)*gconst2*gconst7*(r20*r20)))+(((0.24299148)*gconst11*rxp0_2*rxp2_2))+(((-0.0291589776)*gconst5*gconst8*(npy*npy)))+(((-0.97196592)*gconst2*npx*r20*rxp1_2))+(((-0.12149574)*gconst2*gconst5*rxp0_2))+((gconst2*gconst4*gconst7*rxp2_2))+(((1.36608)*gconst1*npy*rxp0_2*rxp1_2))+(((-4.0)*gconst3*gconst6*(rxp0_2*rxp0_2)))+(((-16.0)*gconst2*gconst7*(rxp1_2*rxp1_2)))+(((-16.0)*gconst1*gconst10*(rxp1_2*rxp1_2)))+(((-0.0576)*gconst1*gconst2*(r20*r20)))+(((-0.0295224296762952)*npx*npy*r20*r21))+(((0.0073806074190738)*gconst4*npx*r21))+(((-2.024929)*gconst6*npx*rxp0_2*rxp2_2))+(((-0.1659729004992)*r21*rxp0_2*(npy*npy)))+((gconst0*gconst11*gconst8*rxp2_2))+((gconst0*gconst3*gconst5*gconst8))+(((-0.061505061825615)*gconst9*npx*rxp2_2))+(((0.12)*gconst3*gconst5*gconst6*r21))+(((-1.0)*gconst1*gconst11*gconst4*rxp2_2))+(((-4.0)*gconst2*gconst6*(rxp0_2*rxp0_2)))+(((-1.0124645)*gconst0*gconst8*npx*rxp0_2))+(((-0.12)*gconst1*gconst11*gconst4*r21))+((gconst2*gconst7*gconst9*rxp2_2))+(((0.48598296)*gconst2*npy*r20*rxp0_2))+(((-0.12)*gconst1*gconst10*gconst4*r21))+(((-1.0124645)*gconst2*gconst5*npx*rxp0_2))+(((-0.97196592)*gconst7*npx*r20*rxp1_2))+(((-4.0)*gconst0*gconst11*(rxp0_2*rxp0_2)))+(((-1.0)*gconst1*gconst3*gconst4*gconst8))+(((-4.049858)*gconst2*gconst5*npy*rxp1_2))+(((-0.1166359104)*gconst10*r20*rxp1_2))+(((-0.12301012365123)*gconst5*npx*npy*r20))+(((4.100337455041)*(npx*npx)*(rxp1_2*rxp1_2)))+(((-0.1166359104)*gconst7*r20*rxp1_2))+(((-4.0)*gconst1*gconst10*(rxp0_2*rxp0_2)))+(((0.12149574)*gconst3*gconst4*rxp0_2))+(((0.12)*gconst0*gconst11*gconst5*r21))+(((0.24299148)*gconst7*rxp0_2*rxp2_2))+(((0.12)*gconst2*gconst6*gconst9*r21))+((gconst3*gconst6*gconst8*rxp2_2))+(((0.0409824)*gconst1*npy*r20*rxp2_2))+(((0.12301012365123)*gconst8*npx*npy*r20))+(((-0.12)*gconst3*gconst7*gconst8*r21))+(((-4.0)*gconst2*gconst7*(rxp0_2*rxp0_2)))+(((-0.0590448593525904)*(rxp1_2*rxp1_2)))+(((-0.69155375208)*gconst8*rxp0_2*(npy*npy)))+(((-1.0124645)*gconst1*gconst9*npx*rxp0_2))+((gconst10*gconst7*(rxp2_2*rxp2_2)))+(((0.000885672890288856)*gconst5*r21))+(((-0.12)*gconst1*gconst11*gconst8*r21))+(((0.0295224296762952)*npy*r20*rxp2_2))+(((-1.36608)*gconst10*npy*rxp0_2*rxp1_2))+(((-0.12149574)*gconst0*gconst9*rxp0_2))+(((0.12)*gconst2*gconst5*gconst6*r21))+(((-0.12)*gconst0*gconst11*gconst8*r21))+(((0.0829864502496)*npx*npy*r21*rxp1_2))+(((0.0073806074190738)*gconst5*npx*r21))+(((-0.12)*gconst3*gconst4*gconst7*r21))+(((-2.024929)*gconst10*npx*rxp0_2*rxp2_2))+(((-0.12)*gconst3*gconst6*gconst8*r21))+(((-0.0291589776)*(npy*npy)*(rxp2_2*rxp2_2)))+(((0.12)*gconst0*gconst10*gconst5*r21))+(((-0.13000827827523)*gconst5*r21*(npy*npy)))+(((-1.0124645)*gconst3*gconst4*npx*rxp0_2))+(((0.12)*gconst0*gconst10*gconst9*r21))+(((-0.0576)*gconst10*gconst7*(r20*r20)))+(((0.0583179552)*gconst7*r21*rxp0_2))+(((-0.0147612148381476)*gconst8*npy*r20))+(((0.24)*gconst10*gconst6*r21*rxp2_2))+(((-1.0124645)*gconst2*gconst4*npx*rxp0_2))+((gconst11*gconst6*(rxp2_2*rxp2_2)))+(((-1.08340231896025)*gconst8*rxp2_2*(npy*npy)))+(((0.48598296)*gconst7*npy*r20*rxp0_2))+(((-0.48598296)*gconst10*npy*r20*rxp0_2))+(((-0.0414932251248)*gconst8*npy*rxp1_2))+(((-0.512542181880125)*gconst4*rxp2_2*(npx*npx)))+(((-0.000885672890288856)*gconst8*r21))+(((0.000885672890288856)*gconst9*r21))+(((-1.0)*gconst0*gconst10*gconst9*rxp2_2))+(((-1.0)*gconst0*gconst10*gconst5*rxp2_2))+(((-0.48598296)*gconst1*npy*r20*rxp0_2))+(((0.1166359104)*gconst1*r20*rxp1_2))+(((-0.24299148)*gconst0*gconst5*rxp0_2))+(((-0.0409824)*gconst10*gconst5*npy*r20))+(((-0.004917888)*gconst2*npy*r20*r21))+(((-0.512542181880125)*gconst5*rxp2_2*(npx*npx)))+(((-0.0414932251248)*gconst5*npy*rxp1_2))+(((-1.0)*gconst3*gconst7*gconst8*rxp2_2))+(((0.34577687604)*gconst8*npx*npy*rxp1_2))+(((-1.0)*gconst2*gconst5*gconst6*rxp2_2))+(((0.000425122987338651)*(r20*r20)))+(((-1.0)*gconst0*gconst2*gconst5*gconst9))+(((-1.0124645)*gconst1*gconst8*npx*rxp0_2))+(((0.0583179552)*gconst6*r21*rxp0_2))+(((-1.0124645)*gconst3*gconst5*npx*rxp0_2))+(((-2.024929)*gconst11*npx*rxp0_2*rxp2_2))+(((-1.0)*gconst1*gconst11*gconst8*rxp2_2))+(((0.12)*gconst2*gconst7*gconst9*r21))+(((-0.12)*gconst2*gconst4*gconst7*r21))+(((-0.0147612148381476)*gconst5*npy*r20))+(((-0.48598296)*gconst7*npy*r21*rxp1_2))+(((0.0583179552)*gconst10*r21*rxp0_2))+(((0.004917888)*gconst1*npy*r20*r21))+(((0.0409824)*gconst2*npy*r20*rxp2_2))+(((0.061505061825615)*gconst8*npx*rxp2_2))+(((-4.0)*gconst3*gconst7*(rxp0_2*rxp0_2)))+((gconst3*gconst5*gconst6*rxp2_2))+(((-0.000885672890288856)*gconst4*r21))+(((0.00041988927744)*(npy*npy)*(r21*r21)))+(((-1.36608)*gconst2*npy*rxp0_2*rxp1_2))+(((0.1152)*gconst1*gconst10*(r20*r20)))+((gconst1*gconst10*gconst9*rxp2_2))+(((-1.0124645)*gconst0*gconst9*npx*rxp0_2))+(((0.12)*gconst1*gconst10*gconst9*r21))+(((-0.24)*gconst11*gconst7*r21*rxp2_2))+(((-0.12149574)*gconst1*gconst9*rxp0_2))+(((-1.0)*gconst2*gconst6*gconst9*rxp2_2))+(((-1.0)*gconst11*gconst7*(rxp2_2*rxp2_2)))+(((-0.0295224296762952)*(npx*npx)*(r20*r20)))+(((0.48598296)*gconst10*npy*r21*rxp1_2))+(((-0.12149574)*gconst3*gconst5*rxp0_2))+(((0.24299148)*gconst1*gconst4*rxp0_2))+((gconst1*gconst10*gconst4*rxp2_2))+(((0.24299148)*gconst3*gconst8*rxp0_2))+(((0.97196592)*gconst10*npx*r20*rxp1_2))+(((-4.0)*gconst1*gconst11*(rxp0_2*rxp0_2)))+(((-1.0)*gconst10*gconst6*(rxp2_2*rxp2_2)))+(((-4.049858)*gconst10*npy*rxp1_2*rxp2_2))+(((-0.512542181880125)*gconst9*rxp2_2*(npx*npx)))+(((4.333609275841)*(npy*npy)*(rxp0_2*rxp0_2)))+(((-0.0409824)*gconst7*gconst8*npy*r20))+(((0.69155375208)*gconst5*rxp0_2*(npy*npy)))+(((-0.0144)*gconst10*gconst6*(r21*r21)))+(((0.12149574)*gconst1*gconst8*rxp0_2))+(((-4.049858)*gconst1*gconst8*npy*rxp1_2))+(((0.0073806074190738)*gconst8*npx*r21))+(((-8.200674910082)*npx*npy*rxp0_2*rxp1_2))+(((-0.0144)*gconst11*gconst6*(r21*r21)))+(((1.36608)*gconst7*npy*rxp0_2*rxp1_2))+(((-1.0)*gconst3*gconst4*gconst7*rxp2_2))+(((0.13000827827523)*gconst8*r21*(npy*npy)))+(((0.97196592)*gconst1*npx*r20*rxp1_2)));
op[5]=((((-0.49204049460492)*npy*rxp1_2*rxp2_2))+(((0.0583179552)*gconst1*npx*(r20*r20)))+(((-0.48598296)*gconst1*(rxp0_2*rxp0_2)))+(((-0.68304)*gconst10*npy*rxp1_2*rxp2_2))+(((-0.0583179552)*gconst8*rxp0_2*(npy*npy)))+(((-0.97196592)*gconst1*(rxp1_2*rxp1_2)))+(((0.0072897444)*gconst1*gconst9*r21))+(((0.0414932251248)*gconst8*r21*(npy*npy)))+(((0.48)*gconst2*gconst7*r21*rxp0_2))+(((-1.38310750416)*npx*npy*rxp0_2*rxp1_2))+(((4.0)*gconst1*gconst11*rxp0_2*rxp2_2))+(((-0.0291589776)*gconst2*npy*r20*r21))+(((2.0)*gconst1*gconst2*gconst4*rxp0_2))+(((0.06074787)*gconst0*gconst8*rxp2_2))+(((-0.0291589776)*gconst7*npx*(r20*r20)))+(((0.0145794888)*gconst10*r21*rxp2_2))+(((1.0124645)*gconst1*gconst4*npx*rxp2_2))+(((0.50623225)*gconst3*gconst5*npx*rxp2_2))+(((0.004979187014976)*(npy*npy)*(r21*r21)))+(((8.099716)*gconst2*npx*(rxp1_2*rxp1_2)))+(((-0.0145794888)*gconst1*gconst4*r21))+(((0.12149574)*gconst7*npx*r21*rxp2_2))+(((-0.34577687604)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-0.06074787)*gconst0*gconst9*rxp2_2))+(((-0.50623225)*gconst2*gconst5*npx*rxp2_2))+(((0.06074787)*gconst2*gconst4*npx*r21))+(((-1.92)*gconst2*gconst7*r20*rxp1_2))+(((-0.0207466125624)*gconst5*npx*npy*r20))+(((0.06074787)*gconst2*gconst4*rxp2_2))+(((0.06074787)*gconst3*gconst5*rxp2_2))+(((-4.0)*gconst0*gconst10*rxp0_2*rxp2_2))+(((-0.0145794888)*gconst11*r21*rxp2_2))+(((-0.48598296)*gconst2*(rxp0_2*rxp0_2)))+(((-0.68304)*gconst1*gconst8*npy*rxp1_2))+(((-0.003499077312)*gconst10*(r20*r20)))+(((0.48)*gconst1*gconst10*r21*rxp0_2))+(((8.099716)*gconst1*npy*rxp0_2*rxp1_2))+(((1.0124645)*gconst7*npx*(rxp2_2*rxp2_2)))+(((0.0072897444)*gconst3*gconst5*r21))+(((-0.52003311310092)*r21*rxp0_2*(npy*npy)))+(((-0.48598296)*gconst3*(rxp0_2*rxp0_2)))+(((0.48)*gconst0*gconst10*r21*rxp0_2))+(((0.0072897444)*gconst0*gconst9*r21))+(((0.06074787)*gconst3*gconst5*npx*r21))+(((2.0)*gconst1*gconst3*gconst4*rxp0_2))+(((-0.49204049460492)*npx*rxp0_2*rxp2_2))+(((0.48)*gconst0*gconst11*r21*rxp0_2))+(((0.48)*gconst3*gconst7*r21*rxp0_2))+(((-0.49204049460492)*npx*npy*r20*rxp0_2))+(((0.49204049460492)*npx*npy*r21*rxp1_2))+(((1.38310750416)*(npy*npy)*(rxp0_2*rxp0_2)))+(((1.92)*gconst1*gconst2*r20*rxp1_2))+(((-0.48598296)*gconst0*(rxp0_2*rxp0_2)))+(((0.12149574)*gconst10*npx*r21*rxp2_2))+(((0.50623225)*gconst3*gconst4*npx*rxp2_2))+(((0.24299148)*gconst1*npy*r20*rxp2_2))+(((2.0)*gconst0*gconst3*gconst8*rxp0_2))+(((-0.50623225)*gconst2*gconst4*npx*rxp2_2))+(((-0.0145794888)*gconst7*r21*rxp2_2))+(((0.0145794888)*gconst0*gconst5*r21))+(((-0.50623225)*gconst0*gconst9*npx*rxp2_2))+(((-1.0124645)*gconst10*npx*(rxp2_2*rxp2_2)))+(((-0.06074787)*gconst1*gconst8*rxp2_2))+(((-0.0819648)*gconst10*npy*r20*rxp0_2))+(((-2.0)*gconst0*gconst2*gconst9*rxp0_2))+(((-0.0072897444)*gconst1*gconst8*r21))+(((-0.0072897444)*gconst2*gconst4*r21))+(((-0.24299148)*gconst2*gconst5*npy*r20))+(((-0.0414932251248)*gconst5*r21*(npy*npy)))+(((0.0072897444)*gconst2*gconst5*r21))+(((-0.002489593507488)*gconst8*npy*r20))+(((0.06074787)*gconst1*gconst9*npx*r21))+(((0.48)*gconst3*gconst6*r21*rxp0_2))+(((-0.001749538656)*gconst7*(r21*r21)))+(((0.48)*gconst1*gconst11*r21*rxp0_2))+(((-0.50623225)*gconst0*gconst8*npx*rxp2_2))+(((-0.001749538656)*gconst11*(r21*r21)))+(((0.06074787)*gconst3*gconst4*npx*r21))+(((-2.0)*gconst0*gconst2*gconst5*rxp0_2))+(((0.0819648)*gconst2*npy*r21*rxp1_2))+(((-0.68304)*gconst1*npy*rxp1_2*rxp2_2))+(((0.0145794888)*gconst6*r21*rxp2_2))+(((0.12149574)*gconst6*npx*r21*rxp2_2))+(((0.0819648)*gconst7*npy*r20*rxp0_2))+(((-8.099716)*gconst2*npy*rxp0_2*rxp1_2))+(((0.49204049460492)*r20*rxp1_2*(npx*npx)))+(((-0.001749538656)*gconst10*(r21*r21)))+(((-0.34577687604)*gconst5*rxp2_2*(npy*npy)))+(((-0.34577687604)*gconst8*rxp2_2*(npy*npy)))+(((0.006998154624)*gconst2*(r20*r20)))+(((-0.0145794888)*gconst3*gconst8*r21))+(((-0.24299148)*gconst1*gconst8*npy*r20))+(((-0.00708538312231085)*r20*rxp1_2))+(((0.50623225)*gconst1*gconst8*npx*rxp2_2))+(((0.12149574)*gconst11*npx*r21*rxp2_2))+(((-1.0124645)*gconst2*gconst9*npx*rxp2_2))+(((1.0124645)*gconst11*npx*(rxp2_2*rxp2_2)))+(((-4.0)*gconst2*gconst6*rxp0_2*rxp2_2))+(((-1.0124645)*gconst0*gconst5*npx*rxp2_2))+(((-0.06074787)*gconst2*gconst5*rxp2_2))+(((-1.0124645)*gconst6*npx*(rxp2_2*rxp2_2)))+(((0.0291589776)*gconst1*npy*r20*r21))+(((-0.002489593507488)*gconst5*npy*r20))+(((0.06074787)*gconst2*gconst5*npx*r21))+(((0.0145794888)*gconst2*gconst9*r21))+(((-0.001749538656)*gconst6*(r21*r21)))+(((-0.68304)*gconst2*gconst5*npy*rxp1_2))+(((-0.0072897444)*gconst0*gconst8*r21))+(((-0.24299148)*gconst10*npy*r20*rxp2_2))+(((0.48)*gconst2*gconst6*r21*rxp0_2))+(((-0.0819648)*gconst7*npy*r21*rxp1_2))+(((-8.099716)*gconst1*npx*(rxp1_2*rxp1_2)))+(((0.0819648)*gconst10*npy*r21*rxp1_2))+(((0.06074787)*gconst1*gconst8*npx*r21))+(((-1.92)*gconst1*gconst10*r20*rxp1_2))+(((-0.0291589776)*gconst7*npy*r20*r21))+(((4.0)*gconst3*gconst7*rxp0_2*rxp2_2))+(((-0.0583179552)*gconst2*npx*(r20*r20)))+(((-0.0819648)*gconst1*npy*r21*rxp1_2))+(((-2.0)*gconst0*gconst3*gconst5*rxp0_2))+(((1.0124645)*gconst3*gconst8*npx*rxp2_2))+(((0.24299148)*gconst2*npy*r20*rxp2_2))+(((-0.68304)*gconst2*npy*rxp1_2*rxp2_2))+(((0.00708538312231085)*r21*rxp0_2))+(((0.0583179552)*gconst5*rxp0_2*(npy*npy)))+(((-0.68304)*gconst7*npy*rxp1_2*rxp2_2))+(((0.06074787)*gconst1*gconst9*rxp2_2))+(((-0.003499077312)*gconst7*(r20*r20)))+(((-0.0072897444)*gconst3*gconst4*r21))+(((0.06074787)*gconst0*gconst9*npx*r21))+(((2.0)*gconst1*gconst3*gconst8*rxp0_2))+(((0.006998154624)*gconst1*(r20*r20)))+(((0.50623225)*gconst1*gconst9*npx*rxp2_2))+(((0.0291589776)*gconst10*npy*r20*r21))+(((0.0207466125624)*gconst8*npx*npy*r20))+(((0.0291589776)*gconst10*npx*(r20*r20)))+(((0.06074787)*gconst0*gconst8*npx*r21))+(((-0.06074787)*gconst3*gconst4*rxp2_2))+(((-0.97196592)*gconst2*(rxp1_2*rxp1_2)))+(((-0.24299148)*gconst7*npy*r20*rxp2_2))+(((-2.0)*gconst1*gconst2*gconst9*rxp0_2)));
op[6]=((((-0.0829864502496)*npy*rxp1_2*rxp2_2))+(((-1.0)*gconst3*gconst7*(rxp2_2*rxp2_2)))+(((0.0295224296762952)*npx*npy*r20*r21))+(((-0.003499077312)*gconst5*r21*(npy*npy)))+(((-0.0829864502496)*npx*npy*r20*rxp0_2))+(((-0.0291589776)*gconst8*rxp2_2*(npy*npy)))+(((-0.0409824)*gconst10*npy*r20*rxp2_2))+(((1.36608)*gconst1*npy*rxp0_2*rxp1_2))+(((-1.0)*gconst0*gconst10*(rxp2_2*rxp2_2)))+(((0.0583179552)*gconst3*r21*rxp0_2))+(((-0.0409824)*gconst1*gconst8*npy*r20))+(((-1.0)*gconst1*gconst11*(rxp2_2*rxp2_2)))+(((-0.000212561493669325)*(r21*r21)))+(((-0.12)*gconst1*gconst2*gconst4*r21))+(((0.0156009933930276)*(npy*npy)*(r21*r21)))+(((-4.0)*gconst1*gconst2*(rxp0_2*rxp0_2)))+(((-2.024929)*gconst0*npx*rxp0_2*rxp2_2))+(((-0.1659729004992)*r21*rxp0_2*(npy*npy)))+(((-0.0409824)*gconst2*gconst5*npy*r20))+(((0.48598296)*gconst1*npy*r20*rxp0_2))+((gconst0*gconst11*(rxp2_2*rxp2_2)))+((gconst1*gconst2*gconst9*rxp2_2))+((gconst1*gconst2*gconst4*rxp2_2))+(((-0.0144)*gconst2*gconst6*(r21*r21)))+((gconst1*gconst10*(rxp2_2*rxp2_2)))+(((0.0583179552)*gconst1*r21*rxp0_2))+(((-0.0144)*gconst0*gconst11*(r21*r21)))+((gconst0*gconst3*gconst5*rxp2_2))+(((-0.0295224296762952)*npy*r20*rxp2_2))+(((-4.0)*gconst0*gconst2*(rxp0_2*rxp0_2)))+(((-4.049858)*gconst2*npy*rxp1_2*rxp2_2))+(((-0.0576)*gconst2*gconst7*(r20*r20)))+(((-0.12)*gconst1*gconst3*gconst8*r21))+(((-0.24299148)*gconst2*rxp0_2*rxp2_2))+(((-0.0144)*gconst1*gconst10*(r21*r21)))+(((0.24)*gconst0*gconst10*r21*rxp2_2))+(((-1.02508436376025)*(npx*npx)*(rxp2_2*rxp2_2)))+(((-4.049858)*gconst1*npy*rxp1_2*rxp2_2))+(((-0.97196592)*gconst1*npx*r20*rxp1_2))+(((0.1166359104)*(npy*npy)*(rxp0_2*rxp0_2)))+((gconst0*gconst3*gconst8*rxp2_2))+(((0.1152)*gconst1*gconst2*(r20*r20)))+(((0.12)*gconst1*gconst2*gconst9*r21))+(((0.0583179552)*gconst0*r21*rxp0_2))+(((-0.24)*gconst3*gconst7*r21*rxp2_2))+(((-16.0)*gconst1*gconst2*(rxp1_2*rxp1_2)))+(((0.12)*gconst0*gconst2*gconst5*r21))+(((0.0829864502496)*npx*npy*r21*rxp1_2))+(((-0.24)*gconst1*gconst11*r21*rxp2_2))+(((-1.0)*gconst0*gconst2*gconst5*rxp2_2))+(((0.003499077312)*gconst8*r21*(npy*npy)))+(((0.97196592)*gconst2*npx*r20*rxp1_2))+(((0.0147612148381476)*(npx*npx)*(r20*r20)))+(((-0.0144)*gconst3*gconst6*(r21*r21)))+(((-1.0)*gconst1*gconst3*gconst8*rxp2_2))+(((-0.12)*gconst0*gconst3*gconst8*r21))+(((0.0295224296762952)*npx*r21*rxp2_2))+(((-2.024929)*gconst2*npx*rxp0_2*rxp2_2))+(((-0.0144)*gconst0*gconst10*(r21*r21)))+(((-0.48598296)*gconst2*npy*r20*rxp0_2))+(((-0.0144)*gconst2*gconst7*(r21*r21)))+(((-4.0)*gconst0*gconst3*(rxp0_2*rxp0_2)))+(((0.24299148)*gconst1*rxp0_2*rxp2_2))+(((0.004917888)*gconst10*npy*r20*r21))+(((-0.12)*gconst1*gconst3*gconst4*r21))+((gconst2*gconst7*(rxp2_2*rxp2_2)))+(((-2.024929)*gconst3*npx*rxp0_2*rxp2_2))+(((-0.0409824)*gconst7*npy*r20*rxp2_2))+(((0.48598296)*gconst2*npy*r21*rxp1_2))+(((0.12)*gconst0*gconst2*gconst9*r21))+(((-1.0)*gconst0*gconst2*gconst9*rxp2_2))+(((-0.48598296)*gconst1*npy*r21*rxp1_2))+(((-1.0)*gconst1*gconst3*gconst4*rxp2_2))+(((-0.0291589776)*gconst5*rxp2_2*(npy*npy)))+(((-0.004917888)*gconst7*npy*r20*r21))+(((-1.36608)*gconst2*npy*rxp0_2*rxp1_2))+(((0.24)*gconst2*gconst6*r21*rxp2_2))+((gconst3*gconst6*(rxp2_2*rxp2_2)))+(((-0.1166359104)*gconst1*r20*rxp1_2))+(((-1.0)*gconst2*gconst6*(rxp2_2*rxp2_2)))+(((-0.24299148)*gconst0*rxp0_2*rxp2_2))+(((-0.0576)*gconst1*gconst10*(r20*r20)))+(((-4.0)*gconst1*gconst3*(rxp0_2*rxp0_2)))+(((0.12)*gconst0*gconst3*gconst5*r21))+(((-0.000212561493669325)*(r20*r20)))+(((0.24299148)*gconst3*rxp0_2*rxp2_2))+(((-0.1166359104)*gconst2*r20*rxp1_2))+(((-1.08340231896025)*(npy*npy)*(rxp2_2*rxp2_2)))+(((-2.024929)*gconst1*npx*rxp0_2*rxp2_2))+(((-0.0144)*gconst1*gconst11*(r21*r21)))+(((0.0583179552)*gconst2*r21*rxp0_2))+(((-0.0144)*gconst3*gconst7*(r21*r21))));
op[7]=((((-1.0)*gconst3*x108))+(((-1.0)*x117*x76))+(((-1.0)*gconst2*x108))+((x106*x76))+((x106*x79))+((x117*x82))+(((-0.0145794888)*rxp2_2*x84))+(((-1.0)*gconst2*x115))+(((-1.0)*gconst2*x118))+(((-0.004979187014976)*rxp2_2*x80))+(((0.0291589776)*x80*x92))+(((0.0819648)*x74*x92))+((gconst1*x118))+(((-1.0)*x112*x79))+((gconst2*x69*x78))+(((-0.0819648)*x74*x84))+(((-0.0145794888)*x103))+((gconst1*x80*x98))+((gconst1*x100*x83))+(((-1.0)*gconst1*x115))+((x106*x99))+(((-1.0)*gconst1*x101*x80))+(((-1.0)*gconst1*x108))+((x106*x82))+(((0.0145794888)*gconst2*x88))+(((0.004979187014976)*x119))+((gconst3*x100*x83))+(((-1.0)*gconst1*x74*x95))+(((-1.0)*gconst2*x80*x98))+(((0.004979187014976)*x80*x83))+(((-0.013996309248)*r21*x116))+(((-0.0291589776)*x80*x84))+(((-1.0)*x107*x70))+(((-1.0)*gconst2*x74*x95))+(((-1.0)*gconst2*x101*x80))+((gconst2*x100*x83))+(((0.0145794888)*gconst0*x88))+((gconst3*x118))+(((-1.0)*gconst1*x69*x78))+(((-1.0)*gconst0*x108))+((gconst0*x100*x83))+(((-1.0)*gconst0*x118)));
op[8]=((((-1.0)*x105*x76))+(((-0.24)*x82*x88))+(((-0.0576)*x69*x79))+(((-1.0)*x109*x76))+(((-1.0)*x109*x79))+((x70*x99))+(((-1.0)*x105*x82))+(((0.24)*x76*x88))+(((0.00041988927744)*x119))+(((-1.0)*gconst2*x80*x85))+(((-1.0)*gconst1*x80*x85))+((x70*x79))+(((-1.0)*x109*x99))+(((0.004917888)*x80*x92))+(((-1.0)*x109*x82))+(((-0.004917888)*x80*x84))+(((-1.0)*x110*x70)));
polyroots8(op,zeror,numroots);
IkReal j4array[8], cj4array[8], sj4array[8], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[8]={true,true,true,true,true,true,true,true};
_nj4 = 8;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j5eval[2];
IkReal x120=cj4*cj4;
IkReal x121=(npy*rxp0_2);
IkReal x122=((8.33333333333333)*sj4);
IkReal x123=((2.96458333333333)*sj4);
IkReal x124=(npx*rxp1_2);
IkReal x125=((0.08538)*sj4);
IkReal x126=((0.030373935)*sj4);
IkReal x127=(cj4*pz);
IkReal x128=(cj4*npz*r22);
IkReal x129=((0.253116125)*x120);
IkReal x130=((24.7048611111111)*x120);
j5eval[0]=((((-1.0)*x123*x127))+((x121*x122))+x128+((x124*x130))+((x123*x128))+(((-1.0)*x121*x130))+(((-24.7048611111111)*x124))+(((-1.0)*x127))+(((24.7048611111111)*x121))+(((-1.0)*x122*x124)));
j5eval[1]=IKsign((((x121*x125))+(((-1.0)*x126*x127))+(((-0.0102456)*x127))+(((-1.0)*x124*x125))+(((0.253116125)*x121))+(((0.0102456)*x128))+((x124*x129))+(((-1.0)*x121*x129))+((x126*x128))+(((-0.253116125)*x124))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x131=((0.08538)*sj4);
IkReal x132=cj4*cj4;
IkReal x133=(rxp1_2*sj4);
IkReal x134=((0.35575)*pp);
IkReal x135=(cj4*r20);
IkReal x136=((0.0036448722)*sj4);
IkReal x137=(rxp0_2*sj4);
IkReal x138=(cj4*r21);
IkReal x139=((0.04269)*pp);
IkReal x140=((0.030373935)*rxp0_2);
IkReal x141=(cj4*sj4);
IkReal x142=((0.253116125)*rxp2_2);
IkReal x143=((0.253116125)*x132);
IkReal x144=((0.030373935)*x132);
IkReal x145=((0.08538)*cj4*rxp2_2);
IkReal x146=((0.253116125)*cj4*npz);
IkReal x147=((((0.030373935)*x141))+(((0.0102456)*cj4)));
CheckValue<IkReal> x148=IKPowWithIntegerCheck(IKsign((((npz*r22*x147))+((npy*rxp0_2*(((0.253116125)+(((-1.0)*x143))+x131))))+((npx*rxp1_2*(((-0.253116125)+x143+(((-1.0)*x131))))))+(((-1.0)*pz*x147)))),-1);
if(!x148.valid){
continue;
}
CheckValue<IkReal> x149 = IKatan2WithCheck(IkReal(((((-1.0)*x137*x146))+((npz*r21*x144))+(((-1.0)*x132*x140))+(((-1.0)*x138*x139))+x140+(((0.0051228)*x137))+(((-1.0)*x136*x138))+((x134*x137))+((npx*x145))+(((-0.000614736)*x138))+((npx*x141*x142)))),IkReal((((npy*x145))+((x135*x136))+((x135*x139))+(((-1.0)*x133*x146))+(((0.000614736)*x135))+(((0.030373935)*rxp1_2))+(((0.0051228)*x133))+((npy*x141*x142))+((x133*x134))+(((-1.0)*npz*r20*x144))+(((-1.0)*rxp1_2*x144)))),IKFAST_ATAN2_MAGTHRESH);
if(!x149.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x148.value)))+(x149.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x150=IKsin(j5);
IkReal x151=IKcos(j5);
IkReal x152=((0.253116125)*sj4);
IkReal x153=((0.12)*cj4);
IkReal x154=(npx*x151);
IkReal x155=(npy*x150);
evalcond[0]=((((-1.0)*rxp0_2*sj4*x151))+((r21*x151*x153))+((cj4*rxp2_2))+((rxp1_2*sj4*x150))+((r20*x150*x153)));
evalcond[1]=((0.0051228)+(((0.08538)*x154))+((x152*x154))+(((-0.08538)*x155))+(((-1.0)*x152*x155))+(((0.35575)*pp))+(((0.030373935)*sj4))+(((-0.253116125)*cj4*npz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0eval[1];
j0eval[0]=(((cj5*r10))+(((8.33333333333333)*py))+(((-1.0)*r11*sj5)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
j0eval[0]=(((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x156=((8.33333333333333)*sj4);
j0eval[0]=((((8.33333333333333)*cj4*rxp2_0))+((cj4*r00*sj5))+((rxp1_0*sj5*x156))+(((-1.0)*cj5*rxp0_0*x156))+((cj4*cj5*r01)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x157=((8.33333333333333)*py);
IkReal x158=((1.0)+(((-1.0)*(r12*r12))));
if((x158) < -0.00001)
continue;
IkReal x159=IKabs(IKsqrt(x158));
IkReal x166 = x158;
if(IKabs(x166)==0){
continue;
}
IkReal x160=pow(x166,-0.5);
IkReal x161=(r11*x160);
IkReal x162=(r10*x160);
CheckValue<IkReal> x167=IKPowWithIntegerCheck(x159,-1);
if(!x167.valid){
continue;
}
IkReal x163=x167.value;
if((((1.0)+(((-69.4444444444444)*(py*py)*(x163*x163))))) < -0.00001)
continue;
IkReal x164=IKsqrt(((1.0)+(((-69.4444444444444)*(py*py)*(x163*x163)))));
IkReal x165=((1.0)*x164);
CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x168.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x169=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x169.valid){
continue;
}
if( ((x157*(x169.value))) < -1-IKFAST_SINCOS_THRESH || ((x157*(x169.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst28=((((-1.0)*(x168.value)))+(((-1.0)*(IKasin((x157*(x169.value)))))));
IkReal gconst29=(((x157*x161*x163))+(((-1.0)*x162*x165)));
IkReal gconst30=((((-1.0)*x157*x162*x163))+(((-1.0)*x161*x165)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x170.valid){
continue;
}
if( (((8.33333333333333)*py*(x170.value))) < -1-IKFAST_SINCOS_THRESH || (((8.33333333333333)*py*(x170.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x171 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x171.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((j5+(IKasin(((8.33333333333333)*py*(x170.value))))+(x171.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x172=gconst29*gconst29;
IkReal x173=gconst30*gconst30;
IkReal x174=(gconst30*r10);
IkReal x175=((0.96)*py);
IkReal x176=(gconst29*r01);
IkReal x177=((0.96)*px);
IkReal x178=(gconst30*r00);
IkReal x179=(gconst29*r11);
IkReal x180=((0.0576)*x173);
IkReal x181=((0.0576)*x172);
CheckValue<IkReal> x189=IKPowWithIntegerCheck(((((0.12)*x174))+(((-0.12)*x179))+py),-1);
if(!x189.valid){
continue;
}
IkReal x182=x189.value;
IkReal x183=(px*x182);
IkReal x184=((0.12)*x182);
IkReal x185=(x178*x184);
IkReal x186=(x176*x184);
IkReal x187=(x185+x183);
if((((((-1.0)*x175*x179))+(((-0.1152)*x174*x179))+(((4.0)*(py*py)))+(((-0.1152)*x176*x178))+((x180*(r00*r00)))+((x174*x175))+((x181*(r11*r11)))+(((4.0)*(px*px)))+(((-1.0)*x176*x177))+((x180*(r10*r10)))+((x181*(r01*r01)))+((x177*x178)))) < -0.00001)
continue;
IkReal x188=((0.5)*x182*(IKsqrt(((((-1.0)*x175*x179))+(((-0.1152)*x174*x179))+(((4.0)*(py*py)))+(((-0.1152)*x176*x178))+((x180*(r00*r00)))+((x174*x175))+((x181*(r11*r11)))+(((4.0)*(px*px)))+(((-1.0)*x176*x177))+((x180*(r10*r10)))+((x181*(r01*r01)))+((x177*x178))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x187))+x186+x188))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x186))+x187+x188))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2890=((8.33333333333333)*py);
IkReal x2891=((1.0)+(((-1.0)*(r12*r12))));
if((x2891) < -0.00001)
continue;
IkReal x2892=IKabs(IKsqrt(x2891));
IkReal x2899 = x2891;
if(IKabs(x2899)==0){
continue;
}
IkReal x2893=pow(x2899,-0.5);
IkReal x2894=(r11*x2893);
IkReal x2895=(r10*x2893);
CheckValue<IkReal> x2900=IKPowWithIntegerCheck(x2892,-1);
if(!x2900.valid){
continue;
}
IkReal x2896=x2900.value;
if((((1.0)+(((-69.4444444444444)*(py*py)*(x2896*x2896))))) < -0.00001)
continue;
IkReal x2897=IKsqrt(((1.0)+(((-69.4444444444444)*(py*py)*(x2896*x2896)))));
IkReal x2898=((1.0)*x2897);
CheckValue<IkReal> x2901 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2901.valid){
continue;
}
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2902=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2902.valid){
continue;
}
if( ((x2890*(x2902.value))) < -1-IKFAST_SINCOS_THRESH || ((x2890*(x2902.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst31=((3.14159265358979)+(((-1.0)*(x2901.value)))+(IKasin((x2890*(x2902.value)))));
IkReal gconst32=(((x2895*x2898))+((x2890*x2894*x2896)));
IkReal gconst33=(((x2894*x2898))+(((-1.0)*x2890*x2895*x2896)));
if((((r11*r11)+(r10*r10))) < -0.00001)
continue;
CheckValue<IkReal> x2903=IKPowWithIntegerCheck(IKabs(IKsqrt(((r11*r11)+(r10*r10)))),-1);
if(!x2903.valid){
continue;
}
if( (((8.33333333333333)*py*(x2903.value))) < -1-IKFAST_SINCOS_THRESH || (((8.33333333333333)*py*(x2903.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x2904 = IKatan2WithCheck(IkReal(r10),IkReal(((-1.0)*r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x2904.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(((-1.0)*(IKasin(((8.33333333333333)*py*(x2903.value))))))+j5+(x2904.value))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2905=gconst32*gconst32;
IkReal x2906=gconst33*gconst33;
IkReal x2907=((0.96)*py);
IkReal x2908=(gconst33*r10);
IkReal x2909=(gconst33*r00);
IkReal x2910=(gconst32*r11);
IkReal x2911=((0.96)*px);
IkReal x2912=(gconst32*r01);
IkReal x2913=((0.0576)*x2905);
IkReal x2914=((0.0576)*x2906);
CheckValue<IkReal> x2922=IKPowWithIntegerCheck(((((-0.12)*x2910))+py+(((0.12)*x2908))),-1);
if(!x2922.valid){
continue;
}
IkReal x2915=x2922.value;
IkReal x2916=(px*x2915);
IkReal x2917=((0.12)*x2915);
IkReal x2918=(x2909*x2917);
IkReal x2919=(x2912*x2917);
IkReal x2920=(x2916+x2918);
if(((((x2914*(r00*r00)))+((x2913*(r11*r11)))+(((4.0)*(py*py)))+(((-1.0)*x2907*x2910))+((x2909*x2911))+((x2913*(r01*r01)))+((x2914*(r10*r10)))+(((-1.0)*x2911*x2912))+(((4.0)*(px*px)))+(((-0.1152)*x2908*x2910))+((x2907*x2908))+(((-0.1152)*x2909*x2912)))) < -0.00001)
continue;
IkReal x2921=((0.5)*x2915*(IKsqrt((((x2914*(r00*r00)))+((x2913*(r11*r11)))+(((4.0)*(py*py)))+(((-1.0)*x2907*x2910))+((x2909*x2911))+((x2913*(r01*r01)))+((x2914*(r10*r10)))+(((-1.0)*x2911*x2912))+(((4.0)*(px*px)))+(((-0.1152)*x2908*x2910))+((x2907*x2908))+(((-0.1152)*x2909*x2912))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2920))+x2919+x2921))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan((x2921+x2920+(((-1.0)*x2919))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2923=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2923.valid){
continue;
}
CheckValue<IkReal> x2924=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2924.valid){
continue;
}
CheckValue<IkReal> x2925=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2925.valid){
continue;
}
CheckValue<IkReal> x2926=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2926.valid){
continue;
}
CheckValue<IkReal> x2927=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2927.valid){
continue;
}
if((((((0.0576)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.96)*r10*rxp2_1*sj5*(cj4*cj4)))+(((0.1152)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((0.96)*cj5*r11*rxp2_1*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-0.0576)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((0.96)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((0.0576)*(cj4*cj4)*(r10*r10)))+(((-0.96)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((0.1152)*cj5*r10*r11*sj5*(cj4*cj4)))+(((0.0576)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-0.96)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((-0.0576)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((0.96)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.0576)*(cj4*cj4)*(r00*r00)))+(((0.96)*cj4*r10*rxp1_1*sj4))+(((-0.96)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((0.96)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-0.96)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((0.96)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.96)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.96)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((0.96)*cj4*r00*rxp1_0*sj4))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))) < -0.00001)
continue;
CheckValue<IkReal> x2928=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2928.valid){
continue;
}
j0array[0]=((2.0)*(atan(((((-1.0)*cj5*rxp0_1*sj4*(x2923.value)))+((cj4*rxp2_1*(x2924.value)))+(((0.12)*cj4*r10*sj5*(x2925.value)))+((rxp1_1*sj4*sj5*(x2926.value)))+(((0.5)*(x2927.value)*(IKsqrt(((((0.0576)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.96)*r10*rxp2_1*sj5*(cj4*cj4)))+(((0.1152)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((0.96)*cj5*r11*rxp2_1*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-0.0576)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((0.96)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((0.0576)*(cj4*cj4)*(r10*r10)))+(((-0.96)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((0.1152)*cj5*r10*r11*sj5*(cj4*cj4)))+(((0.0576)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-0.96)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((-0.0576)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((0.96)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.0576)*(cj4*cj4)*(r00*r00)))+(((0.96)*cj4*r10*rxp1_1*sj4))+(((-0.96)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((0.96)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-0.96)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((0.96)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.96)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.96)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((0.96)*cj4*r00*rxp1_0*sj4))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))))))+(((0.12)*cj4*cj5*r11*(x2928.value)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
CheckValue<IkReal> x2929=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2929.valid){
continue;
}
CheckValue<IkReal> x2930=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2930.valid){
continue;
}
if((((((0.0576)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.96)*r10*rxp2_1*sj5*(cj4*cj4)))+(((0.1152)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((0.96)*cj5*r11*rxp2_1*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-0.0576)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((0.96)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((0.0576)*(cj4*cj4)*(r10*r10)))+(((-0.96)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((0.1152)*cj5*r10*r11*sj5*(cj4*cj4)))+(((0.0576)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-0.96)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((-0.0576)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((0.96)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.0576)*(cj4*cj4)*(r00*r00)))+(((0.96)*cj4*r10*rxp1_1*sj4))+(((-0.96)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((0.96)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-0.96)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((0.96)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.96)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.96)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((0.96)*cj4*r00*rxp1_0*sj4))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))) < -0.00001)
continue;
CheckValue<IkReal> x2931=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2931.valid){
continue;
}
CheckValue<IkReal> x2932=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2932.valid){
continue;
}
CheckValue<IkReal> x2933=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2933.valid){
continue;
}
CheckValue<IkReal> x2934=IKPowWithIntegerCheck((((rxp1_0*sj4*sj5))+(((-1.0)*cj5*rxp0_0*sj4))+(((0.12)*cj4*r00*sj5))+(((0.12)*cj4*cj5*r01))+((cj4*rxp2_0))),-1);
if(!x2934.valid){
continue;
}
j0array[1]=((2.0)*(atan(((((-1.0)*cj5*rxp0_1*sj4*(x2929.value)))+(((-0.5)*(x2930.value)*(IKsqrt(((((0.0576)*(cj4*cj4)*(cj5*cj5)*(r11*r11)))+(((0.96)*r10*rxp2_1*sj5*(cj4*cj4)))+(((0.1152)*cj5*r00*r01*sj5*(cj4*cj4)))+(((4.0)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((8.0)*cj4*rxp1_0*rxp2_0*sj4*sj5))+(((0.96)*cj5*r11*rxp2_1*(cj4*cj4)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-0.0576)*(cj4*cj4)*(cj5*cj5)*(r10*r10)))+(((4.0)*(cj4*cj4)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((4.0)*(rxp1_0*rxp1_0)))+(((0.96)*cj4*cj5*r11*rxp1_1*sj4*sj5))+(((0.0576)*(cj4*cj4)*(r10*r10)))+(((-0.96)*cj4*cj5*r00*rxp0_0*sj4*sj5))+(((0.1152)*cj5*r10*r11*sj5*(cj4*cj4)))+(((0.0576)*(cj4*cj4)*(cj5*cj5)*(r01*r01)))+(((4.0)*(cj4*cj4)*(rxp2_1*rxp2_1)))+(((8.0)*cj5*rxp0_0*rxp1_0*sj5*(cj4*cj4)))+(((8.0)*cj4*rxp1_1*rxp2_1*sj4*sj5))+(((-8.0)*cj4*cj5*rxp0_1*rxp2_1*sj4))+(((-8.0)*cj5*rxp0_1*rxp1_1*sj5))+(((-0.96)*cj4*r11*rxp0_1*sj4*(cj5*cj5)))+(((-0.0576)*(cj4*cj4)*(cj5*cj5)*(r00*r00)))+(((0.96)*cj5*r01*rxp2_0*(cj4*cj4)))+(((-4.0)*(cj5*cj5)*(rxp1_0*rxp1_0)))+(((-8.0)*cj4*cj5*rxp0_0*rxp2_0*sj4))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_1*rxp0_1)))+(((0.0576)*(cj4*cj4)*(r00*r00)))+(((0.96)*cj4*r10*rxp1_1*sj4))+(((-0.96)*cj4*r10*rxp1_1*sj4*(cj5*cj5)))+(((0.96)*cj4*cj5*r01*rxp1_0*sj4*sj5))+(((-4.0)*(cj4*cj4)*(cj5*cj5)*(rxp0_0*rxp0_0)))+(((-0.96)*cj4*cj5*r10*rxp0_1*sj4*sj5))+(((0.96)*r00*rxp2_0*sj5*(cj4*cj4)))+(((-8.0)*cj5*rxp0_0*rxp1_0*sj5))+(((-0.96)*cj4*r01*rxp0_0*sj4*(cj5*cj5)))+(((4.0)*(rxp1_1*rxp1_1)))+(((8.0)*cj5*rxp0_1*rxp1_1*sj5*(cj4*cj4)))+(((-0.96)*cj4*r00*rxp1_0*sj4*(cj5*cj5)))+(((-4.0)*(cj4*cj4)*(rxp1_0*rxp1_0)))+(((-4.0)*(cj5*cj5)*(rxp1_1*rxp1_1)))+(((-4.0)*(cj4*cj4)*(rxp1_1*rxp1_1)))+(((4.0)*(cj4*cj4)*(rxp2_0*rxp2_0)))+(((0.96)*cj4*r00*rxp1_0*sj4))+(((4.0)*(cj5*cj5)*(rxp0_0*rxp0_0))))))))+((cj4*rxp2_1*(x2931.value)))+(((0.12)*cj4*r10*sj5*(x2932.value)))+((rxp1_1*sj4*sj5*(x2933.value)))+(((0.12)*cj4*cj5*r11*(x2934.value)))))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2935=cj4*cj4;
IkReal x2936=cj5*cj5;
IkReal x2937=r11*r11;
IkReal x2938=r01*r01;
IkReal x2939=r10*r10;
IkReal x2940=r00*r00;
IkReal x2941=(sj4*sj5);
IkReal x2942=((8.0)*cj4);
IkReal x2943=(cj5*sj4);
IkReal x2944=((4.0)*x2935);
IkReal x2945=((1.0)*x2943);
IkReal x2946=(x2936*x2938);
IkReal x2947=(x2936*x2939);
IkReal x2948=(x2936*x2940);
IkReal x2949=(x2936*x2937);
IkReal x2950=((8.0)*cj5*r10*r11*sj5);
IkReal x2951=((8.0)*cj5*r00*r01*sj5);
CheckValue<IkReal> x2958=IKPowWithIntegerCheck((((r11*x2941))+(((-1.0)*r10*x2945))+((cj4*r12))),-1);
if(!x2958.valid){
continue;
}
IkReal x2952=x2958.value;
IkReal x2953=(cj4*r02*x2952);
CheckValue<IkReal> x2959=IKPowWithIntegerCheck((((r11*sj4*sj5))+(((-1.0)*r10*x2945))+((cj4*r12))),-1);
if(!x2959.valid){
continue;
}
IkReal x2954=(r01*x2941*(x2959.value));
CheckValue<IkReal> x2960=IKPowWithIntegerCheck((((r11*x2941))+((cj4*r12))+(((-1.0)*cj5*r10*sj4))),-1);
if(!x2960.valid){
continue;
}
IkReal x2955=(r00*x2945*(x2960.value));
IkReal x2956=(x2954+x2953);
if(((((r11*r12*x2941*x2942))+((r01*r02*x2941*x2942))+((x2944*(r02*r02)))+(((-1.0)*x2951))+(((-1.0)*x2950))+((x2944*(r12*r12)))+(((-1.0)*r00*r02*x2942*x2943))+((x2935*x2951))+((x2935*x2950))+((x2944*x2949))+((x2944*x2946))+(((4.0)*x2937))+(((4.0)*x2938))+(((4.0)*x2948))+(((4.0)*x2947))+(((-1.0)*x2944*x2947))+(((-1.0)*x2944*x2948))+(((-1.0)*x2938*x2944))+(((-4.0)*x2949))+(((-4.0)*x2946))+(((-1.0)*r10*r12*x2942*x2943))+(((-1.0)*x2937*x2944)))) < -0.00001)
continue;
IkReal x2957=((0.5)*x2952*(IKsqrt((((r11*r12*x2941*x2942))+((r01*r02*x2941*x2942))+((x2944*(r02*r02)))+(((-1.0)*x2951))+(((-1.0)*x2950))+((x2944*(r12*r12)))+(((-1.0)*r00*r02*x2942*x2943))+((x2935*x2951))+((x2935*x2950))+((x2944*x2949))+((x2944*x2946))+(((4.0)*x2937))+(((4.0)*x2938))+(((4.0)*x2948))+(((4.0)*x2947))+(((-1.0)*x2944*x2947))+(((-1.0)*x2944*x2948))+(((-1.0)*x2938*x2944))+(((-4.0)*x2949))+(((-4.0)*x2946))+(((-1.0)*r10*r12*x2942*x2943))+(((-1.0)*x2937*x2944))))));
j0array[0]=((2.0)*(atan(((((-1.0)*x2956))+x2955+x2957))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2955))+x2956+x2957))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x2961=cj5*cj5;
IkReal x2962=r11*r11;
IkReal x2963=r01*r01;
IkReal x2964=(cj5*r10);
IkReal x2965=((0.96)*py);
IkReal x2966=(r11*sj5);
IkReal x2967=(cj5*r00);
IkReal x2968=((0.96)*px);
IkReal x2969=(r01*sj5);
IkReal x2970=((0.0576)*x2961);
CheckValue<IkReal> x2977=IKPowWithIntegerCheck(((((-0.12)*x2966))+(((0.12)*x2964))+py),-1);
if(!x2977.valid){
continue;
}
IkReal x2971=x2977.value;
IkReal x2972=((0.12)*x2971);
IkReal x2973=(px*x2971);
IkReal x2974=(x2967*x2972);
IkReal x2975=(x2969*x2972);
if((((((-0.1152)*x2964*x2966))+(((-1.0)*x2963*x2970))+(((-0.1152)*x2967*x2969))+(((4.0)*(py*py)))+(((-1.0)*x2965*x2966))+(((-1.0)*x2962*x2970))+(((-1.0)*x2968*x2969))+(((4.0)*(px*px)))+(((0.0576)*x2963))+(((0.0576)*x2962))+((x2964*x2965))+((x2970*(r00*r00)))+((x2967*x2968))+((x2970*(r10*r10))))) < -0.00001)
continue;
IkReal x2976=((0.5)*x2971*(IKsqrt(((((-0.1152)*x2964*x2966))+(((-1.0)*x2963*x2970))+(((-0.1152)*x2967*x2969))+(((4.0)*(py*py)))+(((-1.0)*x2965*x2966))+(((-1.0)*x2962*x2970))+(((-1.0)*x2968*x2969))+(((4.0)*(px*px)))+(((0.0576)*x2963))+(((0.0576)*x2962))+((x2964*x2965))+((x2970*(r00*r00)))+((x2967*x2968))+((x2970*(r10*r10)))))));
j0array[0]=((-2.0)*(atan(((((1.0)*x2973))+(((-1.0)*x2975))+(((-1.0)*x2976))+x2974))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((-2.0)*(atan(((((-1.0)*x2975))+x2973+x2976+x2974))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

innerfn(solutions);
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x190=((1.0)*cj0);
IkReal x191=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)));
j3eval[0]=x191;
j3eval[1]=IKsign(x191);
j3eval[2]=((IKabs(((((-1.0)*cj5*r21*x190))+(((-1.0)*r20*sj5*x190)))))+(IKabs((((cj0*cj4*cj5*r20))+((cj0*r22*sj4))+(((-1.0)*cj4*r21*sj5*x190))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x192=((1.0)*sj5);
IkReal x193=(r20*sj0);
IkReal x194=((1.0)*r21*sj0);
IkReal x195=((((-1.0)*r11*sj4*x192))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)));
j3eval[0]=x195;
j3eval[1]=((IKabs(((((-1.0)*x192*x193))+(((-1.0)*cj5*x194)))))+(IKabs(((((-1.0)*cj4*r21*sj0*x192))+((cj4*cj5*x193))+((r22*sj0*sj4))))));
j3eval[2]=IKsign(x195);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x196=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x196;
j3eval[1]=IKsign(x196);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x197=((1.0)*cj5);
IkReal x198=((1.0)*sj5);
IkReal x199=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x197)));
j3eval[0]=x199;
j3eval[1]=((IKabs(((((-1.0)*cj4*r01*x198))+((r02*sj4))+((cj4*cj5*r00)))))+(IKabs(((((-1.0)*r00*x198))+(((-1.0)*r01*x197))))));
j3eval[2]=IKsign(x199);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x200=((1.0)*sj5);
IkReal x201=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x200)));
j3eval[0]=x201;
j3eval[1]=((IKabs(((((-1.0)*r20*x200))+(((-1.0)*cj5*r21)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x200))+((cj4*cj5*r20))))));
j3eval[2]=IKsign(x201);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x202=cj4*cj4;
IkReal x203=cj5*cj5;
IkReal x204=r10*r10;
IkReal x205=r11*r11;
IkReal x206=r12*r12;
IkReal x207=(r11*sj5);
IkReal x208=((1.0)*r10);
IkReal x209=(r12*sj4);
IkReal x210=((1.0)*x204);
IkReal x211=((2.0)*cj5*r10);
IkReal x212=(x203*x205);
IkReal x213=(((x202*x212))+(((-1.0)*x207*x211))+(((2.0)*cj4*x207*x209))+(((-1.0)*x212))+(((-1.0)*cj4*x209*x211))+((x202*x207*x211))+((x202*x206))+(((-1.0)*x202*x203*x210))+(((-1.0)*x202*x205))+((x203*x204))+(((-1.0)*x210))+(((-1.0)*x206)));
j3eval[0]=x213;
j3eval[1]=IKsign(x213);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x208)))))+(IKabs(((((-1.0)*cj4*cj5*x208))+((cj4*x207))+(((-1.0)*x209))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x214=cj4*cj4;
IkReal x215=cj5*cj5;
IkReal x216=r10*r10;
IkReal x217=r11*r11;
IkReal x218=r12*r12;
IkReal x219=(r11*sj5);
IkReal x220=((1.0)*cj5);
IkReal x221=(r12*sj4);
IkReal x222=((1.0)*x216);
IkReal x223=((2.0)*cj5*r10);
IkReal x224=(x215*x217);
CheckValue<IkReal> x225=IKPowWithIntegerCheck(IKsign((((x214*x218))+((x214*x219*x223))+((x214*x224))+((x215*x216))+(((2.0)*cj4*x219*x221))+(((-1.0)*x214*x217))+(((-1.0)*x219*x223))+(((-1.0)*cj4*x221*x223))+(((-1.0)*x218))+(((-1.0)*x214*x215*x222))+(((-1.0)*x222))+(((-1.0)*x224)))),-1);
if(!x225.valid){
continue;
}
CheckValue<IkReal> x226 = IKatan2WithCheck(IkReal((((cj4*x219))+(((-1.0)*cj4*r10*x220))+(((-1.0)*x221)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x226.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x225.value)))+(x226.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x227=IKsin(j3);
IkReal x228=IKcos(j3);
IkReal x229=(r10*sj5);
IkReal x230=(cj4*sj5);
IkReal x231=(cj5*r11);
IkReal x232=(cj4*cj5);
IkReal x233=(r12*sj4);
IkReal x234=((1.0)*x228);
IkReal x235=((1.0)*x227);
evalcond[0]=(((x227*x229))+(((-1.0)*x233*x234))+((r11*x228*x230))+((x227*x231))+(((-1.0)*r10*x232*x234)));
evalcond[1]=(((r21*x227*x230))+(((-1.0)*r20*sj5*x234))+(((-1.0)*cj5*r21*x234))+(((-1.0)*r22*sj4*x235))+(((-1.0)*r20*x232*x235)));
evalcond[2]=((((-1.0)*cj5*r01*x234))+(((-1.0)*r00*sj5*x234))+(((-1.0)*r02*sj4*x235))+((r01*x227*x230))+(((-1.0)*r00*x232*x235)));
evalcond[3]=((1.0)+(((-1.0)*x233*x235))+(((-1.0)*x231*x234))+(((-1.0)*r10*x232*x235))+(((-1.0)*x229*x234))+((r11*x227*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x236=((0.33731553056922)*cj5);
IkReal x237=(r01*sj5);
IkReal x238=(cj5*sj4);
IkReal x239=((1.0)*cj4);
IkReal x240=((1.0)*sj4);
IkReal x241=(r21*sj5);
if( IKabs(((((-1.0)*x237*x240))+(((-1.0)*r02*x239))+(((2.8109627547435)*px))+((r00*x236))+((r00*x238))+(((-0.33731553056922)*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x239))+(((-0.33731553056922)*x241))+(((2.8109627547435)*pz))+(((-1.0)*x240*x241))+((r20*x238))+((r20*x236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x237*x240))+(((-1.0)*r02*x239))+(((2.8109627547435)*px))+((r00*x236))+((r00*x238))+(((-0.33731553056922)*x237))))+IKsqr(((((-1.0)*r22*x239))+(((-0.33731553056922)*x241))+(((2.8109627547435)*pz))+(((-1.0)*x240*x241))+((r20*x238))+((r20*x236))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*x237*x240))+(((-1.0)*r02*x239))+(((2.8109627547435)*px))+((r00*x236))+((r00*x238))+(((-0.33731553056922)*x237))), ((((-1.0)*r22*x239))+(((-0.33731553056922)*x241))+(((2.8109627547435)*pz))+(((-1.0)*x240*x241))+((r20*x238))+((r20*x236))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x242=((1.0)*px);
IkReal x243=((0.35575)*r21);
IkReal x244=(cj5*sj3);
IkReal x245=(sj4*sj5);
IkReal x246=((0.35575)*cj4);
IkReal x247=((0.35575)*r01);
IkReal x248=((0.12)*cj5);
IkReal x249=((0.12)*sj5);
IkReal x250=(cj5*r00);
IkReal x251=((0.35575)*sj4);
IkReal x252=(cj5*r20);
IkReal x253=(r20*x248);
IkReal x254=(r21*x249);
IkReal x255=((0.35575)*(IKcos(j1)));
IkReal x256=((0.35575)*(IKsin(j1)));
IkReal x257=(r01*x249);
IkReal x258=(r00*x248);
IkReal x259=(cj3*cj4*sj5);
IkReal x260=(cj3*x251);
IkReal x261=((0.35575)*sj3*sj5);
IkReal x262=(x258+x242);
IkReal x263=(x254+x255);
IkReal x264=(x256+x257);
evalcond[0]=((((-1.0)*x251*x252))+((r22*x246))+(((-1.0)*pz))+x263+((x243*x245))+(((-1.0)*x253)));
evalcond[1]=((((-1.0)*x250*x251))+((r02*x246))+x264+((x245*x247))+(((-1.0)*x262)));
evalcond[2]=(((x244*x247))+x253+(((-1.0)*cj3*x246*x250))+((cj3*r01*sj5*x246))+pz+(((-1.0)*r02*x260))+((r00*x261))+(((-1.0)*x263)));
evalcond[3]=(((x243*x259))+x264+(((-1.0)*cj3*x246*x252))+(((-1.0)*r22*x260))+(((-1.0)*x262))+((x243*x244))+((r20*x261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x265=((1.0)*cj1);
IkReal x266=(cj4*r22);
IkReal x267=(cj5*sj4);
IkReal x268=(sj4*sj5);
IkReal x269=((1.0)*sj1);
IkReal x270=(cj4*r02);
if( IKabs(((((-1.0)*x269*x270))+((cj1*r20*x267))+(((-1.0)*r21*x265*x268))+(((-1.0)*r01*x268*x269))+((r00*sj1*x267))+(((-1.0)*x265*x266)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x270))+(((-1.0)*r00*x265*x267))+((r20*sj1*x267))+((cj1*r01*x268))+(((-1.0)*x266*x269))+(((-1.0)*r21*x268*x269)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x269*x270))+((cj1*r20*x267))+(((-1.0)*r21*x265*x268))+(((-1.0)*r01*x268*x269))+((r00*sj1*x267))+(((-1.0)*x265*x266))))+IKsqr((((cj1*x270))+(((-1.0)*r00*x265*x267))+((r20*sj1*x267))+((cj1*r01*x268))+(((-1.0)*x266*x269))+(((-1.0)*r21*x268*x269))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x269*x270))+((cj1*r20*x267))+(((-1.0)*r21*x265*x268))+(((-1.0)*r01*x268*x269))+((r00*sj1*x267))+(((-1.0)*x265*x266))), (((cj1*x270))+(((-1.0)*r00*x265*x267))+((r20*sj1*x267))+((cj1*r01*x268))+(((-1.0)*x266*x269))+(((-1.0)*r21*x268*x269))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x271=IKcos(j2);
IkReal x272=IKsin(j2);
IkReal x273=((1.0)*cj3);
IkReal x274=(cj5*r00);
IkReal x275=((0.35575)*sj1);
IkReal x276=(cj5*sj3);
IkReal x277=((1.0)*cj4);
IkReal x278=(cj5*r20);
IkReal x279=((1.0)*sj1);
IkReal x280=(sj3*sj5);
IkReal x281=((0.12)*sj5);
IkReal x282=((0.35575)*cj1);
IkReal x283=(cj1*x271);
IkReal x284=(cj3*cj4*sj5);
IkReal x285=((1.0)*sj4*sj5);
IkReal x286=(x271*x279);
IkReal x287=((1.0)*cj1*x272);
IkReal x288=(x287+x286);
evalcond[0]=((((-1.0)*x272*x279))+x283+(((-1.0)*r01*x285))+(((-1.0)*r02*x277))+((sj4*x274)));
evalcond[1]=((((-1.0)*r21*x285))+(((-1.0)*r22*x277))+(((-1.0)*x288))+((sj4*x278)));
evalcond[2]=((((-1.0)*x271*x275))+((r21*x281))+(((-1.0)*pz))+x282+(((-0.12)*x278))+(((-1.0)*x272*x282)));
evalcond[3]=((((-1.0)*x272*x275))+((r01*x281))+((x271*x282))+(((-1.0)*px))+x275+(((-0.12)*x274)));
evalcond[4]=((((-1.0)*r22*sj4*x273))+((r21*x284))+((r21*x276))+(((-1.0)*x283))+(((-1.0)*cj4*x273*x278))+((sj1*x272))+((r20*x280)));
evalcond[5]=(((r01*x284))+((r00*x280))+(((-1.0)*r02*sj4*x273))+((r01*x276))+(((-1.0)*x288))+(((-1.0)*cj4*x273*x274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x289=((1.0)*sj5);
CheckValue<IkReal> x290 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x289))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x290.valid){
continue;
}
CheckValue<IkReal> x291=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj4*x289))+(((-1.0)*cj4*r02))+((cj5*r00*sj4)))),-1);
if(!x291.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x290.value)+(((1.5707963267949)*(x291.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x292=IKsin(j3);
IkReal x293=IKcos(j3);
IkReal x294=(r10*sj5);
IkReal x295=(cj4*sj5);
IkReal x296=(cj5*r11);
IkReal x297=(cj4*cj5);
IkReal x298=(r12*sj4);
IkReal x299=((1.0)*x293);
IkReal x300=((1.0)*x292);
evalcond[0]=((((-1.0)*x298*x299))+((r11*x293*x295))+(((-1.0)*r10*x297*x299))+((x292*x296))+((x292*x294)));
evalcond[1]=((((-1.0)*r22*sj4*x300))+(((-1.0)*cj5*r21*x299))+((r21*x292*x295))+(((-1.0)*r20*sj5*x299))+(((-1.0)*r20*x297*x300)));
evalcond[2]=((((-1.0)*r00*x297*x300))+(((-1.0)*cj5*r01*x299))+((r01*x292*x295))+(((-1.0)*r02*sj4*x300))+(((-1.0)*r00*sj5*x299)));
evalcond[3]=((1.0)+(((-1.0)*x298*x300))+((r11*x292*x295))+(((-1.0)*x296*x299))+(((-1.0)*r10*x297*x300))+(((-1.0)*x294*x299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x301=((0.33731553056922)*cj5);
IkReal x302=(r01*sj5);
IkReal x303=(cj5*sj4);
IkReal x304=((1.0)*cj4);
IkReal x305=((1.0)*sj4);
IkReal x306=(r21*sj5);
if( IKabs(((((-0.33731553056922)*x302))+(((-1.0)*x302*x305))+(((2.8109627547435)*px))+(((-1.0)*r02*x304))+((r00*x303))+((r00*x301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x304))+(((-0.33731553056922)*x306))+(((2.8109627547435)*pz))+((r20*x303))+((r20*x301))+(((-1.0)*x305*x306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.33731553056922)*x302))+(((-1.0)*x302*x305))+(((2.8109627547435)*px))+(((-1.0)*r02*x304))+((r00*x303))+((r00*x301))))+IKsqr(((((-1.0)*r22*x304))+(((-0.33731553056922)*x306))+(((2.8109627547435)*pz))+((r20*x303))+((r20*x301))+(((-1.0)*x305*x306))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-0.33731553056922)*x302))+(((-1.0)*x302*x305))+(((2.8109627547435)*px))+(((-1.0)*r02*x304))+((r00*x303))+((r00*x301))), ((((-1.0)*r22*x304))+(((-0.33731553056922)*x306))+(((2.8109627547435)*pz))+((r20*x303))+((r20*x301))+(((-1.0)*x305*x306))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x307=((1.0)*px);
IkReal x308=((0.35575)*r21);
IkReal x309=(cj5*sj3);
IkReal x310=(sj4*sj5);
IkReal x311=((0.35575)*cj4);
IkReal x312=((0.35575)*r01);
IkReal x313=((0.12)*cj5);
IkReal x314=((0.12)*sj5);
IkReal x315=(cj5*r00);
IkReal x316=((0.35575)*sj4);
IkReal x317=(cj5*r20);
IkReal x318=(r20*x313);
IkReal x319=(r21*x314);
IkReal x320=((0.35575)*(IKcos(j1)));
IkReal x321=((0.35575)*(IKsin(j1)));
IkReal x322=(r01*x314);
IkReal x323=(r00*x313);
IkReal x324=(cj3*cj4*sj5);
IkReal x325=(cj3*x316);
IkReal x326=((0.35575)*sj3*sj5);
IkReal x327=(x307+x323);
IkReal x328=(x320+x319);
IkReal x329=(x321+x322);
evalcond[0]=(((x308*x310))+x328+(((-1.0)*pz))+(((-1.0)*x318))+((r22*x311))+(((-1.0)*x316*x317)));
evalcond[1]=(((x310*x312))+((r02*x311))+(((-1.0)*x327))+x329+(((-1.0)*x315*x316)));
evalcond[2]=(((r00*x326))+(((-1.0)*x328))+(((-1.0)*cj3*x311*x315))+x318+((x309*x312))+pz+((cj3*r01*sj5*x311))+(((-1.0)*r02*x325)));
evalcond[3]=(((r20*x326))+((x308*x324))+(((-1.0)*r22*x325))+(((-1.0)*x327))+(((-1.0)*cj3*x311*x317))+x329+((x308*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x330=((1.0)*cj1);
IkReal x331=(cj4*r22);
IkReal x332=(cj5*sj4);
IkReal x333=(sj4*sj5);
IkReal x334=((1.0)*sj1);
IkReal x335=(cj4*r02);
if( IKabs(((((-1.0)*r01*x333*x334))+((cj1*r20*x332))+(((-1.0)*x330*x331))+(((-1.0)*r21*x330*x333))+(((-1.0)*x334*x335))+((r00*sj1*x332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x332))+(((-1.0)*r21*x333*x334))+((cj1*x335))+(((-1.0)*x331*x334))+((cj1*r01*x333))+(((-1.0)*r00*x330*x332)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x333*x334))+((cj1*r20*x332))+(((-1.0)*x330*x331))+(((-1.0)*r21*x330*x333))+(((-1.0)*x334*x335))+((r00*sj1*x332))))+IKsqr((((r20*sj1*x332))+(((-1.0)*r21*x333*x334))+((cj1*x335))+(((-1.0)*x331*x334))+((cj1*r01*x333))+(((-1.0)*r00*x330*x332))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x333*x334))+((cj1*r20*x332))+(((-1.0)*x330*x331))+(((-1.0)*r21*x330*x333))+(((-1.0)*x334*x335))+((r00*sj1*x332))), (((r20*sj1*x332))+(((-1.0)*r21*x333*x334))+((cj1*x335))+(((-1.0)*x331*x334))+((cj1*r01*x333))+(((-1.0)*r00*x330*x332))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x336=IKcos(j2);
IkReal x337=IKsin(j2);
IkReal x338=((1.0)*cj3);
IkReal x339=(cj5*r00);
IkReal x340=((0.35575)*sj1);
IkReal x341=(cj5*sj3);
IkReal x342=((1.0)*cj4);
IkReal x343=(cj5*r20);
IkReal x344=((1.0)*sj1);
IkReal x345=(sj3*sj5);
IkReal x346=((0.12)*sj5);
IkReal x347=((0.35575)*cj1);
IkReal x348=(cj1*x336);
IkReal x349=(cj3*cj4*sj5);
IkReal x350=((1.0)*sj4*sj5);
IkReal x351=(x336*x344);
IkReal x352=((1.0)*cj1*x337);
IkReal x353=(x351+x352);
evalcond[0]=((((-1.0)*r02*x342))+(((-1.0)*x337*x344))+x348+((sj4*x339))+(((-1.0)*r01*x350)));
evalcond[1]=((((-1.0)*r22*x342))+(((-1.0)*x353))+((sj4*x343))+(((-1.0)*r21*x350)));
evalcond[2]=(((r21*x346))+(((-1.0)*x336*x340))+(((-1.0)*x337*x347))+x347+(((-1.0)*pz))+(((-0.12)*x343)));
evalcond[3]=(((r01*x346))+((x336*x347))+(((-1.0)*x337*x340))+(((-0.12)*x339))+x340+(((-1.0)*px)));
evalcond[4]=(((r21*x341))+((r21*x349))+(((-1.0)*r22*sj4*x338))+(((-1.0)*cj4*x338*x343))+((r20*x345))+((sj1*x337))+(((-1.0)*x348)));
evalcond[5]=(((r01*x349))+((r01*x341))+((r00*x345))+(((-1.0)*x353))+(((-1.0)*r02*sj4*x338))+(((-1.0)*cj4*x338*x339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x354=((1.0)*r01);
CheckValue<IkReal> x355=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x355.valid){
continue;
}
CheckValue<IkReal> x356 = IKatan2WithCheck(IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*x354)))),IkReal(((((-1.0)*cj4*sj5*x354))+((r02*sj4))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x356.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x355.value)))+(x356.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x357=IKsin(j3);
IkReal x358=IKcos(j3);
IkReal x359=(r10*sj5);
IkReal x360=(cj4*sj5);
IkReal x361=(cj5*r11);
IkReal x362=(cj4*cj5);
IkReal x363=(r12*sj4);
IkReal x364=((1.0)*x358);
IkReal x365=((1.0)*x357);
evalcond[0]=((((-1.0)*x363*x364))+(((-1.0)*r10*x362*x364))+((r11*x358*x360))+((x357*x361))+((x357*x359)));
evalcond[1]=(((r21*x357*x360))+(((-1.0)*r20*x362*x365))+(((-1.0)*r22*sj4*x365))+(((-1.0)*cj5*r21*x364))+(((-1.0)*r20*sj5*x364)));
evalcond[2]=((((-1.0)*r00*sj5*x364))+(((-1.0)*r00*x362*x365))+(((-1.0)*r02*sj4*x365))+(((-1.0)*cj5*r01*x364))+((r01*x357*x360)));
evalcond[3]=((1.0)+(((-1.0)*x363*x365))+(((-1.0)*x361*x364))+((r11*x357*x360))+(((-1.0)*r10*x362*x365))+(((-1.0)*x359*x364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x366=((0.33731553056922)*cj5);
IkReal x367=(r01*sj5);
IkReal x368=(cj5*sj4);
IkReal x369=((1.0)*cj4);
IkReal x370=((1.0)*sj4);
IkReal x371=(r21*sj5);
if( IKabs(((((-1.0)*r02*x369))+((r00*x368))+((r00*x366))+(((2.8109627547435)*px))+(((-1.0)*x367*x370))+(((-0.33731553056922)*x367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x366))+((r20*x368))+(((-1.0)*x370*x371))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x371))+(((-1.0)*r22*x369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x369))+((r00*x368))+((r00*x366))+(((2.8109627547435)*px))+(((-1.0)*x367*x370))+(((-0.33731553056922)*x367))))+IKsqr((((r20*x366))+((r20*x368))+(((-1.0)*x370*x371))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x371))+(((-1.0)*r22*x369))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x369))+((r00*x368))+((r00*x366))+(((2.8109627547435)*px))+(((-1.0)*x367*x370))+(((-0.33731553056922)*x367))), (((r20*x366))+((r20*x368))+(((-1.0)*x370*x371))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x371))+(((-1.0)*r22*x369))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x372=((1.0)*px);
IkReal x373=((0.35575)*r21);
IkReal x374=(cj5*sj3);
IkReal x375=(sj4*sj5);
IkReal x376=((0.35575)*cj4);
IkReal x377=((0.35575)*r01);
IkReal x378=((0.12)*cj5);
IkReal x379=((0.12)*sj5);
IkReal x380=(cj5*r00);
IkReal x381=((0.35575)*sj4);
IkReal x382=(cj5*r20);
IkReal x383=(r20*x378);
IkReal x384=(r21*x379);
IkReal x385=((0.35575)*(IKcos(j1)));
IkReal x386=((0.35575)*(IKsin(j1)));
IkReal x387=(r01*x379);
IkReal x388=(r00*x378);
IkReal x389=(cj3*cj4*sj5);
IkReal x390=(cj3*x381);
IkReal x391=((0.35575)*sj3*sj5);
IkReal x392=(x388+x372);
IkReal x393=(x384+x385);
IkReal x394=(x386+x387);
evalcond[0]=((((-1.0)*x381*x382))+x393+(((-1.0)*pz))+(((-1.0)*x383))+((r22*x376))+((x373*x375)));
evalcond[1]=(((r02*x376))+(((-1.0)*x392))+((x375*x377))+(((-1.0)*x380*x381))+x394);
evalcond[2]=((((-1.0)*x393))+((cj3*r01*sj5*x376))+((r00*x391))+(((-1.0)*r02*x390))+x383+pz+(((-1.0)*cj3*x376*x380))+((x374*x377)));
evalcond[3]=(((r20*x391))+(((-1.0)*x392))+((x373*x389))+x394+(((-1.0)*cj3*x376*x382))+((x373*x374))+(((-1.0)*r22*x390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x395=((1.0)*cj1);
IkReal x396=(cj4*r22);
IkReal x397=(cj5*sj4);
IkReal x398=(sj4*sj5);
IkReal x399=((1.0)*sj1);
IkReal x400=(cj4*r02);
if( IKabs(((((-1.0)*x395*x396))+(((-1.0)*x399*x400))+((cj1*r20*x397))+((r00*sj1*x397))+(((-1.0)*r01*x398*x399))+(((-1.0)*r21*x395*x398)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x397))+(((-1.0)*x396*x399))+((cj1*r01*x398))+((cj1*x400))+(((-1.0)*r21*x398*x399))+(((-1.0)*r00*x395*x397)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x395*x396))+(((-1.0)*x399*x400))+((cj1*r20*x397))+((r00*sj1*x397))+(((-1.0)*r01*x398*x399))+(((-1.0)*r21*x395*x398))))+IKsqr((((r20*sj1*x397))+(((-1.0)*x396*x399))+((cj1*r01*x398))+((cj1*x400))+(((-1.0)*r21*x398*x399))+(((-1.0)*r00*x395*x397))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x395*x396))+(((-1.0)*x399*x400))+((cj1*r20*x397))+((r00*sj1*x397))+(((-1.0)*r01*x398*x399))+(((-1.0)*r21*x395*x398))), (((r20*sj1*x397))+(((-1.0)*x396*x399))+((cj1*r01*x398))+((cj1*x400))+(((-1.0)*r21*x398*x399))+(((-1.0)*r00*x395*x397))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x401=IKcos(j2);
IkReal x402=IKsin(j2);
IkReal x403=((1.0)*cj3);
IkReal x404=(cj5*r00);
IkReal x405=((0.35575)*sj1);
IkReal x406=(cj5*sj3);
IkReal x407=((1.0)*cj4);
IkReal x408=(cj5*r20);
IkReal x409=((1.0)*sj1);
IkReal x410=(sj3*sj5);
IkReal x411=((0.12)*sj5);
IkReal x412=((0.35575)*cj1);
IkReal x413=(cj1*x401);
IkReal x414=(cj3*cj4*sj5);
IkReal x415=((1.0)*sj4*sj5);
IkReal x416=(x401*x409);
IkReal x417=((1.0)*cj1*x402);
IkReal x418=(x416+x417);
evalcond[0]=((((-1.0)*r02*x407))+(((-1.0)*x402*x409))+x413+(((-1.0)*r01*x415))+((sj4*x404)));
evalcond[1]=((((-1.0)*r21*x415))+((sj4*x408))+(((-1.0)*x418))+(((-1.0)*r22*x407)));
evalcond[2]=((((-1.0)*x402*x412))+(((-1.0)*x401*x405))+(((-1.0)*pz))+((r21*x411))+x412+(((-0.12)*x408)));
evalcond[3]=((((-1.0)*x402*x405))+((r01*x411))+(((-1.0)*px))+x405+((x401*x412))+(((-0.12)*x404)));
evalcond[4]=(((sj1*x402))+(((-1.0)*cj4*x403*x408))+(((-1.0)*r22*sj4*x403))+((r21*x414))+((r21*x406))+((r20*x410))+(((-1.0)*x413)));
evalcond[5]=((((-1.0)*r02*sj4*x403))+(((-1.0)*cj4*x403*x404))+((r01*x414))+((r01*x406))+((r00*x410))+(((-1.0)*x418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x419=((1.0)*sj5);
IkReal x420=((1.0)*cj5);
IkReal x421=((((-1.0)*r00*sj4*x420))+((r01*sj4*sj5))+((cj4*r02)));
j3eval[0]=x421;
j3eval[1]=IKsign(x421);
j3eval[2]=((IKabs(((((-1.0)*r20*x419))+(((-1.0)*r21*x420)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x419))+((cj4*cj5*r20))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x422=((1.0)*r01);
IkReal x423=((1.0)*sj5);
IkReal x424=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x423)));
j3eval[0]=x424;
j3eval[1]=((IKabs(((((-1.0)*r00*x423))+(((-1.0)*cj5*x422)))))+(IKabs((((r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*sj5*x422))))));
j3eval[2]=IKsign(x424);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x425=cj4*cj4;
IkReal x426=r10*r10;
IkReal x427=cj5*cj5;
IkReal x428=r11*r11;
IkReal x429=r12*r12;
IkReal x430=(r11*sj5);
IkReal x431=((1.0)*r10);
IkReal x432=(r12*sj4);
IkReal x433=((1.0)*x425);
IkReal x434=((2.0)*cj5*r10);
IkReal x435=(x427*x428);
IkReal x436=(x426*x427);
IkReal x437=(((x425*x428))+(((-1.0)*x433*x435))+(((-1.0)*x436))+((x425*x436))+(((-1.0)*x429*x433))+(((-2.0)*cj4*x430*x432))+(((-1.0)*x425*x430*x434))+((cj4*x432*x434))+x429+x426+x435+((x430*x434)));
j3eval[0]=x437;
j3eval[1]=IKsign(x437);
j3eval[2]=((IKabs(((((-1.0)*x432))+((cj4*x430))+(((-1.0)*cj4*cj5*x431)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x431))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x438=cj4*cj4;
IkReal x439=r10*r10;
IkReal x440=cj5*cj5;
IkReal x441=r11*r11;
IkReal x442=r12*r12;
IkReal x443=(r11*sj5);
IkReal x444=((1.0)*cj5);
IkReal x445=(r12*sj4);
IkReal x446=((1.0)*x438);
IkReal x447=((2.0)*cj5*r10);
IkReal x448=(x440*x441);
IkReal x449=(x439*x440);
CheckValue<IkReal> x450=IKPowWithIntegerCheck(IKsign(((((-1.0)*x449))+(((-2.0)*cj4*x443*x445))+x439+x448+x442+((cj4*x445*x447))+((x438*x441))+((x438*x449))+((x443*x447))+(((-1.0)*x438*x443*x447))+(((-1.0)*x446*x448))+(((-1.0)*x442*x446)))),-1);
if(!x450.valid){
continue;
}
CheckValue<IkReal> x451 = IKatan2WithCheck(IkReal(((((-1.0)*x445))+((cj4*x443))+(((-1.0)*cj4*r10*x444)))),IkReal(((((-1.0)*r11*x444))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x451.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x450.value)))+(x451.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x452=IKsin(j3);
IkReal x453=IKcos(j3);
IkReal x454=(r10*sj5);
IkReal x455=(cj4*sj5);
IkReal x456=(cj5*r11);
IkReal x457=(cj4*cj5);
IkReal x458=(r12*sj4);
IkReal x459=((1.0)*x453);
IkReal x460=((1.0)*x452);
evalcond[0]=((((-1.0)*r10*x457*x459))+((x452*x454))+((x452*x456))+((r11*x453*x455))+(((-1.0)*x458*x459)));
evalcond[1]=((((-1.0)*r20*x457*x460))+(((-1.0)*cj5*r21*x459))+(((-1.0)*r20*sj5*x459))+((r21*x452*x455))+(((-1.0)*r22*sj4*x460)));
evalcond[2]=((((-1.0)*r00*sj5*x459))+(((-1.0)*r02*sj4*x460))+(((-1.0)*cj5*r01*x459))+((r01*x452*x455))+(((-1.0)*r00*x457*x460)));
evalcond[3]=((-1.0)+((r11*x452*x455))+(((-1.0)*r10*x457*x460))+(((-1.0)*x456*x459))+(((-1.0)*x454*x459))+(((-1.0)*x458*x460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x461=((0.33731553056922)*cj5);
IkReal x462=(r01*sj5);
IkReal x463=((1.0)*sj4);
IkReal x464=(r21*sj5);
if( IKabs(((((-1.0)*r00*x461))+(((-1.0)*cj5*r00*x463))+(((0.33731553056922)*x462))+((sj4*x462))+(((-2.8109627547435)*px))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x463*x464))+((cj5*r20*sj4))+((r20*x461))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x464))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x461))+(((-1.0)*cj5*r00*x463))+(((0.33731553056922)*x462))+((sj4*x462))+(((-2.8109627547435)*px))+((cj4*r02))))+IKsqr(((((-1.0)*x463*x464))+((cj5*r20*sj4))+((r20*x461))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x464))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x461))+(((-1.0)*cj5*r00*x463))+(((0.33731553056922)*x462))+((sj4*x462))+(((-2.8109627547435)*px))+((cj4*r02))), ((((-1.0)*x463*x464))+((cj5*r20*sj4))+((r20*x461))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x464))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x465=((1.0)*pz);
IkReal x466=((0.35575)*r21);
IkReal x467=(cj5*sj3);
IkReal x468=((0.35575)*r22);
IkReal x469=(cj3*sj4);
IkReal x470=(sj4*sj5);
IkReal x471=((0.35575)*r02);
IkReal x472=((0.35575)*r01);
IkReal x473=((0.12)*cj5);
IkReal x474=((0.12)*sj5);
IkReal x475=(cj3*cj4);
IkReal x476=(r01*x474);
IkReal x477=((0.35575)*(IKsin(j1)));
IkReal x478=(r00*x473);
IkReal x479=(r21*x474);
IkReal x480=((0.35575)*(IKcos(j1)));
IkReal x481=(r20*x473);
IkReal x482=(sj5*x475);
IkReal x483=((0.35575)*sj3*sj5);
IkReal x484=((0.35575)*cj5*r00);
IkReal x485=((0.35575)*cj5*r20);
IkReal x486=(x481+x465);
IkReal x487=(x480+x479);
IkReal x488=(x477+x478);
evalcond[0]=((((-1.0)*cj4*x471))+((sj4*x484))+(((-1.0)*x476))+x488+px+(((-1.0)*x470*x472)));
evalcond[1]=(((cj4*x468))+(((-1.0)*x486))+((x466*x470))+x487+(((-1.0)*sj4*x485)));
evalcond[2]=((((-1.0)*x466*x467))+((x468*x469))+(((-1.0)*x488))+((x475*x485))+(((-1.0)*x466*x482))+(((-1.0)*px))+x476+(((-1.0)*r20*x483)));
evalcond[3]=((((-1.0)*x475*x484))+(((-1.0)*x486))+(((-1.0)*x469*x471))+((x467*x472))+x487+((r00*x483))+((x472*x482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x489=(sj1*sj4);
IkReal x490=(r01*sj5);
IkReal x491=((1.0)*cj1);
IkReal x492=(cj4*r22);
IkReal x493=(cj4*r02);
IkReal x494=(cj5*r20);
IkReal x495=(cj1*sj4);
IkReal x496=(cj5*r00);
IkReal x497=(r21*sj5);
if( IKabs(((((-1.0)*x491*x492))+((x489*x490))+(((-1.0)*x489*x496))+(((-1.0)*sj4*x491*x497))+((x494*x495))+((sj1*x493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x495*x496))+(((-1.0)*sj4*x490*x491))+(((-1.0)*x491*x493))+((x489*x494))+(((-1.0)*x489*x497))+(((-1.0)*sj1*x492)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x491*x492))+((x489*x490))+(((-1.0)*x489*x496))+(((-1.0)*sj4*x491*x497))+((x494*x495))+((sj1*x493))))+IKsqr((((x495*x496))+(((-1.0)*sj4*x490*x491))+(((-1.0)*x491*x493))+((x489*x494))+(((-1.0)*x489*x497))+(((-1.0)*sj1*x492))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x491*x492))+((x489*x490))+(((-1.0)*x489*x496))+(((-1.0)*sj4*x491*x497))+((x494*x495))+((sj1*x493))), (((x495*x496))+(((-1.0)*sj4*x490*x491))+(((-1.0)*x491*x493))+((x489*x494))+(((-1.0)*x489*x497))+(((-1.0)*sj1*x492))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x498=IKcos(j2);
IkReal x499=IKsin(j2);
IkReal x500=(cj3*cj4);
IkReal x501=(r21*sj5);
IkReal x502=(cj5*r00);
IkReal x503=((0.35575)*sj1);
IkReal x504=(r01*sj5);
IkReal x505=((1.0)*sj4);
IkReal x506=(cj5*sj3);
IkReal x507=((1.0)*cj4);
IkReal x508=(cj5*r20);
IkReal x509=(sj3*sj5);
IkReal x510=(sj1*x499);
IkReal x511=(cj1*x499);
IkReal x512=(cj1*x498);
IkReal x513=(sj1*x498);
IkReal x514=((1.0)*x512);
evalcond[0]=(x510+(((-1.0)*x504*x505))+((sj4*x502))+(((-1.0)*x514))+(((-1.0)*r02*x507)));
evalcond[1]=((((-1.0)*x511))+(((-1.0)*x513))+(((-1.0)*x501*x505))+(((-1.0)*r22*x507))+((sj4*x508)));
evalcond[2]=((((0.12)*x501))+(((-0.35575)*x511))+(((-1.0)*pz))+(((0.35575)*cj1))+(((-1.0)*x498*x503))+(((-0.12)*x508)));
evalcond[3]=((((0.12)*x504))+(((-0.35575)*x512))+(((-1.0)*x503))+(((-1.0)*px))+((x499*x503))+(((-0.12)*x502)));
evalcond[4]=(((x500*x504))+(((-1.0)*cj3*r02*x505))+((r01*x506))+((r00*x509))+(((-1.0)*x500*x502))+x513+x511);
evalcond[5]=(((r20*x509))+((x500*x501))+((r21*x506))+(((-1.0)*cj3*r22*x505))+(((-1.0)*x500*x508))+x510+(((-1.0)*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x515=((1.0)*r01);
IkReal x516=((1.0)*sj5);
CheckValue<IkReal> x517 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x516))+(((-1.0)*cj5*x515)))),IkReal(((((-1.0)*cj4*sj5*x515))+((r02*sj4))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x517.valid){
continue;
}
CheckValue<IkReal> x518=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x516))+(((-1.0)*cj4*r22)))),-1);
if(!x518.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x517.value)+(((1.5707963267949)*(x518.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x519=IKsin(j3);
IkReal x520=IKcos(j3);
IkReal x521=(r10*sj5);
IkReal x522=(cj4*sj5);
IkReal x523=(cj5*r11);
IkReal x524=(cj4*cj5);
IkReal x525=(r12*sj4);
IkReal x526=((1.0)*x520);
IkReal x527=((1.0)*x519);
evalcond[0]=(((r11*x520*x522))+((x519*x523))+((x519*x521))+(((-1.0)*x525*x526))+(((-1.0)*r10*x524*x526)));
evalcond[1]=((((-1.0)*r20*x524*x527))+(((-1.0)*r20*sj5*x526))+((r21*x519*x522))+(((-1.0)*r22*sj4*x527))+(((-1.0)*cj5*r21*x526)));
evalcond[2]=(((r01*x519*x522))+(((-1.0)*cj5*r01*x526))+(((-1.0)*r00*sj5*x526))+(((-1.0)*r02*sj4*x527))+(((-1.0)*r00*x524*x527)));
evalcond[3]=((-1.0)+(((-1.0)*x525*x527))+(((-1.0)*x523*x526))+(((-1.0)*x521*x526))+((r11*x519*x522))+(((-1.0)*r10*x524*x527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x528=((0.33731553056922)*cj5);
IkReal x529=(r01*sj5);
IkReal x530=((1.0)*sj4);
IkReal x531=(r21*sj5);
if( IKabs(((((0.33731553056922)*x529))+(((-1.0)*cj5*r00*x530))+(((-1.0)*r00*x528))+(((-2.8109627547435)*px))+((sj4*x529))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x528))+((cj5*r20*sj4))+(((-1.0)*x530*x531))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x531))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.33731553056922)*x529))+(((-1.0)*cj5*r00*x530))+(((-1.0)*r00*x528))+(((-2.8109627547435)*px))+((sj4*x529))+((cj4*r02))))+IKsqr((((r20*x528))+((cj5*r20*sj4))+(((-1.0)*x530*x531))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x531))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.33731553056922)*x529))+(((-1.0)*cj5*r00*x530))+(((-1.0)*r00*x528))+(((-2.8109627547435)*px))+((sj4*x529))+((cj4*r02))), (((r20*x528))+((cj5*r20*sj4))+(((-1.0)*x530*x531))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x531))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x532=((1.0)*pz);
IkReal x533=((0.35575)*r21);
IkReal x534=(cj5*sj3);
IkReal x535=((0.35575)*r22);
IkReal x536=(cj3*sj4);
IkReal x537=(sj4*sj5);
IkReal x538=((0.35575)*r02);
IkReal x539=((0.35575)*r01);
IkReal x540=((0.12)*cj5);
IkReal x541=((0.12)*sj5);
IkReal x542=(cj3*cj4);
IkReal x543=(r01*x541);
IkReal x544=((0.35575)*(IKsin(j1)));
IkReal x545=(r00*x540);
IkReal x546=(r21*x541);
IkReal x547=((0.35575)*(IKcos(j1)));
IkReal x548=(r20*x540);
IkReal x549=(sj5*x542);
IkReal x550=((0.35575)*sj3*sj5);
IkReal x551=((0.35575)*cj5*r00);
IkReal x552=((0.35575)*cj5*r20);
IkReal x553=(x548+x532);
IkReal x554=(x546+x547);
IkReal x555=(x544+x545);
evalcond[0]=(((sj4*x551))+(((-1.0)*x537*x539))+(((-1.0)*x543))+px+x555+(((-1.0)*cj4*x538)));
evalcond[1]=(((cj4*x535))+(((-1.0)*sj4*x552))+(((-1.0)*x553))+x554+((x533*x537)));
evalcond[2]=(((x542*x552))+(((-1.0)*x533*x534))+(((-1.0)*x533*x549))+(((-1.0)*r20*x550))+(((-1.0)*px))+(((-1.0)*x555))+x543+((x535*x536)));
evalcond[3]=(((x539*x549))+(((-1.0)*x553))+x554+((x534*x539))+((r00*x550))+(((-1.0)*x542*x551))+(((-1.0)*x536*x538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x556=(sj1*sj4);
IkReal x557=(r01*sj5);
IkReal x558=((1.0)*cj1);
IkReal x559=(cj4*r22);
IkReal x560=(cj4*r02);
IkReal x561=(cj5*r20);
IkReal x562=(cj1*sj4);
IkReal x563=(cj5*r00);
IkReal x564=(r21*sj5);
if( IKabs(((((-1.0)*x556*x563))+((x561*x562))+((sj1*x560))+(((-1.0)*sj4*x558*x564))+(((-1.0)*x558*x559))+((x556*x557)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x556*x561))+(((-1.0)*x558*x560))+((x562*x563))+(((-1.0)*x556*x564))+(((-1.0)*sj1*x559))+(((-1.0)*sj4*x557*x558)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x556*x563))+((x561*x562))+((sj1*x560))+(((-1.0)*sj4*x558*x564))+(((-1.0)*x558*x559))+((x556*x557))))+IKsqr((((x556*x561))+(((-1.0)*x558*x560))+((x562*x563))+(((-1.0)*x556*x564))+(((-1.0)*sj1*x559))+(((-1.0)*sj4*x557*x558))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x556*x563))+((x561*x562))+((sj1*x560))+(((-1.0)*sj4*x558*x564))+(((-1.0)*x558*x559))+((x556*x557))), (((x556*x561))+(((-1.0)*x558*x560))+((x562*x563))+(((-1.0)*x556*x564))+(((-1.0)*sj1*x559))+(((-1.0)*sj4*x557*x558))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x565=IKcos(j2);
IkReal x566=IKsin(j2);
IkReal x567=(cj3*cj4);
IkReal x568=(r21*sj5);
IkReal x569=(cj5*r00);
IkReal x570=((0.35575)*sj1);
IkReal x571=(r01*sj5);
IkReal x572=((1.0)*sj4);
IkReal x573=(cj5*sj3);
IkReal x574=((1.0)*cj4);
IkReal x575=(cj5*r20);
IkReal x576=(sj3*sj5);
IkReal x577=(sj1*x566);
IkReal x578=(cj1*x566);
IkReal x579=(cj1*x565);
IkReal x580=(sj1*x565);
IkReal x581=((1.0)*x579);
evalcond[0]=((((-1.0)*x571*x572))+((sj4*x569))+x577+(((-1.0)*r02*x574))+(((-1.0)*x581)));
evalcond[1]=(((sj4*x575))+(((-1.0)*x580))+(((-1.0)*x578))+(((-1.0)*x568*x572))+(((-1.0)*r22*x574)));
evalcond[2]=((((-0.35575)*x578))+(((0.12)*x568))+(((-1.0)*x565*x570))+(((-1.0)*pz))+(((-0.12)*x575))+(((0.35575)*cj1)));
evalcond[3]=((((-0.35575)*x579))+(((0.12)*x571))+(((-1.0)*px))+(((-1.0)*x570))+((x566*x570))+(((-0.12)*x569)));
evalcond[4]=(((r01*x573))+(((-1.0)*x567*x569))+((r00*x576))+((x567*x571))+x578+x580+(((-1.0)*cj3*r02*x572)));
evalcond[5]=((((-1.0)*x567*x575))+((r20*x576))+((x567*x568))+x577+(((-1.0)*cj3*r22*x572))+((r21*x573))+(((-1.0)*x581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x582=((1.0)*cj5);
IkReal x583=((1.0)*sj5);
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x582))+(((-1.0)*r20*x583)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x583))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
CheckValue<IkReal> x585=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj4*x582))+((r01*sj4*sj5))+((cj4*r02)))),-1);
if(!x585.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x584.value)+(((1.5707963267949)*(x585.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x586=IKsin(j3);
IkReal x587=IKcos(j3);
IkReal x588=(r10*sj5);
IkReal x589=(cj4*sj5);
IkReal x590=(cj5*r11);
IkReal x591=(cj4*cj5);
IkReal x592=(r12*sj4);
IkReal x593=((1.0)*x587);
IkReal x594=((1.0)*x586);
evalcond[0]=(((x586*x588))+(((-1.0)*x592*x593))+(((-1.0)*r10*x591*x593))+((r11*x587*x589))+((x586*x590)));
evalcond[1]=((((-1.0)*r20*x591*x594))+(((-1.0)*cj5*r21*x593))+(((-1.0)*r22*sj4*x594))+((r21*x586*x589))+(((-1.0)*r20*sj5*x593)));
evalcond[2]=((((-1.0)*r00*sj5*x593))+(((-1.0)*r02*sj4*x594))+(((-1.0)*cj5*r01*x593))+((r01*x586*x589))+(((-1.0)*r00*x591*x594)));
evalcond[3]=((-1.0)+(((-1.0)*x588*x593))+(((-1.0)*x592*x594))+(((-1.0)*x590*x593))+((r11*x586*x589))+(((-1.0)*r10*x591*x594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x595=((0.33731553056922)*cj5);
IkReal x596=(r01*sj5);
IkReal x597=((1.0)*sj4);
IkReal x598=(r21*sj5);
if( IKabs(((((0.33731553056922)*x596))+(((-1.0)*r00*x595))+(((-1.0)*cj5*r00*x597))+((sj4*x596))+(((-2.8109627547435)*px))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.33731553056922)*x598))+(((-1.0)*x597*x598))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+((r20*x595))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.33731553056922)*x596))+(((-1.0)*r00*x595))+(((-1.0)*cj5*r00*x597))+((sj4*x596))+(((-2.8109627547435)*px))+((cj4*r02))))+IKsqr(((((-0.33731553056922)*x598))+(((-1.0)*x597*x598))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+((r20*x595))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.33731553056922)*x596))+(((-1.0)*r00*x595))+(((-1.0)*cj5*r00*x597))+((sj4*x596))+(((-2.8109627547435)*px))+((cj4*r02))), ((((-0.33731553056922)*x598))+(((-1.0)*x597*x598))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+((r20*x595))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x599=((1.0)*pz);
IkReal x600=((0.35575)*r21);
IkReal x601=(cj5*sj3);
IkReal x602=((0.35575)*r22);
IkReal x603=(cj3*sj4);
IkReal x604=(sj4*sj5);
IkReal x605=((0.35575)*r02);
IkReal x606=((0.35575)*r01);
IkReal x607=((0.12)*cj5);
IkReal x608=((0.12)*sj5);
IkReal x609=(cj3*cj4);
IkReal x610=(r01*x608);
IkReal x611=((0.35575)*(IKsin(j1)));
IkReal x612=(r00*x607);
IkReal x613=(r21*x608);
IkReal x614=((0.35575)*(IKcos(j1)));
IkReal x615=(r20*x607);
IkReal x616=(sj5*x609);
IkReal x617=((0.35575)*sj3*sj5);
IkReal x618=((0.35575)*cj5*r00);
IkReal x619=((0.35575)*cj5*r20);
IkReal x620=(x599+x615);
IkReal x621=(x614+x613);
IkReal x622=(x611+x612);
evalcond[0]=(((sj4*x618))+(((-1.0)*x604*x606))+px+(((-1.0)*cj4*x605))+(((-1.0)*x610))+x622);
evalcond[1]=((((-1.0)*sj4*x619))+(((-1.0)*x620))+((x600*x604))+x621+((cj4*x602)));
evalcond[2]=((((-1.0)*r20*x617))+(((-1.0)*x622))+(((-1.0)*px))+(((-1.0)*x600*x601))+x610+(((-1.0)*x600*x616))+((x609*x619))+((x602*x603)));
evalcond[3]=(((r00*x617))+(((-1.0)*x603*x605))+((x601*x606))+(((-1.0)*x609*x618))+(((-1.0)*x620))+((x606*x616))+x621);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x623=(sj1*sj4);
IkReal x624=(r01*sj5);
IkReal x625=((1.0)*cj1);
IkReal x626=(cj4*r22);
IkReal x627=(cj4*r02);
IkReal x628=(cj5*r20);
IkReal x629=(cj1*sj4);
IkReal x630=(cj5*r00);
IkReal x631=(r21*sj5);
if( IKabs((((x628*x629))+(((-1.0)*sj4*x625*x631))+(((-1.0)*x623*x630))+((sj1*x627))+(((-1.0)*x625*x626))+((x623*x624)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x626))+((x629*x630))+(((-1.0)*x623*x631))+(((-1.0)*sj4*x624*x625))+(((-1.0)*x625*x627))+((x623*x628)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x628*x629))+(((-1.0)*sj4*x625*x631))+(((-1.0)*x623*x630))+((sj1*x627))+(((-1.0)*x625*x626))+((x623*x624))))+IKsqr(((((-1.0)*sj1*x626))+((x629*x630))+(((-1.0)*x623*x631))+(((-1.0)*sj4*x624*x625))+(((-1.0)*x625*x627))+((x623*x628))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x628*x629))+(((-1.0)*sj4*x625*x631))+(((-1.0)*x623*x630))+((sj1*x627))+(((-1.0)*x625*x626))+((x623*x624))), ((((-1.0)*sj1*x626))+((x629*x630))+(((-1.0)*x623*x631))+(((-1.0)*sj4*x624*x625))+(((-1.0)*x625*x627))+((x623*x628))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x632=IKcos(j2);
IkReal x633=IKsin(j2);
IkReal x634=(cj3*cj4);
IkReal x635=(r21*sj5);
IkReal x636=(cj5*r00);
IkReal x637=((0.35575)*sj1);
IkReal x638=(r01*sj5);
IkReal x639=((1.0)*sj4);
IkReal x640=(cj5*sj3);
IkReal x641=((1.0)*cj4);
IkReal x642=(cj5*r20);
IkReal x643=(sj3*sj5);
IkReal x644=(sj1*x633);
IkReal x645=(cj1*x633);
IkReal x646=(cj1*x632);
IkReal x647=(sj1*x632);
IkReal x648=((1.0)*x646);
evalcond[0]=(((sj4*x636))+(((-1.0)*r02*x641))+(((-1.0)*x638*x639))+(((-1.0)*x648))+x644);
evalcond[1]=((((-1.0)*x645))+(((-1.0)*x647))+((sj4*x642))+(((-1.0)*r22*x641))+(((-1.0)*x635*x639)));
evalcond[2]=((((0.12)*x635))+(((-0.35575)*x645))+(((-1.0)*pz))+(((-0.12)*x642))+(((0.35575)*cj1))+(((-1.0)*x632*x637)));
evalcond[3]=((((0.12)*x638))+(((-0.35575)*x646))+(((-1.0)*x637))+(((-1.0)*px))+(((-0.12)*x636))+((x633*x637)));
evalcond[4]=(((x634*x638))+(((-1.0)*x634*x636))+(((-1.0)*cj3*r02*x639))+x647+x645+((r01*x640))+((r00*x643)));
evalcond[5]=(((r20*x643))+((x634*x635))+(((-1.0)*x634*x642))+(((-1.0)*x648))+((r21*x640))+x644+(((-1.0)*cj3*r22*x639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x649=((1.0)*r11);
IkReal x650=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x650;
j3eval[1]=IKsign(x650);
j3eval[2]=((IKabs(((((-1.0)*cj5*x649))+(((-1.0)*r10*sj5)))))+(IKabs((((cj4*cj5*r10))+(((-1.0)*cj4*sj5*x649))+((r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x651=((1.0)*sj5);
IkReal x652=((((-1.0)*r11*sj4*x651))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)));
j3eval[0]=x652;
j3eval[1]=((IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x651))+((cj4*cj5*r20)))))+(IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x651))))));
j3eval[2]=IKsign(x652);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x653=r00*r00;
IkReal x654=cj5*cj5;
IkReal x655=cj4*cj4;
IkReal x656=r01*r01;
IkReal x657=r02*r02;
IkReal x658=(cj5*r00);
IkReal x659=(r02*sj4);
IkReal x660=((2.0)*r01*sj5);
IkReal x661=((1.0)*x655);
IkReal x662=(x653*x654);
IkReal x663=(x654*x656);
IkReal x664=((((-1.0)*cj4*x659*x660))+(((-1.0)*x661*x663))+(((2.0)*cj4*x658*x659))+(((-1.0)*x657*x661))+(((-1.0)*x662))+(((-1.0)*x655*x658*x660))+x653+x657+x663+((x655*x656))+((x658*x660))+((x655*x662)));
j3eval[0]=x664;
j3eval[1]=((IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))))+(IKabs(((((-1.0)*x659))+(((-1.0)*cj4*x658))+((cj4*r01*sj5))))));
j3eval[2]=IKsign(x664);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x665=r00*r00;
IkReal x666=cj5*cj5;
IkReal x667=cj4*cj4;
IkReal x668=r01*r01;
IkReal x669=r02*r02;
IkReal x670=(cj5*r00);
IkReal x671=(r02*sj4);
IkReal x672=((2.0)*r01*sj5);
IkReal x673=((1.0)*x667);
IkReal x674=(x665*x666);
IkReal x675=(x666*x668);
CheckValue<IkReal> x676=IKPowWithIntegerCheck(IKsign((((x667*x668))+(((-1.0)*cj4*x671*x672))+((x670*x672))+((x667*x674))+(((-1.0)*x667*x670*x672))+(((-1.0)*x669*x673))+x669+x665+x675+(((-1.0)*x674))+(((2.0)*cj4*x670*x671))+(((-1.0)*x673*x675)))),-1);
if(!x676.valid){
continue;
}
CheckValue<IkReal> x677 = IKatan2WithCheck(IkReal(((((-1.0)*x671))+((cj4*r01*sj5))+(((-1.0)*cj4*x670)))),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x677.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x676.value)))+(x677.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x678=IKsin(j3);
IkReal x679=IKcos(j3);
IkReal x680=(r02*sj4);
IkReal x681=(cj4*cj5);
IkReal x682=(cj4*sj5);
IkReal x683=(cj5*r01);
IkReal x684=(r00*sj5);
IkReal x685=((1.0)*x679);
IkReal x686=((1.0)*x678);
evalcond[0]=(((x678*x683))+((x678*x684))+(((-1.0)*r00*x681*x685))+(((-1.0)*x680*x685))+((r01*x679*x682)));
evalcond[1]=((((-1.0)*r20*x681*x686))+(((-1.0)*cj5*r21*x685))+((r21*x678*x682))+(((-1.0)*r20*sj5*x685))+(((-1.0)*r22*sj4*x686)));
evalcond[2]=((((-1.0)*r10*x681*x686))+((r11*x678*x682))+(((-1.0)*r12*sj4*x686))+(((-1.0)*r10*sj5*x685))+(((-1.0)*cj5*r11*x685)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x681*x686))+(((-1.0)*x680*x686))+(((-1.0)*x684*x685))+((r01*x678*x682))+(((-1.0)*x683*x685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x687=((0.33731553056922)*cj5);
IkReal x688=(cj5*sj4);
IkReal x689=((1.0)*cj4);
IkReal x690=((0.33731553056922)*sj5);
IkReal x691=((1.0)*sj4*sj5);
if( IKabs(((((-1.0)*r12*x689))+(((2.8109627547435)*py))+(((-1.0)*r11*x691))+(((-1.0)*r11*x690))+((r10*x687))+((r10*x688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.8109627547435)*pz))+((r20*x688))+((r20*x687))+(((-1.0)*r22*x689))+(((-1.0)*r21*x691))+(((-1.0)*r21*x690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x689))+(((2.8109627547435)*py))+(((-1.0)*r11*x691))+(((-1.0)*r11*x690))+((r10*x687))+((r10*x688))))+IKsqr(((((2.8109627547435)*pz))+((r20*x688))+((r20*x687))+(((-1.0)*r22*x689))+(((-1.0)*r21*x691))+(((-1.0)*r21*x690))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x689))+(((2.8109627547435)*py))+(((-1.0)*r11*x691))+(((-1.0)*r11*x690))+((r10*x687))+((r10*x688))), ((((2.8109627547435)*pz))+((r20*x688))+((r20*x687))+(((-1.0)*r22*x689))+(((-1.0)*r21*x691))+(((-1.0)*r21*x690))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x692=((1.0)*py);
IkReal x693=((0.35575)*cj4);
IkReal x694=((0.35575)*sj3);
IkReal x695=(r21*sj5);
IkReal x696=((0.35575)*sj4);
IkReal x697=(cj5*r10);
IkReal x698=(r11*sj5);
IkReal x699=(cj5*r20);
IkReal x700=((0.12)*x699);
IkReal x701=((0.12)*x695);
IkReal x702=((0.35575)*(IKcos(j1)));
IkReal x703=((0.35575)*(IKsin(j1)));
IkReal x704=((0.12)*x698);
IkReal x705=((0.12)*x697);
IkReal x706=(x692+x705);
IkReal x707=(x703+x704);
IkReal x708=(x702+x701);
evalcond[0]=(((x695*x696))+(((-1.0)*x696*x699))+(((-1.0)*pz))+((r22*x693))+(((-1.0)*x700))+x708);
evalcond[1]=((((-1.0)*x696*x697))+((x696*x698))+((r12*x693))+(((-1.0)*x706))+x707);
evalcond[2]=((((-1.0)*cj3*r12*x696))+((cj3*x693*x698))+((cj5*r11*x694))+pz+(((-1.0)*x708))+(((-1.0)*cj3*x693*x697))+x700+((r10*sj5*x694)));
evalcond[3]=(((cj5*r21*x694))+((cj3*x693*x695))+(((-1.0)*cj3*r22*x696))+(((-1.0)*x706))+(((-1.0)*cj3*x693*x699))+x707+((r20*sj5*x694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x709=(cj1*cj4);
IkReal x710=((1.0)*r22);
IkReal x711=(cj5*sj4);
IkReal x712=((1.0)*cj1);
IkReal x713=((1.0)*sj1);
IkReal x714=(sj4*sj5);
if( IKabs(((((-1.0)*r21*x712*x714))+((r10*sj1*x711))+(((-1.0)*cj4*r12*x713))+(((-1.0)*r11*x713*x714))+(((-1.0)*x709*x710))+((cj1*r20*x711)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x714))+((r20*sj1*x711))+((r12*x709))+(((-1.0)*cj4*sj1*x710))+(((-1.0)*r10*x711*x712))+(((-1.0)*r21*x713*x714)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x712*x714))+((r10*sj1*x711))+(((-1.0)*cj4*r12*x713))+(((-1.0)*r11*x713*x714))+(((-1.0)*x709*x710))+((cj1*r20*x711))))+IKsqr((((cj1*r11*x714))+((r20*sj1*x711))+((r12*x709))+(((-1.0)*cj4*sj1*x710))+(((-1.0)*r10*x711*x712))+(((-1.0)*r21*x713*x714))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x712*x714))+((r10*sj1*x711))+(((-1.0)*cj4*r12*x713))+(((-1.0)*r11*x713*x714))+(((-1.0)*x709*x710))+((cj1*r20*x711))), (((cj1*r11*x714))+((r20*sj1*x711))+((r12*x709))+(((-1.0)*cj4*sj1*x710))+(((-1.0)*r10*x711*x712))+(((-1.0)*r21*x713*x714))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x715=IKcos(j2);
IkReal x716=IKsin(j2);
IkReal x717=(cj3*cj4);
IkReal x718=(r21*sj5);
IkReal x719=((0.35575)*sj1);
IkReal x720=((1.0)*sj4);
IkReal x721=((1.0)*cj5);
IkReal x722=(cj5*sj3);
IkReal x723=((1.0)*sj1);
IkReal x724=(cj5*r10);
IkReal x725=((1.0)*cj4);
IkReal x726=(cj5*r20);
IkReal x727=(sj3*sj5);
IkReal x728=((0.35575)*cj1);
IkReal x729=(r11*sj5);
IkReal x730=(cj1*x715);
IkReal x731=(x715*x723);
IkReal x732=((1.0)*cj1*x716);
IkReal x733=(x732+x731);
evalcond[0]=((((-1.0)*r12*x725))+(((-1.0)*x716*x723))+(((-1.0)*x720*x729))+x730+((sj4*x724)));
evalcond[1]=((((-1.0)*x733))+(((-1.0)*r22*x725))+((sj4*x726))+(((-1.0)*x718*x720)));
evalcond[2]=((((-0.12)*x726))+(((-1.0)*pz))+(((0.12)*x718))+(((-1.0)*x716*x728))+x728+(((-1.0)*x715*x719)));
evalcond[3]=((((-0.12)*x724))+(((-1.0)*py))+(((-1.0)*x716*x719))+(((0.12)*x729))+x719+((x715*x728)));
evalcond[4]=(((r20*x727))+(((-1.0)*x730))+((x717*x718))+(((-1.0)*r20*x717*x721))+((sj1*x716))+((r21*x722))+(((-1.0)*cj3*r22*x720)));
evalcond[5]=(((r10*x727))+(((-1.0)*r10*x717*x721))+((x717*x729))+(((-1.0)*x733))+(((-1.0)*cj3*r12*x720))+((r11*x722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x734=((1.0)*sj5);
CheckValue<IkReal> x735=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*x734))+(((-1.0)*cj4*r12)))),-1);
if(!x735.valid){
continue;
}
CheckValue<IkReal> x736 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x734))+(((-1.0)*cj5*r21)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x734)))),IKFAST_ATAN2_MAGTHRESH);
if(!x736.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x735.value)))+(x736.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x737=IKsin(j3);
IkReal x738=IKcos(j3);
IkReal x739=(r02*sj4);
IkReal x740=(cj4*cj5);
IkReal x741=(cj4*sj5);
IkReal x742=(cj5*r01);
IkReal x743=(r00*sj5);
IkReal x744=((1.0)*x738);
IkReal x745=((1.0)*x737);
evalcond[0]=(((r01*x738*x741))+((x737*x743))+((x737*x742))+(((-1.0)*x739*x744))+(((-1.0)*r00*x740*x744)));
evalcond[1]=((((-1.0)*r22*sj4*x745))+(((-1.0)*r20*x740*x745))+(((-1.0)*cj5*r21*x744))+(((-1.0)*r20*sj5*x744))+((r21*x737*x741)));
evalcond[2]=(((r11*x737*x741))+(((-1.0)*r12*sj4*x745))+(((-1.0)*cj5*r11*x744))+(((-1.0)*r10*sj5*x744))+(((-1.0)*r10*x740*x745)));
evalcond[3]=((-1.0)+(((-1.0)*x742*x744))+(((-1.0)*x739*x745))+((r01*x737*x741))+(((-1.0)*r00*x740*x745))+(((-1.0)*x743*x744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x746=((0.33731553056922)*cj5);
IkReal x747=(cj5*sj4);
IkReal x748=((1.0)*cj4);
IkReal x749=((0.33731553056922)*sj5);
IkReal x750=((1.0)*sj4*sj5);
if( IKabs(((((-1.0)*r12*x748))+(((-1.0)*r11*x749))+((r10*x747))+((r10*x746))+(((-1.0)*r11*x750))+(((2.8109627547435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x749))+(((2.8109627547435)*pz))+(((-1.0)*r22*x748))+((r20*x747))+((r20*x746))+(((-1.0)*r21*x750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x748))+(((-1.0)*r11*x749))+((r10*x747))+((r10*x746))+(((-1.0)*r11*x750))+(((2.8109627547435)*py))))+IKsqr(((((-1.0)*r21*x749))+(((2.8109627547435)*pz))+(((-1.0)*r22*x748))+((r20*x747))+((r20*x746))+(((-1.0)*r21*x750))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x748))+(((-1.0)*r11*x749))+((r10*x747))+((r10*x746))+(((-1.0)*r11*x750))+(((2.8109627547435)*py))), ((((-1.0)*r21*x749))+(((2.8109627547435)*pz))+(((-1.0)*r22*x748))+((r20*x747))+((r20*x746))+(((-1.0)*r21*x750))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x751=((1.0)*py);
IkReal x752=((0.35575)*cj4);
IkReal x753=((0.35575)*sj3);
IkReal x754=(r21*sj5);
IkReal x755=((0.35575)*sj4);
IkReal x756=(cj5*r10);
IkReal x757=(r11*sj5);
IkReal x758=(cj5*r20);
IkReal x759=((0.12)*x758);
IkReal x760=((0.12)*x754);
IkReal x761=((0.35575)*(IKcos(j1)));
IkReal x762=((0.35575)*(IKsin(j1)));
IkReal x763=((0.12)*x757);
IkReal x764=((0.12)*x756);
IkReal x765=(x751+x764);
IkReal x766=(x762+x763);
IkReal x767=(x760+x761);
evalcond[0]=(((r22*x752))+(((-1.0)*x755*x758))+(((-1.0)*pz))+x767+(((-1.0)*x759))+((x754*x755)));
evalcond[1]=((((-1.0)*x765))+(((-1.0)*x755*x756))+((r12*x752))+((x755*x757))+x766);
evalcond[2]=((((-1.0)*cj3*r12*x755))+(((-1.0)*x767))+((cj3*x752*x757))+pz+(((-1.0)*cj3*x752*x756))+x759+((cj5*r11*x753))+((r10*sj5*x753)));
evalcond[3]=((((-1.0)*x765))+((cj3*x752*x754))+(((-1.0)*cj3*x752*x758))+(((-1.0)*cj3*r22*x755))+((r20*sj5*x753))+x766+((cj5*r21*x753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x768=(cj1*cj4);
IkReal x769=((1.0)*r22);
IkReal x770=(cj5*sj4);
IkReal x771=((1.0)*cj1);
IkReal x772=((1.0)*sj1);
IkReal x773=(sj4*sj5);
if( IKabs(((((-1.0)*r11*x772*x773))+((cj1*r20*x770))+(((-1.0)*cj4*r12*x772))+(((-1.0)*x768*x769))+(((-1.0)*r21*x771*x773))+((r10*sj1*x770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x773))+(((-1.0)*cj4*sj1*x769))+(((-1.0)*r10*x770*x771))+((r12*x768))+(((-1.0)*r21*x772*x773))+((r20*sj1*x770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x772*x773))+((cj1*r20*x770))+(((-1.0)*cj4*r12*x772))+(((-1.0)*x768*x769))+(((-1.0)*r21*x771*x773))+((r10*sj1*x770))))+IKsqr((((cj1*r11*x773))+(((-1.0)*cj4*sj1*x769))+(((-1.0)*r10*x770*x771))+((r12*x768))+(((-1.0)*r21*x772*x773))+((r20*sj1*x770))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x772*x773))+((cj1*r20*x770))+(((-1.0)*cj4*r12*x772))+(((-1.0)*x768*x769))+(((-1.0)*r21*x771*x773))+((r10*sj1*x770))), (((cj1*r11*x773))+(((-1.0)*cj4*sj1*x769))+(((-1.0)*r10*x770*x771))+((r12*x768))+(((-1.0)*r21*x772*x773))+((r20*sj1*x770))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x774=IKcos(j2);
IkReal x775=IKsin(j2);
IkReal x776=(cj3*cj4);
IkReal x777=(r21*sj5);
IkReal x778=((0.35575)*sj1);
IkReal x779=((1.0)*sj4);
IkReal x780=((1.0)*cj5);
IkReal x781=(cj5*sj3);
IkReal x782=((1.0)*sj1);
IkReal x783=(cj5*r10);
IkReal x784=((1.0)*cj4);
IkReal x785=(cj5*r20);
IkReal x786=(sj3*sj5);
IkReal x787=((0.35575)*cj1);
IkReal x788=(r11*sj5);
IkReal x789=(cj1*x774);
IkReal x790=(x774*x782);
IkReal x791=((1.0)*cj1*x775);
IkReal x792=(x791+x790);
evalcond[0]=((((-1.0)*x775*x782))+((sj4*x783))+(((-1.0)*r12*x784))+x789+(((-1.0)*x779*x788)));
evalcond[1]=((((-1.0)*x792))+((sj4*x785))+(((-1.0)*r22*x784))+(((-1.0)*x777*x779)));
evalcond[2]=((((-0.12)*x785))+(((-1.0)*x774*x778))+(((-1.0)*x775*x787))+(((0.12)*x777))+(((-1.0)*pz))+x787);
evalcond[3]=((((-0.12)*x783))+((x774*x787))+(((-1.0)*py))+(((0.12)*x788))+(((-1.0)*x775*x778))+x778);
evalcond[4]=(((x776*x777))+((r20*x786))+(((-1.0)*cj3*r22*x779))+((r21*x781))+((sj1*x775))+(((-1.0)*r20*x776*x780))+(((-1.0)*x789)));
evalcond[5]=((((-1.0)*x792))+((r10*x786))+(((-1.0)*cj3*r12*x779))+((r11*x781))+(((-1.0)*r10*x776*x780))+((x776*x788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x793=((1.0)*r11);
CheckValue<IkReal> x794=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x794.valid){
continue;
}
CheckValue<IkReal> x795 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x793)))),IkReal((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x795.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x794.value)))+(x795.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x796=IKsin(j3);
IkReal x797=IKcos(j3);
IkReal x798=(r02*sj4);
IkReal x799=(cj4*cj5);
IkReal x800=(cj4*sj5);
IkReal x801=(cj5*r01);
IkReal x802=(r00*sj5);
IkReal x803=((1.0)*x797);
IkReal x804=((1.0)*x796);
evalcond[0]=((((-1.0)*x798*x803))+((r01*x797*x800))+(((-1.0)*r00*x799*x803))+((x796*x802))+((x796*x801)));
evalcond[1]=((((-1.0)*r20*x799*x804))+(((-1.0)*r20*sj5*x803))+(((-1.0)*r22*sj4*x804))+((r21*x796*x800))+(((-1.0)*cj5*r21*x803)));
evalcond[2]=(((r11*x796*x800))+(((-1.0)*r10*x799*x804))+(((-1.0)*cj5*r11*x803))+(((-1.0)*r12*sj4*x804))+(((-1.0)*r10*sj5*x803)));
evalcond[3]=((-1.0)+(((-1.0)*x798*x804))+(((-1.0)*r00*x799*x804))+((r01*x796*x800))+(((-1.0)*x801*x803))+(((-1.0)*x802*x803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x805=((0.33731553056922)*cj5);
IkReal x806=(cj5*sj4);
IkReal x807=((1.0)*cj4);
IkReal x808=((0.33731553056922)*sj5);
IkReal x809=((1.0)*sj4*sj5);
if( IKabs(((((-1.0)*r11*x809))+(((-1.0)*r11*x808))+(((-1.0)*r12*x807))+(((2.8109627547435)*py))+((r10*x805))+((r10*x806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x807))+(((2.8109627547435)*pz))+(((-1.0)*r21*x809))+(((-1.0)*r21*x808))+((r20*x805))+((r20*x806)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x809))+(((-1.0)*r11*x808))+(((-1.0)*r12*x807))+(((2.8109627547435)*py))+((r10*x805))+((r10*x806))))+IKsqr(((((-1.0)*r22*x807))+(((2.8109627547435)*pz))+(((-1.0)*r21*x809))+(((-1.0)*r21*x808))+((r20*x805))+((r20*x806))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r11*x809))+(((-1.0)*r11*x808))+(((-1.0)*r12*x807))+(((2.8109627547435)*py))+((r10*x805))+((r10*x806))), ((((-1.0)*r22*x807))+(((2.8109627547435)*pz))+(((-1.0)*r21*x809))+(((-1.0)*r21*x808))+((r20*x805))+((r20*x806))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x810=((1.0)*py);
IkReal x811=((0.35575)*cj4);
IkReal x812=((0.35575)*sj3);
IkReal x813=(r21*sj5);
IkReal x814=((0.35575)*sj4);
IkReal x815=(cj5*r10);
IkReal x816=(r11*sj5);
IkReal x817=(cj5*r20);
IkReal x818=((0.12)*x817);
IkReal x819=((0.12)*x813);
IkReal x820=((0.35575)*(IKcos(j1)));
IkReal x821=((0.35575)*(IKsin(j1)));
IkReal x822=((0.12)*x816);
IkReal x823=((0.12)*x815);
IkReal x824=(x810+x823);
IkReal x825=(x822+x821);
IkReal x826=(x819+x820);
evalcond[0]=((((-1.0)*x818))+((x813*x814))+(((-1.0)*x814*x817))+(((-1.0)*pz))+x826+((r22*x811)));
evalcond[1]=((((-1.0)*x824))+((x814*x816))+(((-1.0)*x814*x815))+x825+((r12*x811)));
evalcond[2]=(((cj3*x811*x816))+((r10*sj5*x812))+(((-1.0)*cj3*x811*x815))+((cj5*r11*x812))+(((-1.0)*x826))+pz+(((-1.0)*cj3*r12*x814))+x818);
evalcond[3]=(((r20*sj5*x812))+((cj3*x811*x813))+(((-1.0)*cj3*x811*x817))+(((-1.0)*x824))+(((-1.0)*cj3*r22*x814))+x825+((cj5*r21*x812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x827=(cj1*cj4);
IkReal x828=((1.0)*r22);
IkReal x829=(cj5*sj4);
IkReal x830=((1.0)*cj1);
IkReal x831=((1.0)*sj1);
IkReal x832=(sj4*sj5);
if( IKabs((((r10*sj1*x829))+((cj1*r20*x829))+(((-1.0)*r21*x830*x832))+(((-1.0)*x827*x828))+(((-1.0)*r11*x831*x832))+(((-1.0)*cj4*r12*x831)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x832))+(((-1.0)*r10*x829*x830))+(((-1.0)*r21*x831*x832))+((r12*x827))+((r20*sj1*x829))+(((-1.0)*cj4*sj1*x828)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*sj1*x829))+((cj1*r20*x829))+(((-1.0)*r21*x830*x832))+(((-1.0)*x827*x828))+(((-1.0)*r11*x831*x832))+(((-1.0)*cj4*r12*x831))))+IKsqr((((cj1*r11*x832))+(((-1.0)*r10*x829*x830))+(((-1.0)*r21*x831*x832))+((r12*x827))+((r20*sj1*x829))+(((-1.0)*cj4*sj1*x828))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r10*sj1*x829))+((cj1*r20*x829))+(((-1.0)*r21*x830*x832))+(((-1.0)*x827*x828))+(((-1.0)*r11*x831*x832))+(((-1.0)*cj4*r12*x831))), (((cj1*r11*x832))+(((-1.0)*r10*x829*x830))+(((-1.0)*r21*x831*x832))+((r12*x827))+((r20*sj1*x829))+(((-1.0)*cj4*sj1*x828))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x833=IKcos(j2);
IkReal x834=IKsin(j2);
IkReal x835=(cj3*cj4);
IkReal x836=(r21*sj5);
IkReal x837=((0.35575)*sj1);
IkReal x838=((1.0)*sj4);
IkReal x839=((1.0)*cj5);
IkReal x840=(cj5*sj3);
IkReal x841=((1.0)*sj1);
IkReal x842=(cj5*r10);
IkReal x843=((1.0)*cj4);
IkReal x844=(cj5*r20);
IkReal x845=(sj3*sj5);
IkReal x846=((0.35575)*cj1);
IkReal x847=(r11*sj5);
IkReal x848=(cj1*x833);
IkReal x849=(x833*x841);
IkReal x850=((1.0)*cj1*x834);
IkReal x851=(x850+x849);
evalcond[0]=(((sj4*x842))+(((-1.0)*x834*x841))+(((-1.0)*r12*x843))+(((-1.0)*x838*x847))+x848);
evalcond[1]=((((-1.0)*x851))+((sj4*x844))+(((-1.0)*x836*x838))+(((-1.0)*r22*x843)));
evalcond[2]=((((-1.0)*x833*x837))+(((-0.12)*x844))+(((-1.0)*pz))+(((-1.0)*x834*x846))+(((0.12)*x836))+x846);
evalcond[3]=(((x833*x846))+(((-0.12)*x842))+(((-1.0)*x834*x837))+(((-1.0)*py))+(((0.12)*x847))+x837);
evalcond[4]=((((-1.0)*cj3*r22*x838))+((x835*x836))+((r20*x845))+((r21*x840))+(((-1.0)*x848))+(((-1.0)*r20*x835*x839))+((sj1*x834)));
evalcond[5]=((((-1.0)*r10*x835*x839))+(((-1.0)*x851))+(((-1.0)*cj3*r12*x838))+((x835*x847))+((r10*x845))+((r11*x840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x852=((1.0)*cj5);
IkReal x853=((1.0)*sj5);
IkReal x854=(((r11*sj4*sj5))+(((-1.0)*r10*sj4*x852))+((cj4*r12)));
j3eval[0]=x854;
j3eval[1]=((IKabs(((((-1.0)*r21*x852))+(((-1.0)*r20*x853)))))+(IKabs(((((-1.0)*cj4*r21*x853))+((r22*sj4))+((cj4*cj5*r20))))));
j3eval[2]=IKsign(x854);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x855=((1.0)*r11);
IkReal x856=((1.0)*sj5);
IkReal x857=(((cj5*r20*sj4))+(((-1.0)*r21*sj4*x856))+(((-1.0)*cj4*r22)));
j3eval[0]=x857;
j3eval[1]=((IKabs((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x855)))))+(IKabs(((((-1.0)*r10*x856))+(((-1.0)*cj5*x855))))));
j3eval[2]=IKsign(x857);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x858=cj4*cj4;
IkReal x859=cj5*cj5;
IkReal x860=r01*r01;
IkReal x861=r02*r02;
IkReal x862=r00*r00;
IkReal x863=(cj5*r00);
IkReal x864=(r01*sj5);
IkReal x865=(r02*sj4);
IkReal x866=((2.0)*cj4);
IkReal x867=((1.0)*x858);
IkReal x868=(x859*x862);
IkReal x869=(x859*x860);
IkReal x870=((((-1.0)*x862))+(((-1.0)*x861))+(((-1.0)*x869))+(((-1.0)*x860*x867))+(((-2.0)*x863*x864))+((x858*x869))+((x858*x861))+((x864*x865*x866))+(((-1.0)*x863*x865*x866))+(((2.0)*x858*x863*x864))+x868+(((-1.0)*x867*x868)));
j3eval[0]=x870;
j3eval[1]=IKsign(x870);
j3eval[2]=((IKabs(((((-1.0)*x865))+((cj4*x864))+(((-1.0)*cj4*x863)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x871=cj4*cj4;
IkReal x872=cj5*cj5;
IkReal x873=r01*r01;
IkReal x874=r02*r02;
IkReal x875=r00*r00;
IkReal x876=((1.0)*cj5);
IkReal x877=(cj4*r00);
IkReal x878=(r02*sj4);
IkReal x879=((2.0)*cj5);
IkReal x880=(r00*sj5);
IkReal x881=((1.0)*x872);
IkReal x882=(cj4*r01*sj5);
IkReal x883=(x871*x873);
CheckValue<IkReal> x884=IKPowWithIntegerCheck(IKsign((((x872*x875))+((x871*x874))+(((-1.0)*x873*x881))+(((-1.0)*x877*x878*x879))+(((-1.0)*x874))+(((-1.0)*x875))+(((-1.0)*r01*x879*x880))+(((-1.0)*x871*x875*x881))+(((-1.0)*x883))+(((2.0)*x878*x882))+((x872*x883))+((r01*x871*x879*x880)))),-1);
if(!x884.valid){
continue;
}
CheckValue<IkReal> x885 = IKatan2WithCheck(IkReal(((((-1.0)*x876*x877))+(((-1.0)*x878))+x882)),IkReal(((((-1.0)*r01*x876))+(((-1.0)*x880)))),IKFAST_ATAN2_MAGTHRESH);
if(!x885.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x884.value)))+(x885.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x886=IKsin(j3);
IkReal x887=IKcos(j3);
IkReal x888=(r02*sj4);
IkReal x889=(cj4*cj5);
IkReal x890=(cj4*sj5);
IkReal x891=(cj5*r01);
IkReal x892=(r00*sj5);
IkReal x893=((1.0)*x887);
IkReal x894=((1.0)*x886);
evalcond[0]=(((x886*x891))+((x886*x892))+(((-1.0)*r00*x889*x893))+(((-1.0)*x888*x893))+((r01*x887*x890)));
evalcond[1]=((((-1.0)*r22*sj4*x894))+(((-1.0)*r20*x889*x894))+((r21*x886*x890))+(((-1.0)*r20*sj5*x893))+(((-1.0)*cj5*r21*x893)));
evalcond[2]=((((-1.0)*r12*sj4*x894))+(((-1.0)*r10*sj5*x893))+((r11*x886*x890))+(((-1.0)*r10*x889*x894))+(((-1.0)*cj5*r11*x893)));
evalcond[3]=((1.0)+(((-1.0)*x892*x893))+(((-1.0)*r00*x889*x894))+(((-1.0)*x888*x894))+((r01*x886*x890))+(((-1.0)*x891*x893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x895=((0.33731553056922)*cj5);
IkReal x896=(r11*sj5);
IkReal x897=(cj5*sj4);
IkReal x898=(r21*sj5);
if( IKabs((((sj4*x896))+(((-1.0)*r10*x897))+(((-1.0)*r10*x895))+(((-2.8109627547435)*py))+(((0.33731553056922)*x896))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x897))+((r20*x895))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-1.0)*sj4*x898))+(((-0.33731553056922)*x898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x896))+(((-1.0)*r10*x897))+(((-1.0)*r10*x895))+(((-2.8109627547435)*py))+(((0.33731553056922)*x896))+((cj4*r12))))+IKsqr((((r20*x897))+((r20*x895))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-1.0)*sj4*x898))+(((-0.33731553056922)*x898))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((sj4*x896))+(((-1.0)*r10*x897))+(((-1.0)*r10*x895))+(((-2.8109627547435)*py))+(((0.33731553056922)*x896))+((cj4*r12))), (((r20*x897))+((r20*x895))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-1.0)*sj4*x898))+(((-0.33731553056922)*x898))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x899=((1.0)*pz);
IkReal x900=((0.35575)*cj4);
IkReal x901=((0.35575)*sj3);
IkReal x902=(r21*sj5);
IkReal x903=((0.35575)*sj4);
IkReal x904=(cj5*r10);
IkReal x905=(r11*sj5);
IkReal x906=(cj5*r20);
IkReal x907=((0.12)*x905);
IkReal x908=((0.12)*x904);
IkReal x909=((0.35575)*(IKsin(j1)));
IkReal x910=((0.12)*x902);
IkReal x911=((0.35575)*(IKcos(j1)));
IkReal x912=((0.12)*x906);
IkReal x913=(x899+x912);
IkReal x914=(x911+x910);
IkReal x915=(x908+x909);
evalcond[0]=((((-1.0)*x903*x905))+((x903*x904))+(((-1.0)*x907))+(((-1.0)*r12*x900))+py+x915);
evalcond[1]=((((-1.0)*x903*x906))+((x902*x903))+(((-1.0)*x913))+((r22*x900))+x914);
evalcond[2]=(((cj3*x900*x906))+(((-1.0)*r20*sj5*x901))+(((-1.0)*x915))+((cj3*r22*x903))+(((-1.0)*cj5*r21*x901))+(((-1.0)*py))+(((-1.0)*cj3*x900*x902))+x907);
evalcond[3]=(((r10*sj5*x901))+((cj3*x900*x905))+(((-1.0)*x913))+(((-1.0)*cj3*x900*x904))+((cj5*r11*x901))+x914+(((-1.0)*cj3*r12*x903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x916=(cj1*sj4);
IkReal x917=(cj5*r20);
IkReal x918=(r11*sj5);
IkReal x919=(sj1*sj4);
IkReal x920=(cj4*r12);
IkReal x921=(cj5*r10);
IkReal x922=((1.0)*cj4*r22);
IkReal x923=((1.0)*r21*sj5);
if( IKabs(((((-1.0)*x919*x921))+((sj1*x920))+((x918*x919))+(((-1.0)*cj1*x922))+((x916*x917))+(((-1.0)*x916*x923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x922))+((x917*x919))+((x916*x921))+(((-1.0)*cj1*x920))+(((-1.0)*x916*x918))+(((-1.0)*x919*x923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x919*x921))+((sj1*x920))+((x918*x919))+(((-1.0)*cj1*x922))+((x916*x917))+(((-1.0)*x916*x923))))+IKsqr(((((-1.0)*sj1*x922))+((x917*x919))+((x916*x921))+(((-1.0)*cj1*x920))+(((-1.0)*x916*x918))+(((-1.0)*x919*x923))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x919*x921))+((sj1*x920))+((x918*x919))+(((-1.0)*cj1*x922))+((x916*x917))+(((-1.0)*x916*x923))), ((((-1.0)*sj1*x922))+((x917*x919))+((x916*x921))+(((-1.0)*cj1*x920))+(((-1.0)*x916*x918))+(((-1.0)*x919*x923))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x924=IKcos(j2);
IkReal x925=IKsin(j2);
IkReal x926=(cj3*cj4);
IkReal x927=(r21*sj5);
IkReal x928=((0.35575)*sj1);
IkReal x929=((1.0)*sj4);
IkReal x930=((1.0)*cj5);
IkReal x931=(cj5*sj3);
IkReal x932=(cj5*r10);
IkReal x933=((1.0)*cj4);
IkReal x934=(cj5*r20);
IkReal x935=(r11*sj5);
IkReal x936=(sj3*sj5);
IkReal x937=(sj1*x925);
IkReal x938=(cj1*x924);
IkReal x939=(cj1*x925);
IkReal x940=(sj1*x924);
IkReal x941=((1.0)*x938);
evalcond[0]=((((-1.0)*x941))+(((-1.0)*r12*x933))+((sj4*x932))+(((-1.0)*x929*x935))+x937);
evalcond[1]=((((-1.0)*r22*x933))+(((-1.0)*x927*x929))+(((-1.0)*x940))+((sj4*x934))+(((-1.0)*x939)));
evalcond[2]=((((-0.35575)*x939))+(((-1.0)*x924*x928))+(((-1.0)*pz))+(((0.12)*x927))+(((0.35575)*cj1))+(((-0.12)*x934)));
evalcond[3]=((((-1.0)*x928))+(((-0.35575)*x938))+(((-1.0)*py))+(((0.12)*x935))+((x925*x928))+(((-0.12)*x932)));
evalcond[4]=((((-1.0)*cj3*r12*x929))+((r10*x936))+((r11*x931))+((x926*x935))+x939+x940+(((-1.0)*r10*x926*x930)));
evalcond[5]=((((-1.0)*x941))+(((-1.0)*r20*x926*x930))+((r21*x931))+(((-1.0)*cj3*r22*x929))+((x926*x927))+((r20*x936))+x937);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x942=((1.0)*r11);
IkReal x943=((1.0)*sj5);
CheckValue<IkReal> x944=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x943))+(((-1.0)*cj4*r22)))),-1);
if(!x944.valid){
continue;
}
CheckValue<IkReal> x945 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x943))+(((-1.0)*cj5*x942)))),IkReal(((((-1.0)*cj4*sj5*x942))+((cj4*cj5*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x945.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x944.value)))+(x945.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x946=IKsin(j3);
IkReal x947=IKcos(j3);
IkReal x948=(r02*sj4);
IkReal x949=(cj4*cj5);
IkReal x950=(cj4*sj5);
IkReal x951=(cj5*r01);
IkReal x952=(r00*sj5);
IkReal x953=((1.0)*x947);
IkReal x954=((1.0)*x946);
evalcond[0]=(((r01*x947*x950))+(((-1.0)*r00*x949*x953))+((x946*x951))+((x946*x952))+(((-1.0)*x948*x953)));
evalcond[1]=((((-1.0)*r22*sj4*x954))+(((-1.0)*r20*sj5*x953))+(((-1.0)*r20*x949*x954))+(((-1.0)*cj5*r21*x953))+((r21*x946*x950)));
evalcond[2]=((((-1.0)*r10*x949*x954))+(((-1.0)*r10*sj5*x953))+(((-1.0)*cj5*r11*x953))+((r11*x946*x950))+(((-1.0)*r12*sj4*x954)));
evalcond[3]=((1.0)+(((-1.0)*r00*x949*x954))+(((-1.0)*x951*x953))+(((-1.0)*x952*x953))+(((-1.0)*x948*x954))+((r01*x946*x950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x955=((0.33731553056922)*cj5);
IkReal x956=(r11*sj5);
IkReal x957=(cj5*sj4);
IkReal x958=(r21*sj5);
if( IKabs(((((0.33731553056922)*x956))+(((-1.0)*r10*x955))+((sj4*x956))+(((-2.8109627547435)*py))+((cj4*r12))+(((-1.0)*r10*x957)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.33731553056922)*x958))+(((-1.0)*sj4*x958))+(((2.8109627547435)*pz))+((r20*x957))+((r20*x955))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.33731553056922)*x956))+(((-1.0)*r10*x955))+((sj4*x956))+(((-2.8109627547435)*py))+((cj4*r12))+(((-1.0)*r10*x957))))+IKsqr(((((-0.33731553056922)*x958))+(((-1.0)*sj4*x958))+(((2.8109627547435)*pz))+((r20*x957))+((r20*x955))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.33731553056922)*x956))+(((-1.0)*r10*x955))+((sj4*x956))+(((-2.8109627547435)*py))+((cj4*r12))+(((-1.0)*r10*x957))), ((((-0.33731553056922)*x958))+(((-1.0)*sj4*x958))+(((2.8109627547435)*pz))+((r20*x957))+((r20*x955))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x959=((1.0)*pz);
IkReal x960=((0.35575)*cj4);
IkReal x961=((0.35575)*sj3);
IkReal x962=(r21*sj5);
IkReal x963=((0.35575)*sj4);
IkReal x964=(cj5*r10);
IkReal x965=(r11*sj5);
IkReal x966=(cj5*r20);
IkReal x967=((0.12)*x965);
IkReal x968=((0.12)*x964);
IkReal x969=((0.35575)*(IKsin(j1)));
IkReal x970=((0.12)*x962);
IkReal x971=((0.35575)*(IKcos(j1)));
IkReal x972=((0.12)*x966);
IkReal x973=(x972+x959);
IkReal x974=(x971+x970);
IkReal x975=(x968+x969);
evalcond[0]=((((-1.0)*x963*x965))+py+((x963*x964))+(((-1.0)*r12*x960))+x975+(((-1.0)*x967)));
evalcond[1]=((((-1.0)*x963*x966))+((x962*x963))+x974+(((-1.0)*x973))+((r22*x960)));
evalcond[2]=(((cj3*x960*x966))+(((-1.0)*r20*sj5*x961))+(((-1.0)*py))+((cj3*r22*x963))+(((-1.0)*cj3*x960*x962))+(((-1.0)*cj5*r21*x961))+x967+(((-1.0)*x975)));
evalcond[3]=(((cj3*x960*x965))+((r10*sj5*x961))+((cj5*r11*x961))+(((-1.0)*cj3*x960*x964))+(((-1.0)*cj3*r12*x963))+x974+(((-1.0)*x973)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x976=(cj1*sj4);
IkReal x977=(cj5*r20);
IkReal x978=(r11*sj5);
IkReal x979=(sj1*sj4);
IkReal x980=(cj4*r12);
IkReal x981=(cj5*r10);
IkReal x982=((1.0)*cj4*r22);
IkReal x983=((1.0)*r21*sj5);
if( IKabs(((((-1.0)*cj1*x982))+((x978*x979))+(((-1.0)*x979*x981))+((sj1*x980))+((x976*x977))+(((-1.0)*x976*x983)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x976*x978))+((x977*x979))+((x976*x981))+(((-1.0)*cj1*x980))+(((-1.0)*sj1*x982))+(((-1.0)*x979*x983)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj1*x982))+((x978*x979))+(((-1.0)*x979*x981))+((sj1*x980))+((x976*x977))+(((-1.0)*x976*x983))))+IKsqr(((((-1.0)*x976*x978))+((x977*x979))+((x976*x981))+(((-1.0)*cj1*x980))+(((-1.0)*sj1*x982))+(((-1.0)*x979*x983))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj1*x982))+((x978*x979))+(((-1.0)*x979*x981))+((sj1*x980))+((x976*x977))+(((-1.0)*x976*x983))), ((((-1.0)*x976*x978))+((x977*x979))+((x976*x981))+(((-1.0)*cj1*x980))+(((-1.0)*sj1*x982))+(((-1.0)*x979*x983))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x984=IKcos(j2);
IkReal x985=IKsin(j2);
IkReal x986=(cj3*cj4);
IkReal x987=(r21*sj5);
IkReal x988=((0.35575)*sj1);
IkReal x989=((1.0)*sj4);
IkReal x990=((1.0)*cj5);
IkReal x991=(cj5*sj3);
IkReal x992=(cj5*r10);
IkReal x993=((1.0)*cj4);
IkReal x994=(cj5*r20);
IkReal x995=(r11*sj5);
IkReal x996=(sj3*sj5);
IkReal x997=(sj1*x985);
IkReal x998=(cj1*x984);
IkReal x999=(cj1*x985);
IkReal x1000=(sj1*x984);
IkReal x1001=((1.0)*x998);
evalcond[0]=(((sj4*x992))+(((-1.0)*x1001))+(((-1.0)*r12*x993))+(((-1.0)*x989*x995))+x997);
evalcond[1]=((((-1.0)*r22*x993))+(((-1.0)*x999))+((sj4*x994))+(((-1.0)*x1000))+(((-1.0)*x987*x989)));
evalcond[2]=((((0.12)*x987))+(((-1.0)*pz))+(((-0.12)*x994))+(((-1.0)*x984*x988))+(((0.35575)*cj1))+(((-0.35575)*x999)));
evalcond[3]=((((-1.0)*x988))+(((0.12)*x995))+(((-1.0)*py))+(((-0.12)*x992))+((x985*x988))+(((-0.35575)*x998)));
evalcond[4]=(x1000+((x986*x995))+((r10*x996))+(((-1.0)*cj3*r12*x989))+(((-1.0)*r10*x986*x990))+x999+((r11*x991)));
evalcond[5]=((((-1.0)*x1001))+((x986*x987))+(((-1.0)*cj3*r22*x989))+((r20*x996))+((r21*x991))+x997+(((-1.0)*r20*x986*x990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1002=((1.0)*r21);
CheckValue<IkReal> x1003=IKPowWithIntegerCheck(IKsign((((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)))),-1);
if(!x1003.valid){
continue;
}
CheckValue<IkReal> x1004 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1002))+(((-1.0)*r20*sj5)))),IkReal(((((-1.0)*cj4*sj5*x1002))+((r22*sj4))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1004.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1003.value)))+(x1004.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1005=IKsin(j3);
IkReal x1006=IKcos(j3);
IkReal x1007=(r02*sj4);
IkReal x1008=(cj4*cj5);
IkReal x1009=(cj4*sj5);
IkReal x1010=(cj5*r01);
IkReal x1011=(r00*sj5);
IkReal x1012=((1.0)*x1006);
IkReal x1013=((1.0)*x1005);
evalcond[0]=(((r01*x1006*x1009))+((x1005*x1010))+((x1005*x1011))+(((-1.0)*r00*x1008*x1012))+(((-1.0)*x1007*x1012)));
evalcond[1]=((((-1.0)*cj5*r21*x1012))+((r21*x1005*x1009))+(((-1.0)*r20*x1008*x1013))+(((-1.0)*r20*sj5*x1012))+(((-1.0)*r22*sj4*x1013)));
evalcond[2]=(((r11*x1005*x1009))+(((-1.0)*r10*x1008*x1013))+(((-1.0)*r12*sj4*x1013))+(((-1.0)*r10*sj5*x1012))+(((-1.0)*cj5*r11*x1012)));
evalcond[3]=((1.0)+(((-1.0)*x1011*x1012))+(((-1.0)*x1010*x1012))+((r01*x1005*x1009))+(((-1.0)*r00*x1008*x1013))+(((-1.0)*x1007*x1013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1014=((0.33731553056922)*cj5);
IkReal x1015=(r11*sj5);
IkReal x1016=(cj5*sj4);
IkReal x1017=(r21*sj5);
if( IKabs(((((0.33731553056922)*x1015))+((sj4*x1015))+(((-2.8109627547435)*py))+(((-1.0)*r10*x1014))+((cj4*r12))+(((-1.0)*r10*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.8109627547435)*pz))+(((-0.33731553056922)*x1017))+(((-1.0)*sj4*x1017))+((r20*x1014))+((r20*x1016))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.33731553056922)*x1015))+((sj4*x1015))+(((-2.8109627547435)*py))+(((-1.0)*r10*x1014))+((cj4*r12))+(((-1.0)*r10*x1016))))+IKsqr(((((2.8109627547435)*pz))+(((-0.33731553056922)*x1017))+(((-1.0)*sj4*x1017))+((r20*x1014))+((r20*x1016))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.33731553056922)*x1015))+((sj4*x1015))+(((-2.8109627547435)*py))+(((-1.0)*r10*x1014))+((cj4*r12))+(((-1.0)*r10*x1016))), ((((2.8109627547435)*pz))+(((-0.33731553056922)*x1017))+(((-1.0)*sj4*x1017))+((r20*x1014))+((r20*x1016))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1018=((1.0)*pz);
IkReal x1019=((0.35575)*cj4);
IkReal x1020=((0.35575)*sj3);
IkReal x1021=(r21*sj5);
IkReal x1022=((0.35575)*sj4);
IkReal x1023=(cj5*r10);
IkReal x1024=(r11*sj5);
IkReal x1025=(cj5*r20);
IkReal x1026=((0.12)*x1024);
IkReal x1027=((0.12)*x1023);
IkReal x1028=((0.35575)*(IKsin(j1)));
IkReal x1029=((0.12)*x1021);
IkReal x1030=((0.35575)*(IKcos(j1)));
IkReal x1031=((0.12)*x1025);
IkReal x1032=(x1018+x1031);
IkReal x1033=(x1030+x1029);
IkReal x1034=(x1027+x1028);
evalcond[0]=(x1034+(((-1.0)*x1022*x1024))+(((-1.0)*x1026))+((x1022*x1023))+py+(((-1.0)*r12*x1019)));
evalcond[1]=((((-1.0)*x1032))+x1033+((r22*x1019))+(((-1.0)*x1022*x1025))+((x1021*x1022)));
evalcond[2]=((((-1.0)*x1034))+x1026+((cj3*r22*x1022))+(((-1.0)*py))+(((-1.0)*cj5*r21*x1020))+(((-1.0)*cj3*x1019*x1021))+((cj3*x1019*x1025))+(((-1.0)*r20*sj5*x1020)));
evalcond[3]=((((-1.0)*x1032))+x1033+((r10*sj5*x1020))+((cj5*r11*x1020))+(((-1.0)*cj3*x1019*x1023))+(((-1.0)*cj3*r12*x1022))+((cj3*x1019*x1024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1035=(cj1*sj4);
IkReal x1036=(cj5*r20);
IkReal x1037=(r11*sj5);
IkReal x1038=(sj1*sj4);
IkReal x1039=(cj4*r12);
IkReal x1040=(cj5*r10);
IkReal x1041=((1.0)*cj4*r22);
IkReal x1042=((1.0)*r21*sj5);
if( IKabs(((((-1.0)*x1038*x1040))+(((-1.0)*cj1*x1041))+((sj1*x1039))+(((-1.0)*x1035*x1042))+((x1035*x1036))+((x1037*x1038)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1036*x1038))+(((-1.0)*x1038*x1042))+((x1035*x1040))+(((-1.0)*x1035*x1037))+(((-1.0)*cj1*x1039))+(((-1.0)*sj1*x1041)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1038*x1040))+(((-1.0)*cj1*x1041))+((sj1*x1039))+(((-1.0)*x1035*x1042))+((x1035*x1036))+((x1037*x1038))))+IKsqr((((x1036*x1038))+(((-1.0)*x1038*x1042))+((x1035*x1040))+(((-1.0)*x1035*x1037))+(((-1.0)*cj1*x1039))+(((-1.0)*sj1*x1041))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1038*x1040))+(((-1.0)*cj1*x1041))+((sj1*x1039))+(((-1.0)*x1035*x1042))+((x1035*x1036))+((x1037*x1038))), (((x1036*x1038))+(((-1.0)*x1038*x1042))+((x1035*x1040))+(((-1.0)*x1035*x1037))+(((-1.0)*cj1*x1039))+(((-1.0)*sj1*x1041))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1043=IKcos(j2);
IkReal x1044=IKsin(j2);
IkReal x1045=(cj3*cj4);
IkReal x1046=(r21*sj5);
IkReal x1047=((0.35575)*sj1);
IkReal x1048=((1.0)*sj4);
IkReal x1049=((1.0)*cj5);
IkReal x1050=(cj5*sj3);
IkReal x1051=(cj5*r10);
IkReal x1052=((1.0)*cj4);
IkReal x1053=(cj5*r20);
IkReal x1054=(r11*sj5);
IkReal x1055=(sj3*sj5);
IkReal x1056=(sj1*x1044);
IkReal x1057=(cj1*x1043);
IkReal x1058=(cj1*x1044);
IkReal x1059=(sj1*x1043);
IkReal x1060=((1.0)*x1057);
evalcond[0]=(x1056+(((-1.0)*r12*x1052))+(((-1.0)*x1048*x1054))+(((-1.0)*x1060))+((sj4*x1051)));
evalcond[1]=((((-1.0)*x1046*x1048))+(((-1.0)*r22*x1052))+(((-1.0)*x1058))+(((-1.0)*x1059))+((sj4*x1053)));
evalcond[2]=((((-0.35575)*x1058))+(((-1.0)*x1043*x1047))+(((-1.0)*pz))+(((-0.12)*x1053))+(((0.35575)*cj1))+(((0.12)*x1046)));
evalcond[3]=((((0.12)*x1054))+(((-0.35575)*x1057))+(((-1.0)*py))+(((-0.12)*x1051))+(((-1.0)*x1047))+((x1044*x1047)));
evalcond[4]=(((r11*x1050))+x1058+x1059+(((-1.0)*cj3*r12*x1048))+((r10*x1055))+(((-1.0)*r10*x1045*x1049))+((x1045*x1054)));
evalcond[5]=(x1056+(((-1.0)*r20*x1045*x1049))+((r20*x1055))+((r21*x1050))+(((-1.0)*cj3*r22*x1048))+(((-1.0)*x1060))+((x1045*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1061=((1.0)*sj0);
IkReal x1062=(cj4*cj5);
IkReal x1063=(cj0*r00);
IkReal x1064=((1.0)*cj5);
IkReal x1065=(cj4*sj5);
IkReal x1066=(cj0*r01);
CheckValue<IkReal> x1067 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x1063))+(((-1.0)*cj5*r11*x1061))+(((-1.0)*x1064*x1066))+(((-1.0)*r10*sj5*x1061)))),IkReal(((((-1.0)*x1065*x1066))+((r10*sj0*x1062))+((r12*sj0*sj4))+((x1062*x1063))+(((-1.0)*r11*x1061*x1065))+((cj0*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1067.valid){
continue;
}
CheckValue<IkReal> x1068=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1064)))),-1);
if(!x1068.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1067.value)+(((1.5707963267949)*(x1068.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1069=IKsin(j3);
IkReal x1070=IKcos(j3);
IkReal x1071=((1.0)*cj5);
IkReal x1072=(cj4*x1069);
IkReal x1073=((1.0)*sj5*x1070);
IkReal x1074=((1.0)*sj4*x1069);
evalcond[0]=((((-1.0)*r20*x1073))+(((-1.0)*r21*x1070*x1071))+(((-1.0)*r22*x1074))+((r21*sj5*x1072))+(((-1.0)*r20*x1071*x1072)));
evalcond[1]=(cj0+(((-1.0)*r12*x1074))+(((-1.0)*r10*x1071*x1072))+(((-1.0)*r10*x1073))+((r11*sj5*x1072))+(((-1.0)*r11*x1070*x1071)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1073))+(((-1.0)*r02*x1074))+(((-1.0)*r01*x1070*x1071))+((r01*sj5*x1072))+(((-1.0)*r00*x1071*x1072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1075=((0.33731553056922)*cj5);
IkReal x1076=(cj5*sj4);
IkReal x1077=((1.0)*cj4);
IkReal x1078=((0.33731553056922)*sj5);
IkReal x1079=((1.0)*sj4*sj5);
if( IKabs(((((-1.0)*r12*x1077))+(((-1.0)*r11*x1078))+(((-1.0)*r11*x1079))+(((2.8109627547435)*py))+((r10*x1076))+((r10*x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1078))+(((-1.0)*r21*x1079))+(((-1.0)*r22*x1077))+((r20*x1076))+((r20*x1075))+(((2.8109627547435)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1077))+(((-1.0)*r11*x1078))+(((-1.0)*r11*x1079))+(((2.8109627547435)*py))+((r10*x1076))+((r10*x1075))))+IKsqr(((((-1.0)*r21*x1078))+(((-1.0)*r21*x1079))+(((-1.0)*r22*x1077))+((r20*x1076))+((r20*x1075))+(((2.8109627547435)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1077))+(((-1.0)*r11*x1078))+(((-1.0)*r11*x1079))+(((2.8109627547435)*py))+((r10*x1076))+((r10*x1075))), ((((-1.0)*r21*x1078))+(((-1.0)*r21*x1079))+(((-1.0)*r22*x1077))+((r20*x1076))+((r20*x1075))+(((2.8109627547435)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1080=((1.0)*py);
IkReal x1081=((0.35575)*cj4);
IkReal x1082=((0.35575)*sj3);
IkReal x1083=(r21*sj5);
IkReal x1084=((0.35575)*sj4);
IkReal x1085=(cj5*r10);
IkReal x1086=(r11*sj5);
IkReal x1087=(cj5*r20);
IkReal x1088=((0.12)*x1087);
IkReal x1089=((0.12)*x1083);
IkReal x1090=((0.35575)*(IKcos(j1)));
IkReal x1091=((0.35575)*(IKsin(j1)));
IkReal x1092=((0.12)*x1086);
IkReal x1093=((0.12)*x1085);
IkReal x1094=(x1093+x1080);
IkReal x1095=(x1091+x1092);
IkReal x1096=(x1090+x1089);
evalcond[0]=(x1096+(((-1.0)*pz))+((r22*x1081))+(((-1.0)*x1084*x1087))+(((-1.0)*x1088))+((x1083*x1084)));
evalcond[1]=(x1095+((r12*x1081))+(((-1.0)*x1094))+(((-1.0)*x1084*x1085))+((x1084*x1086)));
evalcond[2]=(x1088+((cj5*r11*x1082))+(((-1.0)*x1096))+(((-1.0)*cj3*x1081*x1085))+pz+((cj3*x1081*x1086))+((r10*sj5*x1082))+(((-1.0)*cj3*r12*x1084)));
evalcond[3]=(((cj5*r21*x1082))+x1095+(((-1.0)*cj3*r22*x1084))+(((-1.0)*x1094))+(((-1.0)*cj3*x1081*x1087))+((cj3*x1081*x1083))+((r20*sj5*x1082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1097=(cj1*cj4);
IkReal x1098=((1.0)*r22);
IkReal x1099=(cj5*sj4);
IkReal x1100=((1.0)*cj1);
IkReal x1101=((1.0)*sj1);
IkReal x1102=(sj4*sj5);
if( IKabs(((((-1.0)*r11*x1101*x1102))+((r10*sj1*x1099))+(((-1.0)*x1097*x1098))+(((-1.0)*cj4*r12*x1101))+(((-1.0)*r21*x1100*x1102))+((cj1*r20*x1099)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x1102))+(((-1.0)*r21*x1101*x1102))+(((-1.0)*r10*x1099*x1100))+(((-1.0)*cj4*sj1*x1098))+((r20*sj1*x1099))+((r12*x1097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1101*x1102))+((r10*sj1*x1099))+(((-1.0)*x1097*x1098))+(((-1.0)*cj4*r12*x1101))+(((-1.0)*r21*x1100*x1102))+((cj1*r20*x1099))))+IKsqr((((cj1*r11*x1102))+(((-1.0)*r21*x1101*x1102))+(((-1.0)*r10*x1099*x1100))+(((-1.0)*cj4*sj1*x1098))+((r20*sj1*x1099))+((r12*x1097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1101*x1102))+((r10*sj1*x1099))+(((-1.0)*x1097*x1098))+(((-1.0)*cj4*r12*x1101))+(((-1.0)*r21*x1100*x1102))+((cj1*r20*x1099))), (((cj1*r11*x1102))+(((-1.0)*r21*x1101*x1102))+(((-1.0)*r10*x1099*x1100))+(((-1.0)*cj4*sj1*x1098))+((r20*sj1*x1099))+((r12*x1097))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1103=IKcos(j2);
IkReal x1104=IKsin(j2);
IkReal x1105=(cj3*cj4);
IkReal x1106=(r21*sj5);
IkReal x1107=((0.35575)*sj1);
IkReal x1108=((1.0)*sj4);
IkReal x1109=((1.0)*cj5);
IkReal x1110=(cj5*sj3);
IkReal x1111=((1.0)*sj1);
IkReal x1112=(cj5*r10);
IkReal x1113=((1.0)*cj4);
IkReal x1114=(cj5*r20);
IkReal x1115=(sj3*sj5);
IkReal x1116=((0.35575)*cj1);
IkReal x1117=(r11*sj5);
IkReal x1118=(cj1*x1103);
IkReal x1119=(x1103*x1111);
IkReal x1120=((1.0)*cj1*x1104);
IkReal x1121=(x1119+x1120);
evalcond[0]=(x1118+(((-1.0)*r12*x1113))+((sj4*x1112))+(((-1.0)*x1108*x1117))+(((-1.0)*x1104*x1111)));
evalcond[1]=((((-1.0)*r22*x1113))+((sj4*x1114))+(((-1.0)*x1121))+(((-1.0)*x1106*x1108)));
evalcond[2]=((((-1.0)*x1103*x1107))+x1116+(((-0.12)*x1114))+(((-1.0)*pz))+(((0.12)*x1106))+(((-1.0)*x1104*x1116)));
evalcond[3]=(x1107+(((-0.12)*x1112))+(((-1.0)*py))+(((0.12)*x1117))+(((-1.0)*x1104*x1107))+((x1103*x1116)));
evalcond[4]=(((r20*x1115))+((x1105*x1106))+(((-1.0)*cj3*r22*x1108))+(((-1.0)*r20*x1105*x1109))+(((-1.0)*x1118))+((sj1*x1104))+((r21*x1110)));
evalcond[5]=((((-1.0)*r10*x1105*x1109))+((x1105*x1117))+(((-1.0)*x1121))+(((-1.0)*cj3*r12*x1108))+((r11*x1110))+((r10*x1115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1122=((0.33731553056922)*cj5);
IkReal x1123=(r11*sj5);
IkReal x1124=(cj5*sj4);
IkReal x1125=(r21*sj5);
if( IKabs((((sj4*x1123))+(((-1.0)*r10*x1122))+(((-1.0)*r10*x1124))+(((-2.8109627547435)*py))+(((0.33731553056922)*x1123))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x1125))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-0.33731553056922)*x1125))+((r20*x1122))+((r20*x1124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj4*x1123))+(((-1.0)*r10*x1122))+(((-1.0)*r10*x1124))+(((-2.8109627547435)*py))+(((0.33731553056922)*x1123))+((cj4*r12))))+IKsqr(((((-1.0)*sj4*x1125))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-0.33731553056922)*x1125))+((r20*x1122))+((r20*x1124))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((sj4*x1123))+(((-1.0)*r10*x1122))+(((-1.0)*r10*x1124))+(((-2.8109627547435)*py))+(((0.33731553056922)*x1123))+((cj4*r12))), ((((-1.0)*sj4*x1125))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-0.33731553056922)*x1125))+((r20*x1122))+((r20*x1124))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1126=((1.0)*pz);
IkReal x1127=((0.35575)*cj4);
IkReal x1128=((0.35575)*sj3);
IkReal x1129=(r21*sj5);
IkReal x1130=((0.35575)*sj4);
IkReal x1131=(cj5*r10);
IkReal x1132=(r11*sj5);
IkReal x1133=(cj5*r20);
IkReal x1134=((0.12)*x1132);
IkReal x1135=((0.12)*x1131);
IkReal x1136=((0.35575)*(IKsin(j1)));
IkReal x1137=((0.12)*x1129);
IkReal x1138=((0.35575)*(IKcos(j1)));
IkReal x1139=((0.12)*x1133);
IkReal x1140=(x1126+x1139);
IkReal x1141=(x1138+x1137);
IkReal x1142=(x1136+x1135);
evalcond[0]=(x1142+(((-1.0)*r12*x1127))+((x1130*x1131))+(((-1.0)*x1130*x1132))+(((-1.0)*x1134))+py);
evalcond[1]=(x1141+((x1129*x1130))+(((-1.0)*x1130*x1133))+(((-1.0)*x1140))+((r22*x1127)));
evalcond[2]=((((-1.0)*cj5*r21*x1128))+((cj3*r22*x1130))+x1134+(((-1.0)*x1142))+(((-1.0)*r20*sj5*x1128))+(((-1.0)*cj3*x1127*x1129))+(((-1.0)*py))+((cj3*x1127*x1133)));
evalcond[3]=(((r10*sj5*x1128))+x1141+((cj5*r11*x1128))+(((-1.0)*x1140))+(((-1.0)*cj3*x1127*x1131))+(((-1.0)*cj3*r12*x1130))+((cj3*x1127*x1132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1143=(cj1*sj4);
IkReal x1144=(cj5*r20);
IkReal x1145=(r11*sj5);
IkReal x1146=(sj1*sj4);
IkReal x1147=(cj4*r12);
IkReal x1148=(cj5*r10);
IkReal x1149=((1.0)*cj4*r22);
IkReal x1150=((1.0)*r21*sj5);
if( IKabs((((x1145*x1146))+((x1143*x1144))+(((-1.0)*cj1*x1149))+(((-1.0)*x1143*x1150))+((sj1*x1147))+(((-1.0)*x1146*x1148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1143*x1148))+(((-1.0)*cj1*x1147))+(((-1.0)*x1146*x1150))+(((-1.0)*sj1*x1149))+((x1144*x1146))+(((-1.0)*x1143*x1145)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1145*x1146))+((x1143*x1144))+(((-1.0)*cj1*x1149))+(((-1.0)*x1143*x1150))+((sj1*x1147))+(((-1.0)*x1146*x1148))))+IKsqr((((x1143*x1148))+(((-1.0)*cj1*x1147))+(((-1.0)*x1146*x1150))+(((-1.0)*sj1*x1149))+((x1144*x1146))+(((-1.0)*x1143*x1145))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1145*x1146))+((x1143*x1144))+(((-1.0)*cj1*x1149))+(((-1.0)*x1143*x1150))+((sj1*x1147))+(((-1.0)*x1146*x1148))), (((x1143*x1148))+(((-1.0)*cj1*x1147))+(((-1.0)*x1146*x1150))+(((-1.0)*sj1*x1149))+((x1144*x1146))+(((-1.0)*x1143*x1145))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1151=IKcos(j2);
IkReal x1152=IKsin(j2);
IkReal x1153=(cj3*cj4);
IkReal x1154=(r21*sj5);
IkReal x1155=((0.35575)*sj1);
IkReal x1156=((1.0)*sj4);
IkReal x1157=((1.0)*cj5);
IkReal x1158=(cj5*sj3);
IkReal x1159=(cj5*r10);
IkReal x1160=((1.0)*cj4);
IkReal x1161=(cj5*r20);
IkReal x1162=(r11*sj5);
IkReal x1163=(sj3*sj5);
IkReal x1164=(sj1*x1152);
IkReal x1165=(cj1*x1151);
IkReal x1166=(cj1*x1152);
IkReal x1167=(sj1*x1151);
IkReal x1168=((1.0)*x1165);
evalcond[0]=((((-1.0)*x1156*x1162))+x1164+(((-1.0)*r12*x1160))+(((-1.0)*x1168))+((sj4*x1159)));
evalcond[1]=((((-1.0)*x1154*x1156))+((sj4*x1161))+(((-1.0)*r22*x1160))+(((-1.0)*x1167))+(((-1.0)*x1166)));
evalcond[2]=((((-1.0)*pz))+(((0.12)*x1154))+(((-0.12)*x1161))+(((0.35575)*cj1))+(((-0.35575)*x1166))+(((-1.0)*x1151*x1155)));
evalcond[3]=((((-1.0)*x1155))+(((-0.12)*x1159))+(((0.12)*x1162))+((x1152*x1155))+(((-1.0)*py))+(((-0.35575)*x1165)));
evalcond[4]=(x1166+x1167+((r11*x1158))+(((-1.0)*cj3*r12*x1156))+((x1153*x1162))+((r10*x1163))+(((-1.0)*r10*x1153*x1157)));
evalcond[5]=(x1164+((r20*x1163))+((x1153*x1154))+(((-1.0)*r20*x1153*x1157))+(((-1.0)*x1168))+((r21*x1158))+(((-1.0)*cj3*r22*x1156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1169=((0.33731553056922)*cj5);
IkReal x1170=(r01*sj5);
IkReal x1171=(cj5*sj4);
IkReal x1172=((1.0)*cj4);
IkReal x1173=((1.0)*sj4);
IkReal x1174=(r21*sj5);
if( IKabs(((((-1.0)*r02*x1172))+((r00*x1169))+((r00*x1171))+(((2.8109627547435)*px))+(((-0.33731553056922)*x1170))+(((-1.0)*x1170*x1173)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x1171))+(((-1.0)*x1173*x1174))+((r20*x1169))+(((2.8109627547435)*pz))+(((-1.0)*r22*x1172))+(((-0.33731553056922)*x1174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x1172))+((r00*x1169))+((r00*x1171))+(((2.8109627547435)*px))+(((-0.33731553056922)*x1170))+(((-1.0)*x1170*x1173))))+IKsqr((((r20*x1171))+(((-1.0)*x1173*x1174))+((r20*x1169))+(((2.8109627547435)*pz))+(((-1.0)*r22*x1172))+(((-0.33731553056922)*x1174))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x1172))+((r00*x1169))+((r00*x1171))+(((2.8109627547435)*px))+(((-0.33731553056922)*x1170))+(((-1.0)*x1170*x1173))), (((r20*x1171))+(((-1.0)*x1173*x1174))+((r20*x1169))+(((2.8109627547435)*pz))+(((-1.0)*r22*x1172))+(((-0.33731553056922)*x1174))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1175=((1.0)*px);
IkReal x1176=((0.35575)*r21);
IkReal x1177=(cj5*sj3);
IkReal x1178=(sj4*sj5);
IkReal x1179=((0.35575)*cj4);
IkReal x1180=((0.35575)*r01);
IkReal x1181=((0.12)*cj5);
IkReal x1182=((0.12)*sj5);
IkReal x1183=(cj5*r00);
IkReal x1184=((0.35575)*sj4);
IkReal x1185=(cj5*r20);
IkReal x1186=(r20*x1181);
IkReal x1187=(r21*x1182);
IkReal x1188=((0.35575)*(IKcos(j1)));
IkReal x1189=((0.35575)*(IKsin(j1)));
IkReal x1190=(r01*x1182);
IkReal x1191=(r00*x1181);
IkReal x1192=(cj3*cj4*sj5);
IkReal x1193=(cj3*x1184);
IkReal x1194=((0.35575)*sj3*sj5);
IkReal x1195=(x1191+x1175);
IkReal x1196=(x1188+x1187);
IkReal x1197=(x1189+x1190);
evalcond[0]=(x1196+((x1176*x1178))+(((-1.0)*pz))+(((-1.0)*x1184*x1185))+(((-1.0)*x1186))+((r22*x1179)));
evalcond[1]=(((r02*x1179))+x1197+((x1178*x1180))+(((-1.0)*x1195))+(((-1.0)*x1183*x1184)));
evalcond[2]=(x1186+((r00*x1194))+((x1177*x1180))+(((-1.0)*x1196))+(((-1.0)*cj3*x1179*x1183))+pz+((cj3*r01*sj5*x1179))+(((-1.0)*r02*x1193)));
evalcond[3]=(x1197+((x1176*x1192))+(((-1.0)*x1195))+((x1176*x1177))+(((-1.0)*r22*x1193))+(((-1.0)*cj3*x1179*x1185))+((r20*x1194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1198=((1.0)*cj1);
IkReal x1199=(cj4*r22);
IkReal x1200=(cj5*sj4);
IkReal x1201=(sj4*sj5);
IkReal x1202=((1.0)*sj1);
IkReal x1203=(cj4*r02);
if( IKabs(((((-1.0)*x1198*x1199))+(((-1.0)*r21*x1198*x1201))+((cj1*r20*x1200))+(((-1.0)*x1202*x1203))+((r00*sj1*x1200))+(((-1.0)*r01*x1201*x1202)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x1201))+(((-1.0)*x1199*x1202))+(((-1.0)*r21*x1201*x1202))+(((-1.0)*r00*x1198*x1200))+((cj1*x1203))+((r20*sj1*x1200)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1198*x1199))+(((-1.0)*r21*x1198*x1201))+((cj1*r20*x1200))+(((-1.0)*x1202*x1203))+((r00*sj1*x1200))+(((-1.0)*r01*x1201*x1202))))+IKsqr((((cj1*r01*x1201))+(((-1.0)*x1199*x1202))+(((-1.0)*r21*x1201*x1202))+(((-1.0)*r00*x1198*x1200))+((cj1*x1203))+((r20*sj1*x1200))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1198*x1199))+(((-1.0)*r21*x1198*x1201))+((cj1*r20*x1200))+(((-1.0)*x1202*x1203))+((r00*sj1*x1200))+(((-1.0)*r01*x1201*x1202))), (((cj1*r01*x1201))+(((-1.0)*x1199*x1202))+(((-1.0)*r21*x1201*x1202))+(((-1.0)*r00*x1198*x1200))+((cj1*x1203))+((r20*sj1*x1200))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1204=IKcos(j2);
IkReal x1205=IKsin(j2);
IkReal x1206=((1.0)*cj3);
IkReal x1207=(cj5*r00);
IkReal x1208=((0.35575)*sj1);
IkReal x1209=(cj5*sj3);
IkReal x1210=((1.0)*cj4);
IkReal x1211=(cj5*r20);
IkReal x1212=((1.0)*sj1);
IkReal x1213=(sj3*sj5);
IkReal x1214=((0.12)*sj5);
IkReal x1215=((0.35575)*cj1);
IkReal x1216=(cj1*x1204);
IkReal x1217=(cj3*cj4*sj5);
IkReal x1218=((1.0)*sj4*sj5);
IkReal x1219=(x1204*x1212);
IkReal x1220=((1.0)*cj1*x1205);
IkReal x1221=(x1220+x1219);
evalcond[0]=(x1216+(((-1.0)*r02*x1210))+((sj4*x1207))+(((-1.0)*r01*x1218))+(((-1.0)*x1205*x1212)));
evalcond[1]=(((sj4*x1211))+(((-1.0)*x1221))+(((-1.0)*r22*x1210))+(((-1.0)*r21*x1218)));
evalcond[2]=((((-1.0)*x1204*x1208))+x1215+(((-0.12)*x1211))+(((-1.0)*pz))+(((-1.0)*x1205*x1215))+((r21*x1214)));
evalcond[3]=(x1208+((x1204*x1215))+((r01*x1214))+(((-1.0)*px))+(((-1.0)*x1205*x1208))+(((-0.12)*x1207)));
evalcond[4]=(((r21*x1209))+((sj1*x1205))+((r20*x1213))+(((-1.0)*r22*sj4*x1206))+((r21*x1217))+(((-1.0)*cj4*x1206*x1211))+(((-1.0)*x1216)));
evalcond[5]=((((-1.0)*x1221))+((r00*x1213))+((r01*x1217))+(((-1.0)*cj4*x1206*x1207))+((r01*x1209))+(((-1.0)*r02*sj4*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1222=((0.33731553056922)*cj5);
IkReal x1223=(r01*sj5);
IkReal x1224=((1.0)*sj4);
IkReal x1225=(r21*sj5);
if( IKabs(((((0.33731553056922)*x1223))+(((-1.0)*r00*x1222))+(((-2.8109627547435)*px))+((sj4*x1223))+(((-1.0)*cj5*r00*x1224))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-0.33731553056922)*x1225))+((r20*x1222))+(((-1.0)*x1224*x1225))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((0.33731553056922)*x1223))+(((-1.0)*r00*x1222))+(((-2.8109627547435)*px))+((sj4*x1223))+(((-1.0)*cj5*r00*x1224))+((cj4*r02))))+IKsqr(((((-0.33731553056922)*x1225))+((r20*x1222))+(((-1.0)*x1224*x1225))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((0.33731553056922)*x1223))+(((-1.0)*r00*x1222))+(((-2.8109627547435)*px))+((sj4*x1223))+(((-1.0)*cj5*r00*x1224))+((cj4*r02))), ((((-0.33731553056922)*x1225))+((r20*x1222))+(((-1.0)*x1224*x1225))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1226=((1.0)*pz);
IkReal x1227=((0.35575)*r21);
IkReal x1228=(cj5*sj3);
IkReal x1229=((0.35575)*r22);
IkReal x1230=(cj3*sj4);
IkReal x1231=(sj4*sj5);
IkReal x1232=((0.35575)*r02);
IkReal x1233=((0.35575)*r01);
IkReal x1234=((0.12)*cj5);
IkReal x1235=((0.12)*sj5);
IkReal x1236=(cj3*cj4);
IkReal x1237=(r01*x1235);
IkReal x1238=((0.35575)*(IKsin(j1)));
IkReal x1239=(r00*x1234);
IkReal x1240=(r21*x1235);
IkReal x1241=((0.35575)*(IKcos(j1)));
IkReal x1242=(r20*x1234);
IkReal x1243=(sj5*x1236);
IkReal x1244=((0.35575)*sj3*sj5);
IkReal x1245=((0.35575)*cj5*r00);
IkReal x1246=((0.35575)*cj5*r20);
IkReal x1247=(x1242+x1226);
IkReal x1248=(x1241+x1240);
IkReal x1249=(x1238+x1239);
evalcond[0]=(x1249+(((-1.0)*x1237))+(((-1.0)*cj4*x1232))+px+(((-1.0)*x1231*x1233))+((sj4*x1245)));
evalcond[1]=(x1248+(((-1.0)*x1247))+((cj4*x1229))+((x1227*x1231))+(((-1.0)*sj4*x1246)));
evalcond[2]=(x1237+((x1236*x1246))+(((-1.0)*x1227*x1228))+(((-1.0)*x1249))+(((-1.0)*r20*x1244))+(((-1.0)*px))+(((-1.0)*x1227*x1243))+((x1229*x1230)));
evalcond[3]=(x1248+(((-1.0)*x1230*x1232))+(((-1.0)*x1236*x1245))+((x1233*x1243))+((r00*x1244))+(((-1.0)*x1247))+((x1228*x1233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1250=(sj1*sj4);
IkReal x1251=(r01*sj5);
IkReal x1252=((1.0)*cj1);
IkReal x1253=(cj4*r22);
IkReal x1254=(cj4*r02);
IkReal x1255=(cj5*r20);
IkReal x1256=(cj1*sj4);
IkReal x1257=(cj5*r00);
IkReal x1258=(r21*sj5);
if( IKabs((((sj1*x1254))+(((-1.0)*x1252*x1253))+((x1250*x1251))+((x1255*x1256))+(((-1.0)*sj4*x1252*x1258))+(((-1.0)*x1250*x1257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1256*x1257))+(((-1.0)*x1252*x1254))+((x1250*x1255))+(((-1.0)*sj1*x1253))+(((-1.0)*sj4*x1251*x1252))+(((-1.0)*x1250*x1258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1254))+(((-1.0)*x1252*x1253))+((x1250*x1251))+((x1255*x1256))+(((-1.0)*sj4*x1252*x1258))+(((-1.0)*x1250*x1257))))+IKsqr((((x1256*x1257))+(((-1.0)*x1252*x1254))+((x1250*x1255))+(((-1.0)*sj1*x1253))+(((-1.0)*sj4*x1251*x1252))+(((-1.0)*x1250*x1258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1254))+(((-1.0)*x1252*x1253))+((x1250*x1251))+((x1255*x1256))+(((-1.0)*sj4*x1252*x1258))+(((-1.0)*x1250*x1257))), (((x1256*x1257))+(((-1.0)*x1252*x1254))+((x1250*x1255))+(((-1.0)*sj1*x1253))+(((-1.0)*sj4*x1251*x1252))+(((-1.0)*x1250*x1258))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1259=IKcos(j2);
IkReal x1260=IKsin(j2);
IkReal x1261=(cj3*cj4);
IkReal x1262=(r21*sj5);
IkReal x1263=(cj5*r00);
IkReal x1264=((0.35575)*sj1);
IkReal x1265=(r01*sj5);
IkReal x1266=((1.0)*sj4);
IkReal x1267=(cj5*sj3);
IkReal x1268=((1.0)*cj4);
IkReal x1269=(cj5*r20);
IkReal x1270=(sj3*sj5);
IkReal x1271=(sj1*x1260);
IkReal x1272=(cj1*x1260);
IkReal x1273=(cj1*x1259);
IkReal x1274=(sj1*x1259);
IkReal x1275=((1.0)*x1273);
evalcond[0]=(x1271+(((-1.0)*x1275))+((sj4*x1263))+(((-1.0)*x1265*x1266))+(((-1.0)*r02*x1268)));
evalcond[1]=((((-1.0)*r22*x1268))+((sj4*x1269))+(((-1.0)*x1262*x1266))+(((-1.0)*x1272))+(((-1.0)*x1274)));
evalcond[2]=((((-0.12)*x1269))+(((-1.0)*pz))+(((0.12)*x1262))+(((0.35575)*cj1))+(((-0.35575)*x1272))+(((-1.0)*x1259*x1264)));
evalcond[3]=((((-0.12)*x1263))+(((-1.0)*px))+((x1260*x1264))+(((0.12)*x1265))+(((-0.35575)*x1273))+(((-1.0)*x1264)));
evalcond[4]=((((-1.0)*cj3*r02*x1266))+x1272+x1274+((x1261*x1265))+((r00*x1270))+((r01*x1267))+(((-1.0)*x1261*x1263)));
evalcond[5]=(x1271+(((-1.0)*x1275))+((x1261*x1262))+((r21*x1267))+(((-1.0)*cj3*r22*x1266))+((r20*x1270))+(((-1.0)*x1261*x1269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1276=((0.35575)*cj0);
IkReal x1277=(r01*sj5);
IkReal x1278=((0.12)*cj0);
IkReal x1279=(cj5*r00);
IkReal x1280=(cj5*r20);
IkReal x1281=(r21*sj5);
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(cj0,-2);
if(!x1282.valid){
continue;
}
if( IKabs(((-2.8109627547435)*(x1282.value)*((((x1277*x1278))+((cj4*r02*x1276))+(((-1.0)*sj4*x1276*x1279))+(((-1.0)*x1278*x1279))+((sj4*x1276*x1277))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x1280))+(((-0.33731553056922)*x1281))+(((0.33731553056922)*x1280))+(((2.8109627547435)*pz))+(((-1.0)*sj4*x1281))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.8109627547435)*(x1282.value)*((((x1277*x1278))+((cj4*r02*x1276))+(((-1.0)*sj4*x1276*x1279))+(((-1.0)*x1278*x1279))+((sj4*x1276*x1277))+(((-1.0)*cj0*px))))))+IKsqr((((sj4*x1280))+(((-0.33731553056922)*x1281))+(((0.33731553056922)*x1280))+(((2.8109627547435)*pz))+(((-1.0)*sj4*x1281))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.8109627547435)*(x1282.value)*((((x1277*x1278))+((cj4*r02*x1276))+(((-1.0)*sj4*x1276*x1279))+(((-1.0)*x1278*x1279))+((sj4*x1276*x1277))+(((-1.0)*cj0*px))))), (((sj4*x1280))+(((-0.33731553056922)*x1281))+(((0.33731553056922)*x1280))+(((2.8109627547435)*pz))+(((-1.0)*sj4*x1281))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1283=IKsin(j1);
IkReal x1284=IKcos(j1);
IkReal x1285=((0.35575)*cj0);
IkReal x1286=(cj4*r02);
IkReal x1287=((1.0)*py);
IkReal x1288=((0.35575)*sj0);
IkReal x1289=(sj3*sj5);
IkReal x1290=(r21*sj5);
IkReal x1291=((0.12)*sj0);
IkReal x1292=(sj4*sj5);
IkReal x1293=(cj5*sj4);
IkReal x1294=((0.35575)*sj4);
IkReal x1295=((0.35575)*r10);
IkReal x1296=((0.35575)*r00);
IkReal x1297=(cj5*r10);
IkReal x1298=(cj4*r12);
IkReal x1299=((0.35575)*cj4);
IkReal x1300=(cj5*sj3);
IkReal x1301=(cj5*r20);
IkReal x1302=(cj3*cj4);
IkReal x1303=((1.0)*px);
IkReal x1304=(cj5*r00);
IkReal x1305=(r11*sj5);
IkReal x1306=(r01*sj5);
IkReal x1307=((0.12)*cj0*cj5);
IkReal x1308=((0.35575)*x1283);
IkReal x1309=((0.12)*cj0*sj5);
IkReal x1310=(cj3*r22*sj4);
IkReal x1311=(sj0*x1283*x1285);
evalcond[0]=((((0.12)*x1290))+(((-0.12)*x1301))+(((0.35575)*x1284))+((x1290*x1294))+(((-1.0)*pz))+(((-0.35575)*r20*x1293))+((r22*x1299)));
evalcond[1]=(((x1291*x1305))+((r11*x1288*x1292))+((x1288*x1298))+((sj0*x1283*x1288))+(((-1.0)*x1291*x1297))+(((-1.0)*sj0*x1287))+(((-1.0)*r10*x1288*x1293)));
evalcond[2]=(((r01*x1285*x1292))+((x1285*x1286))+(((-1.0)*r00*x1285*x1293))+(((-0.12)*cj0*x1304))+(((-1.0)*cj0*x1303))+((cj0*x1283*x1285))+(((0.12)*cj0*x1306)));
evalcond[3]=((((0.35575)*r11*x1300))+(((-1.0)*cj5*x1295*x1302))+((x1291*x1301))+(((-1.0)*x1284*x1288))+((cj3*x1299*x1305))+(((-1.0)*x1290*x1291))+(((-1.0)*cj3*r12*x1294))+((pz*sj0))+((x1289*x1295)));
evalcond[4]=((((-1.0)*cj3*r02*x1294))+(((-1.0)*cj5*x1296*x1302))+(((0.35575)*r01*x1300))+(((-1.0)*x1284*x1285))+(((-0.12)*cj0*x1290))+((cj3*x1299*x1306))+(((0.12)*cj0*x1301))+((cj0*pz))+((x1289*x1296)));
evalcond[5]=((((-1.0)*x1288*x1301*x1302))+((x1288*x1290*x1302))+((r20*x1288*x1289))+((x1283*x1288))+(((-1.0)*x1288*x1310))+(((-0.12)*x1297))+((r21*x1288*x1300))+(((-1.0)*x1287))+(((0.12)*x1305)));
evalcond[6]=((((-1.0)*x1285*x1301*x1302))+(((-0.12)*x1304))+(((-1.0)*x1285*x1310))+((r20*x1285*x1289))+(((-1.0)*x1303))+((x1283*x1285))+((r21*x1285*x1300))+((x1285*x1290*x1302))+(((0.12)*x1306)));
evalcond[7]=(((x1291*x1306))+x1311+(((-1.0)*sj0*x1303))+(((-1.0)*x1291*x1304))+((x1285*x1298))+((r11*x1285*x1292))+(((-1.0)*r10*x1285*x1293)));
evalcond[8]=(x1311+(((-1.0)*r00*x1288*x1293))+(((-0.12)*cj0*x1297))+((r01*x1288*x1292))+((x1286*x1288))+(((-1.0)*cj0*x1287))+(((0.12)*cj0*x1305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1312=((1.0)*cj1);
IkReal x1313=(cj4*r22);
IkReal x1314=(cj5*sj4);
IkReal x1315=(sj4*sj5);
IkReal x1316=((1.0)*sj1);
IkReal x1317=(cj4*r02);
if( IKabs(((((-1.0)*r01*x1315*x1316))+(((-1.0)*r21*x1312*x1315))+((cj1*r20*x1314))+((r00*sj1*x1314))+(((-1.0)*x1316*x1317))+(((-1.0)*x1312*x1313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1313*x1316))+((r20*sj1*x1314))+(((-1.0)*r00*x1312*x1314))+(((-1.0)*r21*x1315*x1316))+((cj1*r01*x1315))+((cj1*x1317)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1315*x1316))+(((-1.0)*r21*x1312*x1315))+((cj1*r20*x1314))+((r00*sj1*x1314))+(((-1.0)*x1316*x1317))+(((-1.0)*x1312*x1313))))+IKsqr(((((-1.0)*x1313*x1316))+((r20*sj1*x1314))+(((-1.0)*r00*x1312*x1314))+(((-1.0)*r21*x1315*x1316))+((cj1*r01*x1315))+((cj1*x1317))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1315*x1316))+(((-1.0)*r21*x1312*x1315))+((cj1*r20*x1314))+((r00*sj1*x1314))+(((-1.0)*x1316*x1317))+(((-1.0)*x1312*x1313))), ((((-1.0)*x1313*x1316))+((r20*sj1*x1314))+(((-1.0)*r00*x1312*x1314))+(((-1.0)*r21*x1315*x1316))+((cj1*r01*x1315))+((cj1*x1317))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1318=IKcos(j2);
IkReal x1319=IKsin(j2);
IkReal x1320=((1.0)*cj3);
IkReal x1321=(cj5*r00);
IkReal x1322=((0.35575)*sj1);
IkReal x1323=(cj5*sj3);
IkReal x1324=((1.0)*cj4);
IkReal x1325=(cj5*r20);
IkReal x1326=((1.0)*sj1);
IkReal x1327=(sj3*sj5);
IkReal x1328=((0.12)*sj5);
IkReal x1329=((0.35575)*cj1);
IkReal x1330=(cj1*x1318);
IkReal x1331=(cj3*cj4*sj5);
IkReal x1332=((1.0)*sj4*sj5);
IkReal x1333=(x1318*x1326);
IkReal x1334=((1.0)*cj1*x1319);
IkReal x1335=(x1334+x1333);
evalcond[0]=(x1330+(((-1.0)*x1319*x1326))+(((-1.0)*r02*x1324))+((sj4*x1321))+(((-1.0)*r01*x1332)));
evalcond[1]=((((-1.0)*r22*x1324))+((sj4*x1325))+(((-1.0)*r21*x1332))+(((-1.0)*x1335)));
evalcond[2]=(x1329+(((-1.0)*x1319*x1329))+(((-0.12)*x1325))+(((-1.0)*pz))+((r21*x1328))+(((-1.0)*x1318*x1322)));
evalcond[3]=(x1322+(((-1.0)*x1319*x1322))+((r01*x1328))+(((-0.12)*x1321))+(((-1.0)*px))+((x1318*x1329)));
evalcond[4]=((((-1.0)*x1330))+(((-1.0)*r22*sj4*x1320))+((r21*x1331))+((r21*x1323))+(((-1.0)*cj4*x1320*x1325))+((r20*x1327))+((sj1*x1319)));
evalcond[5]=(((r01*x1323))+((r00*x1327))+((r01*x1331))+(((-1.0)*cj4*x1320*x1321))+(((-1.0)*r02*sj4*x1320))+(((-1.0)*x1335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1336=(sj1*sj4);
IkReal x1337=(r01*sj5);
IkReal x1338=((1.0)*cj1);
IkReal x1339=(cj4*r22);
IkReal x1340=(cj4*r02);
IkReal x1341=(cj5*r20);
IkReal x1342=(cj1*sj4);
IkReal x1343=(cj5*r00);
IkReal x1344=(r21*sj5);
if( IKabs(((((-1.0)*sj4*x1338*x1344))+((sj1*x1340))+((x1336*x1337))+(((-1.0)*x1336*x1343))+((x1341*x1342))+(((-1.0)*x1338*x1339)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1338*x1340))+(((-1.0)*x1336*x1344))+(((-1.0)*sj1*x1339))+((x1342*x1343))+((x1336*x1341))+(((-1.0)*sj4*x1337*x1338)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1338*x1344))+((sj1*x1340))+((x1336*x1337))+(((-1.0)*x1336*x1343))+((x1341*x1342))+(((-1.0)*x1338*x1339))))+IKsqr(((((-1.0)*x1338*x1340))+(((-1.0)*x1336*x1344))+(((-1.0)*sj1*x1339))+((x1342*x1343))+((x1336*x1341))+(((-1.0)*sj4*x1337*x1338))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x1338*x1344))+((sj1*x1340))+((x1336*x1337))+(((-1.0)*x1336*x1343))+((x1341*x1342))+(((-1.0)*x1338*x1339))), ((((-1.0)*x1338*x1340))+(((-1.0)*x1336*x1344))+(((-1.0)*sj1*x1339))+((x1342*x1343))+((x1336*x1341))+(((-1.0)*sj4*x1337*x1338))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1345=IKcos(j2);
IkReal x1346=IKsin(j2);
IkReal x1347=(cj3*cj4);
IkReal x1348=(r21*sj5);
IkReal x1349=(cj5*r00);
IkReal x1350=((0.35575)*sj1);
IkReal x1351=(r01*sj5);
IkReal x1352=((1.0)*sj4);
IkReal x1353=(cj5*sj3);
IkReal x1354=((1.0)*cj4);
IkReal x1355=(cj5*r20);
IkReal x1356=(sj3*sj5);
IkReal x1357=(sj1*x1346);
IkReal x1358=(cj1*x1346);
IkReal x1359=(cj1*x1345);
IkReal x1360=(sj1*x1345);
IkReal x1361=((1.0)*x1359);
evalcond[0]=(x1357+(((-1.0)*r02*x1354))+((sj4*x1349))+(((-1.0)*x1351*x1352))+(((-1.0)*x1361)));
evalcond[1]=((((-1.0)*x1358))+(((-1.0)*x1360))+((sj4*x1355))+(((-1.0)*r22*x1354))+(((-1.0)*x1348*x1352)));
evalcond[2]=((((-0.12)*x1355))+(((0.12)*x1348))+(((-1.0)*x1345*x1350))+(((-1.0)*pz))+(((0.35575)*cj1))+(((-0.35575)*x1358)));
evalcond[3]=((((-1.0)*x1350))+(((-1.0)*px))+((x1346*x1350))+(((-0.35575)*x1359))+(((-0.12)*x1349))+(((0.12)*x1351)));
evalcond[4]=(x1358+x1360+(((-1.0)*x1347*x1349))+(((-1.0)*cj3*r02*x1352))+((x1347*x1351))+((r00*x1356))+((r01*x1353)));
evalcond[5]=(x1357+(((-1.0)*cj3*r22*x1352))+(((-1.0)*x1347*x1355))+((x1347*x1348))+((r20*x1356))+((r21*x1353))+(((-1.0)*x1361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1362=(cj1*cj4);
IkReal x1363=((1.0)*r22);
IkReal x1364=(cj5*sj4);
IkReal x1365=((1.0)*cj1);
IkReal x1366=((1.0)*sj1);
IkReal x1367=(sj4*sj5);
if( IKabs((((cj1*r20*x1364))+(((-1.0)*cj4*r12*x1366))+((r10*sj1*x1364))+(((-1.0)*x1362*x1363))+(((-1.0)*r11*x1366*x1367))+(((-1.0)*r21*x1365*x1367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x1367))+(((-1.0)*cj4*sj1*x1363))+((r12*x1362))+((r20*sj1*x1364))+(((-1.0)*r10*x1364*x1365))+(((-1.0)*r21*x1366*x1367)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1364))+(((-1.0)*cj4*r12*x1366))+((r10*sj1*x1364))+(((-1.0)*x1362*x1363))+(((-1.0)*r11*x1366*x1367))+(((-1.0)*r21*x1365*x1367))))+IKsqr((((cj1*r11*x1367))+(((-1.0)*cj4*sj1*x1363))+((r12*x1362))+((r20*sj1*x1364))+(((-1.0)*r10*x1364*x1365))+(((-1.0)*r21*x1366*x1367))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1364))+(((-1.0)*cj4*r12*x1366))+((r10*sj1*x1364))+(((-1.0)*x1362*x1363))+(((-1.0)*r11*x1366*x1367))+(((-1.0)*r21*x1365*x1367))), (((cj1*r11*x1367))+(((-1.0)*cj4*sj1*x1363))+((r12*x1362))+((r20*sj1*x1364))+(((-1.0)*r10*x1364*x1365))+(((-1.0)*r21*x1366*x1367))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1368=IKcos(j2);
IkReal x1369=IKsin(j2);
IkReal x1370=(cj3*cj4);
IkReal x1371=(r21*sj5);
IkReal x1372=((0.35575)*sj1);
IkReal x1373=((1.0)*sj4);
IkReal x1374=((1.0)*cj5);
IkReal x1375=(cj5*sj3);
IkReal x1376=((1.0)*sj1);
IkReal x1377=(cj5*r10);
IkReal x1378=((1.0)*cj4);
IkReal x1379=(cj5*r20);
IkReal x1380=(sj3*sj5);
IkReal x1381=((0.35575)*cj1);
IkReal x1382=(r11*sj5);
IkReal x1383=(cj1*x1368);
IkReal x1384=(x1368*x1376);
IkReal x1385=((1.0)*cj1*x1369);
IkReal x1386=(x1384+x1385);
evalcond[0]=(x1383+(((-1.0)*x1373*x1382))+(((-1.0)*r12*x1378))+((sj4*x1377))+(((-1.0)*x1369*x1376)));
evalcond[1]=((((-1.0)*x1386))+(((-1.0)*x1371*x1373))+(((-1.0)*r22*x1378))+((sj4*x1379)));
evalcond[2]=(x1381+(((-0.12)*x1379))+(((-1.0)*pz))+(((-1.0)*x1369*x1381))+(((0.12)*x1371))+(((-1.0)*x1368*x1372)));
evalcond[3]=(x1372+(((-0.12)*x1377))+(((0.12)*x1382))+(((-1.0)*py))+(((-1.0)*x1369*x1372))+((x1368*x1381)));
evalcond[4]=((((-1.0)*cj3*r22*x1373))+((sj1*x1369))+(((-1.0)*r20*x1370*x1374))+((r20*x1380))+((r21*x1375))+((x1370*x1371))+(((-1.0)*x1383)));
evalcond[5]=((((-1.0)*x1386))+((r10*x1380))+((x1370*x1382))+((r11*x1375))+(((-1.0)*cj3*r12*x1373))+(((-1.0)*r10*x1370*x1374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1387=(cj1*sj4);
IkReal x1388=(cj5*r20);
IkReal x1389=(r11*sj5);
IkReal x1390=(sj1*sj4);
IkReal x1391=(cj4*r12);
IkReal x1392=(cj5*r10);
IkReal x1393=((1.0)*cj4*r22);
IkReal x1394=((1.0)*r21*sj5);
if( IKabs(((((-1.0)*x1390*x1392))+((x1387*x1388))+((sj1*x1391))+(((-1.0)*cj1*x1393))+((x1389*x1390))+(((-1.0)*x1387*x1394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1388*x1390))+(((-1.0)*x1387*x1389))+(((-1.0)*cj1*x1391))+(((-1.0)*x1390*x1394))+((x1387*x1392))+(((-1.0)*sj1*x1393)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1390*x1392))+((x1387*x1388))+((sj1*x1391))+(((-1.0)*cj1*x1393))+((x1389*x1390))+(((-1.0)*x1387*x1394))))+IKsqr((((x1388*x1390))+(((-1.0)*x1387*x1389))+(((-1.0)*cj1*x1391))+(((-1.0)*x1390*x1394))+((x1387*x1392))+(((-1.0)*sj1*x1393))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1390*x1392))+((x1387*x1388))+((sj1*x1391))+(((-1.0)*cj1*x1393))+((x1389*x1390))+(((-1.0)*x1387*x1394))), (((x1388*x1390))+(((-1.0)*x1387*x1389))+(((-1.0)*cj1*x1391))+(((-1.0)*x1390*x1394))+((x1387*x1392))+(((-1.0)*sj1*x1393))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1395=IKcos(j2);
IkReal x1396=IKsin(j2);
IkReal x1397=(cj3*cj4);
IkReal x1398=(r21*sj5);
IkReal x1399=((0.35575)*sj1);
IkReal x1400=((1.0)*sj4);
IkReal x1401=((1.0)*cj5);
IkReal x1402=(cj5*sj3);
IkReal x1403=(cj5*r10);
IkReal x1404=((1.0)*cj4);
IkReal x1405=(cj5*r20);
IkReal x1406=(r11*sj5);
IkReal x1407=(sj3*sj5);
IkReal x1408=(sj1*x1396);
IkReal x1409=(cj1*x1395);
IkReal x1410=(cj1*x1396);
IkReal x1411=(sj1*x1395);
IkReal x1412=((1.0)*x1409);
evalcond[0]=((((-1.0)*r12*x1404))+(((-1.0)*x1412))+x1408+(((-1.0)*x1400*x1406))+((sj4*x1403)));
evalcond[1]=((((-1.0)*x1398*x1400))+(((-1.0)*r22*x1404))+((sj4*x1405))+(((-1.0)*x1410))+(((-1.0)*x1411)));
evalcond[2]=((((0.12)*x1398))+(((-1.0)*x1395*x1399))+(((-0.35575)*x1410))+(((-0.12)*x1405))+(((-1.0)*pz))+(((0.35575)*cj1)));
evalcond[3]=((((-0.12)*x1403))+(((-1.0)*py))+((x1396*x1399))+(((0.12)*x1406))+(((-0.35575)*x1409))+(((-1.0)*x1399)));
evalcond[4]=((((-1.0)*r10*x1397*x1401))+((x1397*x1406))+((r11*x1402))+x1410+x1411+(((-1.0)*cj3*r12*x1400))+((r10*x1407)));
evalcond[5]=((((-1.0)*x1412))+(((-1.0)*cj3*r22*x1400))+((r20*x1407))+((r21*x1402))+((x1397*x1398))+x1408+(((-1.0)*r20*x1397*x1401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1413=(r20*sj0);
IkReal x1414=((1.0)*sj1);
IkReal x1415=(cj4*r12);
IkReal x1416=(cj5*sj1*sj4);
IkReal x1417=(cj1*cj5*sj4);
IkReal x1418=(cj4*r22*sj0);
IkReal x1419=(r11*sj4*sj5);
IkReal x1420=((1.0)*r21*sj0*sj4*sj5);
CheckValue<IkReal> x1421 = IKatan2WithCheck(IkReal((((x1413*x1417))+(((-1.0)*x1414*x1419))+(((-1.0)*x1414*x1415))+(((-1.0)*cj1*x1418))+((r10*x1416))+(((-1.0)*cj1*x1420)))),IkReal((((x1413*x1416))+(((-1.0)*r10*x1417))+(((-1.0)*x1414*x1418))+((cj1*x1419))+((cj1*x1415))+(((-1.0)*r21*sj0*sj4*sj5*x1414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1421.valid){
continue;
}
CheckValue<IkReal> x1422=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1422.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1421.value)+(((1.5707963267949)*(x1422.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1423=IKcos(j2);
IkReal x1424=IKsin(j2);
IkReal x1425=((1.0)*cj3);
IkReal x1426=(cj4*cj5);
IkReal x1427=(cj5*r10);
IkReal x1428=(cj5*sj3);
IkReal x1429=((0.35575)*cj1);
IkReal x1430=((0.35575)*sj0);
IkReal x1431=((1.0)*sj1);
IkReal x1432=(sj3*sj5);
IkReal x1433=((1.0)*cj4);
IkReal x1434=((0.12)*cj5);
IkReal x1435=((1.0)*cj1);
IkReal x1436=(cj5*sj4);
IkReal x1437=((0.12)*sj5);
IkReal x1438=((0.35575)*cj0*sj1);
IkReal x1439=(cj3*cj4*sj5);
IkReal x1440=(cj1*x1423);
IkReal x1441=((1.0)*sj4*sj5);
IkReal x1442=(sj0*x1431);
IkReal x1443=(cj0*x1424);
IkReal x1444=(sj1*x1424);
evalcond[0]=((((-1.0)*r21*x1441))+(((-1.0)*r22*x1433))+((r20*x1436))+(((-1.0)*x1424*x1435))+(((-1.0)*x1423*x1431)));
evalcond[1]=((((-0.35575)*sj1*x1423))+(((-1.0)*x1424*x1429))+(((-1.0)*pz))+((r21*x1437))+x1429+(((-1.0)*r20*x1434)));
evalcond[2]=((((-1.0)*r01*x1441))+(((-1.0)*r02*x1433))+((r00*x1436))+((cj0*x1440))+(((-1.0)*x1431*x1443)));
evalcond[3]=((((-1.0)*r12*x1433))+((sj0*x1440))+(((-1.0)*x1424*x1442))+(((-1.0)*r11*x1441))+((sj4*x1427)));
evalcond[4]=((((-1.0)*px))+(((-1.0)*r00*x1434))+((r01*x1437))+x1438+(((-1.0)*x1424*x1438))+((cj0*x1423*x1429)));
evalcond[5]=((((-1.0)*x1430*x1444))+((sj0*x1423*x1429))+(((-1.0)*py))+((r11*x1437))+((sj1*x1430))+(((-0.12)*x1427)));
evalcond[6]=(((r21*x1428))+((r20*x1432))+((r21*x1439))+x1444+(((-1.0)*r20*x1425*x1426))+(((-1.0)*r22*sj4*x1425))+(((-1.0)*x1423*x1435)));
evalcond[7]=((((-1.0)*r00*x1425*x1426))+(((-1.0)*cj0*x1423*x1431))+((r01*x1428))+(((-1.0)*r02*sj4*x1425))+((r01*x1439))+(((-1.0)*x1435*x1443))+((r00*x1432)));
evalcond[8]=(((r11*x1428))+((r11*x1439))+(((-1.0)*r10*x1425*x1426))+(((-1.0)*x1423*x1442))+(((-1.0)*r12*sj4*x1425))+((r10*x1432))+(((-1.0)*sj0*x1424*x1435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1445=(sj4*sj5);
IkReal x1446=((1.0)*cj0);
IkReal x1447=(cj1*cj4);
IkReal x1448=(cj5*sj4);
IkReal x1449=(cj4*sj1);
IkReal x1450=(cj0*r20);
CheckValue<IkReal> x1451=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1451.valid){
continue;
}
CheckValue<IkReal> x1452 = IKatan2WithCheck(IkReal((((cj1*x1448*x1450))+(((-1.0)*r22*x1446*x1447))+((r00*sj1*x1448))+(((-1.0)*r01*sj1*x1445))+(((-1.0)*r02*x1449))+(((-1.0)*cj1*r21*x1445*x1446)))),IkReal(((((-1.0)*r22*x1446*x1449))+(((-1.0)*r21*sj1*x1445*x1446))+((cj1*r01*x1445))+((r02*x1447))+(((-1.0)*cj1*r00*x1448))+((sj1*x1448*x1450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1452.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1451.value)))+(x1452.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1453=IKcos(j2);
IkReal x1454=IKsin(j2);
IkReal x1455=((1.0)*cj3);
IkReal x1456=(cj4*cj5);
IkReal x1457=(cj5*r10);
IkReal x1458=(cj5*sj3);
IkReal x1459=((0.35575)*cj1);
IkReal x1460=((0.35575)*sj0);
IkReal x1461=((1.0)*sj1);
IkReal x1462=(sj3*sj5);
IkReal x1463=((1.0)*cj4);
IkReal x1464=((0.12)*cj5);
IkReal x1465=((1.0)*cj1);
IkReal x1466=(cj5*sj4);
IkReal x1467=((0.12)*sj5);
IkReal x1468=((0.35575)*cj0*sj1);
IkReal x1469=(cj3*cj4*sj5);
IkReal x1470=(cj1*x1453);
IkReal x1471=((1.0)*sj4*sj5);
IkReal x1472=(sj0*x1461);
IkReal x1473=(cj0*x1454);
IkReal x1474=(sj1*x1454);
evalcond[0]=((((-1.0)*r21*x1471))+(((-1.0)*x1453*x1461))+((r20*x1466))+(((-1.0)*x1454*x1465))+(((-1.0)*r22*x1463)));
evalcond[1]=((((-1.0)*x1454*x1459))+(((-1.0)*pz))+(((-1.0)*r20*x1464))+(((-0.35575)*sj1*x1453))+x1459+((r21*x1467)));
evalcond[2]=((((-1.0)*r01*x1471))+(((-1.0)*r02*x1463))+(((-1.0)*x1461*x1473))+((r00*x1466))+((cj0*x1470)));
evalcond[3]=(((sj0*x1470))+(((-1.0)*r11*x1471))+((sj4*x1457))+(((-1.0)*r12*x1463))+(((-1.0)*x1454*x1472)));
evalcond[4]=(((r01*x1467))+(((-1.0)*x1454*x1468))+(((-1.0)*px))+(((-1.0)*r00*x1464))+x1468+((cj0*x1453*x1459)));
evalcond[5]=((((-1.0)*x1460*x1474))+(((-0.12)*x1457))+(((-1.0)*py))+((r11*x1467))+((sj1*x1460))+((sj0*x1453*x1459)));
evalcond[6]=((((-1.0)*x1453*x1465))+((r20*x1462))+(((-1.0)*r20*x1455*x1456))+(((-1.0)*r22*sj4*x1455))+((r21*x1458))+x1474+((r21*x1469)));
evalcond[7]=((((-1.0)*r02*sj4*x1455))+((r01*x1469))+(((-1.0)*cj0*x1453*x1461))+((r00*x1462))+(((-1.0)*x1465*x1473))+((r01*x1458))+(((-1.0)*r00*x1455*x1456)));
evalcond[8]=((((-1.0)*r10*x1455*x1456))+(((-1.0)*sj0*x1454*x1465))+((r11*x1458))+(((-1.0)*x1453*x1472))+(((-1.0)*r12*sj4*x1455))+((r11*x1469))+((r10*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1475=((0.12)*sj0);
IkReal x1476=(r11*sj5);
IkReal x1477=(cj5*r20);
IkReal x1478=(cj5*r10);
IkReal x1479=(r21*sj5);
IkReal x1480=((0.35575)*sj0*sj4);
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(sj0,-2);
if(!x1481.valid){
continue;
}
if( IKabs(((-2.8109627547435)*(x1481.value)*(((((0.35575)*cj4*r12*sj0))+((x1476*x1480))+(((-1.0)*x1475*x1478))+(((-1.0)*py*sj0))+((x1475*x1476))+(((-1.0)*x1478*x1480)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.33731553056922)*x1477))+((sj4*x1477))+(((-0.33731553056922)*x1479))+(((-1.0)*sj4*x1479))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.8109627547435)*(x1481.value)*(((((0.35575)*cj4*r12*sj0))+((x1476*x1480))+(((-1.0)*x1475*x1478))+(((-1.0)*py*sj0))+((x1475*x1476))+(((-1.0)*x1478*x1480))))))+IKsqr(((((0.33731553056922)*x1477))+((sj4*x1477))+(((-0.33731553056922)*x1479))+(((-1.0)*sj4*x1479))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.8109627547435)*(x1481.value)*(((((0.35575)*cj4*r12*sj0))+((x1476*x1480))+(((-1.0)*x1475*x1478))+(((-1.0)*py*sj0))+((x1475*x1476))+(((-1.0)*x1478*x1480))))), ((((0.33731553056922)*x1477))+((sj4*x1477))+(((-0.33731553056922)*x1479))+(((-1.0)*sj4*x1479))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1482=IKsin(j1);
IkReal x1483=IKcos(j1);
IkReal x1484=((0.35575)*cj0);
IkReal x1485=(cj4*r02);
IkReal x1486=((1.0)*py);
IkReal x1487=((0.35575)*sj0);
IkReal x1488=(sj3*sj5);
IkReal x1489=(r21*sj5);
IkReal x1490=((0.12)*sj0);
IkReal x1491=(sj4*sj5);
IkReal x1492=(cj5*sj4);
IkReal x1493=((0.35575)*sj4);
IkReal x1494=((0.35575)*r10);
IkReal x1495=((0.35575)*r00);
IkReal x1496=(cj5*r10);
IkReal x1497=(cj4*r12);
IkReal x1498=((0.35575)*cj4);
IkReal x1499=(cj5*sj3);
IkReal x1500=(cj5*r20);
IkReal x1501=(cj3*cj4);
IkReal x1502=((1.0)*px);
IkReal x1503=(cj5*r00);
IkReal x1504=(r11*sj5);
IkReal x1505=(r01*sj5);
IkReal x1506=((0.12)*cj0*cj5);
IkReal x1507=((0.35575)*x1482);
IkReal x1508=((0.12)*cj0*sj5);
IkReal x1509=(cj3*r22*sj4);
IkReal x1510=(sj0*x1482*x1484);
evalcond[0]=(((x1489*x1493))+(((0.35575)*x1483))+(((-1.0)*pz))+(((-0.12)*x1500))+(((0.12)*x1489))+(((-0.35575)*r20*x1492))+((r22*x1498)));
evalcond[1]=(((r11*x1487*x1491))+(((-1.0)*r10*x1487*x1492))+((x1490*x1504))+((sj0*x1482*x1487))+((x1487*x1497))+(((-1.0)*sj0*x1486))+(((-1.0)*x1490*x1496)));
evalcond[2]=((((0.12)*cj0*x1505))+((cj0*x1482*x1484))+((r01*x1484*x1491))+(((-1.0)*r00*x1484*x1492))+(((-1.0)*cj0*x1502))+(((-0.12)*cj0*x1503))+((x1484*x1485)));
evalcond[3]=(((cj3*x1498*x1504))+((x1490*x1500))+(((-1.0)*cj3*r12*x1493))+(((0.35575)*r11*x1499))+(((-1.0)*x1483*x1487))+((pz*sj0))+((x1488*x1494))+(((-1.0)*cj5*x1494*x1501))+(((-1.0)*x1489*x1490)));
evalcond[4]=((((-1.0)*cj5*x1495*x1501))+((cj3*x1498*x1505))+(((0.12)*cj0*x1500))+(((0.35575)*r01*x1499))+(((-1.0)*cj3*r02*x1493))+(((-1.0)*x1483*x1484))+(((-0.12)*cj0*x1489))+((cj0*pz))+((x1488*x1495)));
evalcond[5]=(((x1482*x1487))+(((-1.0)*x1486))+((r21*x1487*x1499))+(((-0.12)*x1496))+(((0.12)*x1504))+(((-1.0)*x1487*x1509))+((r20*x1487*x1488))+(((-1.0)*x1487*x1500*x1501))+((x1487*x1489*x1501)));
evalcond[6]=((((-1.0)*x1502))+(((-1.0)*x1484*x1509))+((r21*x1484*x1499))+((x1484*x1489*x1501))+((x1482*x1484))+((r20*x1484*x1488))+(((0.12)*x1505))+(((-0.12)*x1503))+(((-1.0)*x1484*x1500*x1501)));
evalcond[7]=((((-1.0)*r10*x1484*x1492))+(((-1.0)*x1490*x1503))+((x1490*x1505))+((r11*x1484*x1491))+(((-1.0)*sj0*x1502))+x1510+((x1484*x1497)));
evalcond[8]=((((-1.0)*r00*x1487*x1492))+(((0.12)*cj0*x1504))+x1510+((r01*x1487*x1491))+(((-0.12)*cj0*x1496))+((x1485*x1487))+(((-1.0)*cj0*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1511=((1.0)*cj1);
IkReal x1512=(cj4*r22);
IkReal x1513=(cj5*sj4);
IkReal x1514=(sj4*sj5);
IkReal x1515=((1.0)*sj1);
IkReal x1516=(cj4*r02);
if( IKabs(((((-1.0)*x1515*x1516))+(((-1.0)*r01*x1514*x1515))+((cj1*r20*x1513))+((r00*sj1*x1513))+(((-1.0)*r21*x1511*x1514))+(((-1.0)*x1511*x1512)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x1514))+((cj1*x1516))+((r20*sj1*x1513))+(((-1.0)*r00*x1511*x1513))+(((-1.0)*x1512*x1515))+(((-1.0)*r21*x1514*x1515)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1515*x1516))+(((-1.0)*r01*x1514*x1515))+((cj1*r20*x1513))+((r00*sj1*x1513))+(((-1.0)*r21*x1511*x1514))+(((-1.0)*x1511*x1512))))+IKsqr((((cj1*r01*x1514))+((cj1*x1516))+((r20*sj1*x1513))+(((-1.0)*r00*x1511*x1513))+(((-1.0)*x1512*x1515))+(((-1.0)*r21*x1514*x1515))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1515*x1516))+(((-1.0)*r01*x1514*x1515))+((cj1*r20*x1513))+((r00*sj1*x1513))+(((-1.0)*r21*x1511*x1514))+(((-1.0)*x1511*x1512))), (((cj1*r01*x1514))+((cj1*x1516))+((r20*sj1*x1513))+(((-1.0)*r00*x1511*x1513))+(((-1.0)*x1512*x1515))+(((-1.0)*r21*x1514*x1515))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1517=IKcos(j2);
IkReal x1518=IKsin(j2);
IkReal x1519=((1.0)*cj3);
IkReal x1520=(cj5*r00);
IkReal x1521=((0.35575)*sj1);
IkReal x1522=(cj5*sj3);
IkReal x1523=((1.0)*cj4);
IkReal x1524=(cj5*r20);
IkReal x1525=((1.0)*sj1);
IkReal x1526=(sj3*sj5);
IkReal x1527=((0.12)*sj5);
IkReal x1528=((0.35575)*cj1);
IkReal x1529=(cj1*x1517);
IkReal x1530=(cj3*cj4*sj5);
IkReal x1531=((1.0)*sj4*sj5);
IkReal x1532=(x1517*x1525);
IkReal x1533=((1.0)*cj1*x1518);
IkReal x1534=(x1533+x1532);
evalcond[0]=((((-1.0)*r01*x1531))+(((-1.0)*x1518*x1525))+(((-1.0)*r02*x1523))+x1529+((sj4*x1520)));
evalcond[1]=((((-1.0)*x1534))+(((-1.0)*r22*x1523))+((sj4*x1524))+(((-1.0)*r21*x1531)));
evalcond[2]=((((-1.0)*x1518*x1528))+(((-0.12)*x1524))+(((-1.0)*pz))+x1528+((r21*x1527))+(((-1.0)*x1517*x1521)));
evalcond[3]=((((-1.0)*x1518*x1521))+((r01*x1527))+((x1517*x1528))+(((-0.12)*x1520))+(((-1.0)*px))+x1521);
evalcond[4]=((((-1.0)*r22*sj4*x1519))+((r20*x1526))+((sj1*x1518))+((r21*x1530))+((r21*x1522))+(((-1.0)*cj4*x1519*x1524))+(((-1.0)*x1529)));
evalcond[5]=((((-1.0)*x1534))+((r00*x1526))+((r01*x1530))+((r01*x1522))+(((-1.0)*r02*sj4*x1519))+(((-1.0)*cj4*x1519*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1535=(sj1*sj4);
IkReal x1536=(r01*sj5);
IkReal x1537=((1.0)*cj1);
IkReal x1538=(cj4*r22);
IkReal x1539=(cj4*r02);
IkReal x1540=(cj5*r20);
IkReal x1541=(cj1*sj4);
IkReal x1542=(cj5*r00);
IkReal x1543=(r21*sj5);
if( IKabs(((((-1.0)*x1535*x1542))+(((-1.0)*x1537*x1538))+((sj1*x1539))+(((-1.0)*sj4*x1537*x1543))+((x1540*x1541))+((x1535*x1536)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1535*x1543))+(((-1.0)*sj1*x1538))+((x1541*x1542))+(((-1.0)*x1537*x1539))+(((-1.0)*sj4*x1536*x1537))+((x1535*x1540)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1535*x1542))+(((-1.0)*x1537*x1538))+((sj1*x1539))+(((-1.0)*sj4*x1537*x1543))+((x1540*x1541))+((x1535*x1536))))+IKsqr(((((-1.0)*x1535*x1543))+(((-1.0)*sj1*x1538))+((x1541*x1542))+(((-1.0)*x1537*x1539))+(((-1.0)*sj4*x1536*x1537))+((x1535*x1540))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1535*x1542))+(((-1.0)*x1537*x1538))+((sj1*x1539))+(((-1.0)*sj4*x1537*x1543))+((x1540*x1541))+((x1535*x1536))), ((((-1.0)*x1535*x1543))+(((-1.0)*sj1*x1538))+((x1541*x1542))+(((-1.0)*x1537*x1539))+(((-1.0)*sj4*x1536*x1537))+((x1535*x1540))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1544=IKcos(j2);
IkReal x1545=IKsin(j2);
IkReal x1546=(cj3*cj4);
IkReal x1547=(r21*sj5);
IkReal x1548=(cj5*r00);
IkReal x1549=((0.35575)*sj1);
IkReal x1550=(r01*sj5);
IkReal x1551=((1.0)*sj4);
IkReal x1552=(cj5*sj3);
IkReal x1553=((1.0)*cj4);
IkReal x1554=(cj5*r20);
IkReal x1555=(sj3*sj5);
IkReal x1556=(sj1*x1545);
IkReal x1557=(cj1*x1545);
IkReal x1558=(cj1*x1544);
IkReal x1559=(sj1*x1544);
IkReal x1560=((1.0)*x1558);
evalcond[0]=((((-1.0)*r02*x1553))+((sj4*x1548))+x1556+(((-1.0)*x1550*x1551))+(((-1.0)*x1560)));
evalcond[1]=((((-1.0)*x1559))+(((-1.0)*x1557))+((sj4*x1554))+(((-1.0)*r22*x1553))+(((-1.0)*x1547*x1551)));
evalcond[2]=((((-0.35575)*x1557))+(((-0.12)*x1554))+(((-1.0)*pz))+(((0.35575)*cj1))+(((-1.0)*x1544*x1549))+(((0.12)*x1547)));
evalcond[3]=((((-0.12)*x1548))+(((-0.35575)*x1558))+(((-1.0)*px))+(((-1.0)*x1549))+((x1545*x1549))+(((0.12)*x1550)));
evalcond[4]=(((r00*x1555))+((r01*x1552))+(((-1.0)*x1546*x1548))+(((-1.0)*cj3*r02*x1551))+x1557+x1559+((x1546*x1550)));
evalcond[5]=((((-1.0)*x1546*x1554))+(((-1.0)*cj3*r22*x1551))+((x1546*x1547))+x1556+((r21*x1552))+(((-1.0)*x1560))+((r20*x1555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1561=(cj1*cj4);
IkReal x1562=((1.0)*r22);
IkReal x1563=(cj5*sj4);
IkReal x1564=((1.0)*cj1);
IkReal x1565=((1.0)*sj1);
IkReal x1566=(sj4*sj5);
if( IKabs((((cj1*r20*x1563))+(((-1.0)*cj4*r12*x1565))+(((-1.0)*r11*x1565*x1566))+((r10*sj1*x1563))+(((-1.0)*x1561*x1562))+(((-1.0)*r21*x1564*x1566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r12*x1561))+(((-1.0)*cj4*sj1*x1562))+((r20*sj1*x1563))+(((-1.0)*r10*x1563*x1564))+((cj1*r11*x1566))+(((-1.0)*r21*x1565*x1566)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1563))+(((-1.0)*cj4*r12*x1565))+(((-1.0)*r11*x1565*x1566))+((r10*sj1*x1563))+(((-1.0)*x1561*x1562))+(((-1.0)*r21*x1564*x1566))))+IKsqr((((r12*x1561))+(((-1.0)*cj4*sj1*x1562))+((r20*sj1*x1563))+(((-1.0)*r10*x1563*x1564))+((cj1*r11*x1566))+(((-1.0)*r21*x1565*x1566))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1563))+(((-1.0)*cj4*r12*x1565))+(((-1.0)*r11*x1565*x1566))+((r10*sj1*x1563))+(((-1.0)*x1561*x1562))+(((-1.0)*r21*x1564*x1566))), (((r12*x1561))+(((-1.0)*cj4*sj1*x1562))+((r20*sj1*x1563))+(((-1.0)*r10*x1563*x1564))+((cj1*r11*x1566))+(((-1.0)*r21*x1565*x1566))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1567=IKcos(j2);
IkReal x1568=IKsin(j2);
IkReal x1569=(cj3*cj4);
IkReal x1570=(r21*sj5);
IkReal x1571=((0.35575)*sj1);
IkReal x1572=((1.0)*sj4);
IkReal x1573=((1.0)*cj5);
IkReal x1574=(cj5*sj3);
IkReal x1575=((1.0)*sj1);
IkReal x1576=(cj5*r10);
IkReal x1577=((1.0)*cj4);
IkReal x1578=(cj5*r20);
IkReal x1579=(sj3*sj5);
IkReal x1580=((0.35575)*cj1);
IkReal x1581=(r11*sj5);
IkReal x1582=(cj1*x1567);
IkReal x1583=(x1567*x1575);
IkReal x1584=((1.0)*cj1*x1568);
IkReal x1585=(x1583+x1584);
evalcond[0]=((((-1.0)*x1572*x1581))+((sj4*x1576))+(((-1.0)*x1568*x1575))+x1582+(((-1.0)*r12*x1577)));
evalcond[1]=((((-1.0)*x1585))+(((-1.0)*x1570*x1572))+(((-1.0)*r22*x1577))+((sj4*x1578)));
evalcond[2]=((((-0.12)*x1578))+(((-1.0)*x1567*x1571))+(((-1.0)*pz))+x1580+(((-1.0)*x1568*x1580))+(((0.12)*x1570)));
evalcond[3]=(((x1567*x1580))+(((-0.12)*x1576))+(((-1.0)*py))+(((-1.0)*x1568*x1571))+x1571+(((0.12)*x1581)));
evalcond[4]=(((r20*x1579))+((x1569*x1570))+(((-1.0)*r20*x1569*x1573))+((sj1*x1568))+((r21*x1574))+(((-1.0)*x1582))+(((-1.0)*cj3*r22*x1572)));
evalcond[5]=((((-1.0)*x1585))+(((-1.0)*cj3*r12*x1572))+((r11*x1574))+((r10*x1579))+(((-1.0)*r10*x1569*x1573))+((x1569*x1581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1586=(cj1*sj4);
IkReal x1587=(cj5*r20);
IkReal x1588=(r11*sj5);
IkReal x1589=(sj1*sj4);
IkReal x1590=(cj4*r12);
IkReal x1591=(cj5*r10);
IkReal x1592=((1.0)*cj4*r22);
IkReal x1593=((1.0)*r21*sj5);
if( IKabs((((x1586*x1587))+(((-1.0)*x1589*x1591))+((x1588*x1589))+(((-1.0)*cj1*x1592))+((sj1*x1590))+(((-1.0)*x1586*x1593)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1586*x1591))+((x1587*x1589))+(((-1.0)*x1589*x1593))+(((-1.0)*x1586*x1588))+(((-1.0)*sj1*x1592))+(((-1.0)*cj1*x1590)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1586*x1587))+(((-1.0)*x1589*x1591))+((x1588*x1589))+(((-1.0)*cj1*x1592))+((sj1*x1590))+(((-1.0)*x1586*x1593))))+IKsqr((((x1586*x1591))+((x1587*x1589))+(((-1.0)*x1589*x1593))+(((-1.0)*x1586*x1588))+(((-1.0)*sj1*x1592))+(((-1.0)*cj1*x1590))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1586*x1587))+(((-1.0)*x1589*x1591))+((x1588*x1589))+(((-1.0)*cj1*x1592))+((sj1*x1590))+(((-1.0)*x1586*x1593))), (((x1586*x1591))+((x1587*x1589))+(((-1.0)*x1589*x1593))+(((-1.0)*x1586*x1588))+(((-1.0)*sj1*x1592))+(((-1.0)*cj1*x1590))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1594=IKcos(j2);
IkReal x1595=IKsin(j2);
IkReal x1596=(cj3*cj4);
IkReal x1597=(r21*sj5);
IkReal x1598=((0.35575)*sj1);
IkReal x1599=((1.0)*sj4);
IkReal x1600=((1.0)*cj5);
IkReal x1601=(cj5*sj3);
IkReal x1602=(cj5*r10);
IkReal x1603=((1.0)*cj4);
IkReal x1604=(cj5*r20);
IkReal x1605=(r11*sj5);
IkReal x1606=(sj3*sj5);
IkReal x1607=(sj1*x1595);
IkReal x1608=(cj1*x1594);
IkReal x1609=(cj1*x1595);
IkReal x1610=(sj1*x1594);
IkReal x1611=((1.0)*x1608);
evalcond[0]=(x1607+(((-1.0)*x1611))+((sj4*x1602))+(((-1.0)*x1599*x1605))+(((-1.0)*r12*x1603)));
evalcond[1]=((((-1.0)*x1610))+(((-1.0)*x1609))+(((-1.0)*r22*x1603))+((sj4*x1604))+(((-1.0)*x1597*x1599)));
evalcond[2]=((((-0.35575)*x1609))+(((-1.0)*x1594*x1598))+(((-1.0)*pz))+(((0.35575)*cj1))+(((0.12)*x1597))+(((-0.12)*x1604)));
evalcond[3]=((((-1.0)*x1598))+(((-0.35575)*x1608))+(((0.12)*x1605))+(((-1.0)*py))+((x1595*x1598))+(((-0.12)*x1602)));
evalcond[4]=((((-1.0)*r10*x1596*x1600))+x1610+x1609+((r11*x1601))+(((-1.0)*cj3*r12*x1599))+((x1596*x1605))+((r10*x1606)));
evalcond[5]=(((x1596*x1597))+x1607+(((-1.0)*x1611))+((r21*x1601))+(((-1.0)*r20*x1596*x1600))+(((-1.0)*cj3*r22*x1599))+((r20*x1606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1612=(r20*sj0);
IkReal x1613=((1.0)*sj1);
IkReal x1614=(cj4*r12);
IkReal x1615=(cj5*sj1*sj4);
IkReal x1616=(cj1*cj5*sj4);
IkReal x1617=(cj4*r22*sj0);
IkReal x1618=(r11*sj4*sj5);
IkReal x1619=((1.0)*r21*sj0*sj4*sj5);
CheckValue<IkReal> x1620=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1620.valid){
continue;
}
CheckValue<IkReal> x1621 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x1617))+((x1612*x1616))+((r10*x1615))+(((-1.0)*x1613*x1618))+(((-1.0)*x1613*x1614))+(((-1.0)*cj1*x1619)))),IkReal((((x1612*x1615))+(((-1.0)*x1613*x1617))+(((-1.0)*r21*sj0*sj4*sj5*x1613))+(((-1.0)*r10*x1616))+((cj1*x1614))+((cj1*x1618)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1621.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1620.value)))+(x1621.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1622=IKcos(j2);
IkReal x1623=IKsin(j2);
IkReal x1624=((1.0)*cj3);
IkReal x1625=(cj4*cj5);
IkReal x1626=(cj5*r10);
IkReal x1627=(cj5*sj3);
IkReal x1628=((0.35575)*cj1);
IkReal x1629=((0.35575)*sj0);
IkReal x1630=((1.0)*sj1);
IkReal x1631=(sj3*sj5);
IkReal x1632=((1.0)*cj4);
IkReal x1633=((0.12)*cj5);
IkReal x1634=((1.0)*cj1);
IkReal x1635=(cj5*sj4);
IkReal x1636=((0.12)*sj5);
IkReal x1637=((0.35575)*cj0*sj1);
IkReal x1638=(cj3*cj4*sj5);
IkReal x1639=(cj1*x1622);
IkReal x1640=((1.0)*sj4*sj5);
IkReal x1641=(sj0*x1630);
IkReal x1642=(cj0*x1623);
IkReal x1643=(sj1*x1623);
evalcond[0]=((((-1.0)*r22*x1632))+((r20*x1635))+(((-1.0)*x1622*x1630))+(((-1.0)*x1623*x1634))+(((-1.0)*r21*x1640)));
evalcond[1]=(((r21*x1636))+x1628+(((-1.0)*pz))+(((-1.0)*x1623*x1628))+(((-1.0)*r20*x1633))+(((-0.35575)*sj1*x1622)));
evalcond[2]=((((-1.0)*r01*x1640))+((r00*x1635))+((cj0*x1639))+(((-1.0)*x1630*x1642))+(((-1.0)*r02*x1632)));
evalcond[3]=(((sj0*x1639))+(((-1.0)*x1623*x1641))+(((-1.0)*r12*x1632))+(((-1.0)*r11*x1640))+((sj4*x1626)));
evalcond[4]=((((-1.0)*x1623*x1637))+x1637+(((-1.0)*r00*x1633))+(((-1.0)*px))+((r01*x1636))+((cj0*x1622*x1628)));
evalcond[5]=(((r11*x1636))+((sj1*x1629))+((sj0*x1622*x1628))+(((-1.0)*py))+(((-1.0)*x1629*x1643))+(((-0.12)*x1626)));
evalcond[6]=(((r21*x1638))+(((-1.0)*r22*sj4*x1624))+((r20*x1631))+((r21*x1627))+(((-1.0)*x1622*x1634))+x1643+(((-1.0)*r20*x1624*x1625)));
evalcond[7]=(((r01*x1627))+(((-1.0)*cj0*x1622*x1630))+(((-1.0)*x1634*x1642))+((r01*x1638))+((r00*x1631))+(((-1.0)*r00*x1624*x1625))+(((-1.0)*r02*sj4*x1624)));
evalcond[8]=((((-1.0)*r12*sj4*x1624))+(((-1.0)*x1622*x1641))+((r11*x1638))+(((-1.0)*sj0*x1623*x1634))+((r10*x1631))+((r11*x1627))+(((-1.0)*r10*x1624*x1625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1644=(sj4*sj5);
IkReal x1645=((1.0)*cj0);
IkReal x1646=(cj1*cj4);
IkReal x1647=(cj5*sj4);
IkReal x1648=(cj4*sj1);
IkReal x1649=(cj0*r20);
CheckValue<IkReal> x1650=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1650.valid){
continue;
}
CheckValue<IkReal> x1651 = IKatan2WithCheck(IkReal((((cj1*x1647*x1649))+(((-1.0)*r02*x1648))+(((-1.0)*cj1*r21*x1644*x1645))+(((-1.0)*r01*sj1*x1644))+((r00*sj1*x1647))+(((-1.0)*r22*x1645*x1646)))),IkReal((((cj1*r01*x1644))+((sj1*x1647*x1649))+((r02*x1646))+(((-1.0)*cj1*r00*x1647))+(((-1.0)*r21*sj1*x1644*x1645))+(((-1.0)*r22*x1645*x1648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1651.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1650.value)))+(x1651.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1652=IKcos(j2);
IkReal x1653=IKsin(j2);
IkReal x1654=((1.0)*cj3);
IkReal x1655=(cj4*cj5);
IkReal x1656=(cj5*r10);
IkReal x1657=(cj5*sj3);
IkReal x1658=((0.35575)*cj1);
IkReal x1659=((0.35575)*sj0);
IkReal x1660=((1.0)*sj1);
IkReal x1661=(sj3*sj5);
IkReal x1662=((1.0)*cj4);
IkReal x1663=((0.12)*cj5);
IkReal x1664=((1.0)*cj1);
IkReal x1665=(cj5*sj4);
IkReal x1666=((0.12)*sj5);
IkReal x1667=((0.35575)*cj0*sj1);
IkReal x1668=(cj3*cj4*sj5);
IkReal x1669=(cj1*x1652);
IkReal x1670=((1.0)*sj4*sj5);
IkReal x1671=(sj0*x1660);
IkReal x1672=(cj0*x1653);
IkReal x1673=(sj1*x1653);
evalcond[0]=((((-1.0)*x1652*x1660))+(((-1.0)*x1653*x1664))+(((-1.0)*r22*x1662))+((r20*x1665))+(((-1.0)*r21*x1670)));
evalcond[1]=((((-0.35575)*sj1*x1652))+x1658+(((-1.0)*r20*x1663))+(((-1.0)*x1653*x1658))+(((-1.0)*pz))+((r21*x1666)));
evalcond[2]=(((r00*x1665))+((cj0*x1669))+(((-1.0)*r01*x1670))+(((-1.0)*r02*x1662))+(((-1.0)*x1660*x1672)));
evalcond[3]=(((sj0*x1669))+(((-1.0)*r12*x1662))+(((-1.0)*r11*x1670))+(((-1.0)*x1653*x1671))+((sj4*x1656)));
evalcond[4]=((((-1.0)*r00*x1663))+x1667+(((-1.0)*x1653*x1667))+((r01*x1666))+(((-1.0)*px))+((cj0*x1652*x1658)));
evalcond[5]=((((-0.12)*x1656))+((sj1*x1659))+((r11*x1666))+(((-1.0)*x1659*x1673))+((sj0*x1652*x1658))+(((-1.0)*py)));
evalcond[6]=(x1673+(((-1.0)*x1652*x1664))+((r20*x1661))+(((-1.0)*r22*sj4*x1654))+(((-1.0)*r20*x1654*x1655))+((r21*x1657))+((r21*x1668)));
evalcond[7]=(((r00*x1661))+(((-1.0)*r02*sj4*x1654))+((r01*x1657))+((r01*x1668))+(((-1.0)*cj0*x1652*x1660))+(((-1.0)*x1664*x1672))+(((-1.0)*r00*x1654*x1655)));
evalcond[8]=(((r10*x1661))+(((-1.0)*x1652*x1671))+((r11*x1668))+(((-1.0)*r12*sj4*x1654))+((r11*x1657))+(((-1.0)*sj0*x1653*x1664))+(((-1.0)*r10*x1654*x1655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1674=((1.0)*sj0);
CheckValue<IkReal> x1675 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21*x1674))+(((-1.0)*r20*sj5*x1674)))),IkReal((((cj4*cj5*r20*sj0))+((r22*sj0*sj4))+(((-1.0)*cj4*r21*sj5*x1674)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1675.valid){
continue;
}
CheckValue<IkReal> x1676=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x1676.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1675.value)+(((1.5707963267949)*(x1676.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1677=IKsin(j3);
IkReal x1678=IKcos(j3);
IkReal x1679=((1.0)*cj5);
IkReal x1680=(cj4*x1677);
IkReal x1681=((1.0)*sj5*x1678);
IkReal x1682=((1.0)*sj4*x1677);
evalcond[0]=((((-1.0)*r20*x1679*x1680))+(((-1.0)*r20*x1681))+(((-1.0)*r22*x1682))+((r21*sj5*x1680))+(((-1.0)*r21*x1678*x1679)));
evalcond[1]=((((-1.0)*r12*x1682))+cj0+((r11*sj5*x1680))+(((-1.0)*r10*x1681))+(((-1.0)*r10*x1679*x1680))+(((-1.0)*r11*x1678*x1679)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1679*x1680))+(((-1.0)*r01*x1678*x1679))+((r01*sj5*x1680))+(((-1.0)*r02*x1682))+(((-1.0)*r00*x1681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1683=((0.33731553056922)*cj5);
IkReal x1684=(cj5*sj4);
IkReal x1685=((1.0)*cj4);
IkReal x1686=((0.33731553056922)*sj5);
IkReal x1687=((1.0)*sj4*sj5);
if( IKabs(((((-1.0)*r12*x1685))+(((-1.0)*r11*x1687))+(((-1.0)*r11*x1686))+((r10*x1683))+((r10*x1684))+(((2.8109627547435)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1687))+(((-1.0)*r21*x1686))+(((2.8109627547435)*pz))+(((-1.0)*r22*x1685))+((r20*x1683))+((r20*x1684)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*x1685))+(((-1.0)*r11*x1687))+(((-1.0)*r11*x1686))+((r10*x1683))+((r10*x1684))+(((2.8109627547435)*py))))+IKsqr(((((-1.0)*r21*x1687))+(((-1.0)*r21*x1686))+(((2.8109627547435)*pz))+(((-1.0)*r22*x1685))+((r20*x1683))+((r20*x1684))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r12*x1685))+(((-1.0)*r11*x1687))+(((-1.0)*r11*x1686))+((r10*x1683))+((r10*x1684))+(((2.8109627547435)*py))), ((((-1.0)*r21*x1687))+(((-1.0)*r21*x1686))+(((2.8109627547435)*pz))+(((-1.0)*r22*x1685))+((r20*x1683))+((r20*x1684))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1688=((1.0)*py);
IkReal x1689=((0.35575)*cj4);
IkReal x1690=((0.35575)*sj3);
IkReal x1691=(r21*sj5);
IkReal x1692=((0.35575)*sj4);
IkReal x1693=(cj5*r10);
IkReal x1694=(r11*sj5);
IkReal x1695=(cj5*r20);
IkReal x1696=((0.12)*x1695);
IkReal x1697=((0.12)*x1691);
IkReal x1698=((0.35575)*(IKcos(j1)));
IkReal x1699=((0.35575)*(IKsin(j1)));
IkReal x1700=((0.12)*x1694);
IkReal x1701=((0.12)*x1693);
IkReal x1702=(x1701+x1688);
IkReal x1703=(x1700+x1699);
IkReal x1704=(x1697+x1698);
evalcond[0]=((((-1.0)*x1692*x1695))+(((-1.0)*x1696))+x1704+((r22*x1689))+((x1691*x1692))+(((-1.0)*pz)));
evalcond[1]=((((-1.0)*x1692*x1693))+x1703+((r12*x1689))+((x1692*x1694))+(((-1.0)*x1702)));
evalcond[2]=((((-1.0)*cj3*r12*x1692))+((r10*sj5*x1690))+x1696+(((-1.0)*x1704))+pz+((cj3*x1689*x1694))+((cj5*r11*x1690))+(((-1.0)*cj3*x1689*x1693)));
evalcond[3]=(((r20*sj5*x1690))+x1703+((cj5*r21*x1690))+(((-1.0)*x1702))+((cj3*x1689*x1691))+(((-1.0)*cj3*r22*x1692))+(((-1.0)*cj3*x1689*x1695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1705=(cj1*cj4);
IkReal x1706=((1.0)*r22);
IkReal x1707=(cj5*sj4);
IkReal x1708=((1.0)*cj1);
IkReal x1709=((1.0)*sj1);
IkReal x1710=(sj4*sj5);
if( IKabs((((cj1*r20*x1707))+(((-1.0)*r11*x1709*x1710))+((r10*sj1*x1707))+(((-1.0)*x1705*x1706))+(((-1.0)*r21*x1708*x1710))+(((-1.0)*cj4*r12*x1709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r11*x1710))+((r12*x1705))+(((-1.0)*cj4*sj1*x1706))+(((-1.0)*r10*x1707*x1708))+(((-1.0)*r21*x1709*x1710))+((r20*sj1*x1707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1707))+(((-1.0)*r11*x1709*x1710))+((r10*sj1*x1707))+(((-1.0)*x1705*x1706))+(((-1.0)*r21*x1708*x1710))+(((-1.0)*cj4*r12*x1709))))+IKsqr((((cj1*r11*x1710))+((r12*x1705))+(((-1.0)*cj4*sj1*x1706))+(((-1.0)*r10*x1707*x1708))+(((-1.0)*r21*x1709*x1710))+((r20*sj1*x1707))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1707))+(((-1.0)*r11*x1709*x1710))+((r10*sj1*x1707))+(((-1.0)*x1705*x1706))+(((-1.0)*r21*x1708*x1710))+(((-1.0)*cj4*r12*x1709))), (((cj1*r11*x1710))+((r12*x1705))+(((-1.0)*cj4*sj1*x1706))+(((-1.0)*r10*x1707*x1708))+(((-1.0)*r21*x1709*x1710))+((r20*sj1*x1707))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1711=IKcos(j2);
IkReal x1712=IKsin(j2);
IkReal x1713=(cj3*cj4);
IkReal x1714=(r21*sj5);
IkReal x1715=((0.35575)*sj1);
IkReal x1716=((1.0)*sj4);
IkReal x1717=((1.0)*cj5);
IkReal x1718=(cj5*sj3);
IkReal x1719=((1.0)*sj1);
IkReal x1720=(cj5*r10);
IkReal x1721=((1.0)*cj4);
IkReal x1722=(cj5*r20);
IkReal x1723=(sj3*sj5);
IkReal x1724=((0.35575)*cj1);
IkReal x1725=(r11*sj5);
IkReal x1726=(cj1*x1711);
IkReal x1727=(x1711*x1719);
IkReal x1728=((1.0)*cj1*x1712);
IkReal x1729=(x1728+x1727);
evalcond[0]=((((-1.0)*x1712*x1719))+x1726+(((-1.0)*r12*x1721))+((sj4*x1720))+(((-1.0)*x1716*x1725)));
evalcond[1]=((((-1.0)*r22*x1721))+(((-1.0)*x1714*x1716))+((sj4*x1722))+(((-1.0)*x1729)));
evalcond[2]=(x1724+(((0.12)*x1714))+(((-1.0)*pz))+(((-1.0)*x1711*x1715))+(((-0.12)*x1722))+(((-1.0)*x1712*x1724)));
evalcond[3]=(((x1711*x1724))+(((-1.0)*x1712*x1715))+x1715+(((-1.0)*py))+(((-0.12)*x1720))+(((0.12)*x1725)));
evalcond[4]=(((x1713*x1714))+(((-1.0)*r20*x1713*x1717))+(((-1.0)*cj3*r22*x1716))+((r21*x1718))+(((-1.0)*x1726))+((r20*x1723))+((sj1*x1712)));
evalcond[5]=(((r11*x1718))+((r10*x1723))+(((-1.0)*cj3*r12*x1716))+((x1713*x1725))+(((-1.0)*x1729))+(((-1.0)*r10*x1713*x1717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1730=((0.33731553056922)*cj5);
IkReal x1731=(r11*sj5);
IkReal x1732=(cj5*sj4);
IkReal x1733=(r21*sj5);
if( IKabs(((((-1.0)*r10*x1730))+((sj4*x1731))+(((-2.8109627547435)*py))+(((0.33731553056922)*x1731))+(((-1.0)*r10*x1732))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.8109627547435)*pz))+(((-1.0)*sj4*x1733))+(((-1.0)*cj4*r22))+((r20*x1732))+((r20*x1730))+(((-0.33731553056922)*x1733)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1730))+((sj4*x1731))+(((-2.8109627547435)*py))+(((0.33731553056922)*x1731))+(((-1.0)*r10*x1732))+((cj4*r12))))+IKsqr(((((2.8109627547435)*pz))+(((-1.0)*sj4*x1733))+(((-1.0)*cj4*r22))+((r20*x1732))+((r20*x1730))+(((-0.33731553056922)*x1733))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x1730))+((sj4*x1731))+(((-2.8109627547435)*py))+(((0.33731553056922)*x1731))+(((-1.0)*r10*x1732))+((cj4*r12))), ((((2.8109627547435)*pz))+(((-1.0)*sj4*x1733))+(((-1.0)*cj4*r22))+((r20*x1732))+((r20*x1730))+(((-0.33731553056922)*x1733))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1734=((1.0)*pz);
IkReal x1735=((0.35575)*cj4);
IkReal x1736=((0.35575)*sj3);
IkReal x1737=(r21*sj5);
IkReal x1738=((0.35575)*sj4);
IkReal x1739=(cj5*r10);
IkReal x1740=(r11*sj5);
IkReal x1741=(cj5*r20);
IkReal x1742=((0.12)*x1740);
IkReal x1743=((0.12)*x1739);
IkReal x1744=((0.35575)*(IKsin(j1)));
IkReal x1745=((0.12)*x1737);
IkReal x1746=((0.35575)*(IKcos(j1)));
IkReal x1747=((0.12)*x1741);
IkReal x1748=(x1734+x1747);
IkReal x1749=(x1745+x1746);
IkReal x1750=(x1744+x1743);
evalcond[0]=(x1750+(((-1.0)*x1738*x1740))+(((-1.0)*r12*x1735))+py+((x1738*x1739))+(((-1.0)*x1742)));
evalcond[1]=(x1749+(((-1.0)*x1738*x1741))+((x1737*x1738))+((r22*x1735))+(((-1.0)*x1748)));
evalcond[2]=(x1742+((cj3*x1735*x1741))+((cj3*r22*x1738))+(((-1.0)*r20*sj5*x1736))+(((-1.0)*py))+(((-1.0)*x1750))+(((-1.0)*cj5*r21*x1736))+(((-1.0)*cj3*x1735*x1737)));
evalcond[3]=(x1749+((cj3*x1735*x1740))+((cj5*r11*x1736))+(((-1.0)*x1748))+((r10*sj5*x1736))+(((-1.0)*cj3*x1735*x1739))+(((-1.0)*cj3*r12*x1738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1751=(cj1*sj4);
IkReal x1752=(cj5*r20);
IkReal x1753=(r11*sj5);
IkReal x1754=(sj1*sj4);
IkReal x1755=(cj4*r12);
IkReal x1756=(cj5*r10);
IkReal x1757=((1.0)*cj4*r22);
IkReal x1758=((1.0)*r21*sj5);
if( IKabs((((x1753*x1754))+(((-1.0)*x1751*x1758))+(((-1.0)*cj1*x1757))+((sj1*x1755))+(((-1.0)*x1754*x1756))+((x1751*x1752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1752*x1754))+(((-1.0)*cj1*x1755))+(((-1.0)*sj1*x1757))+(((-1.0)*x1754*x1758))+((x1751*x1756))+(((-1.0)*x1751*x1753)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1753*x1754))+(((-1.0)*x1751*x1758))+(((-1.0)*cj1*x1757))+((sj1*x1755))+(((-1.0)*x1754*x1756))+((x1751*x1752))))+IKsqr((((x1752*x1754))+(((-1.0)*cj1*x1755))+(((-1.0)*sj1*x1757))+(((-1.0)*x1754*x1758))+((x1751*x1756))+(((-1.0)*x1751*x1753))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1753*x1754))+(((-1.0)*x1751*x1758))+(((-1.0)*cj1*x1757))+((sj1*x1755))+(((-1.0)*x1754*x1756))+((x1751*x1752))), (((x1752*x1754))+(((-1.0)*cj1*x1755))+(((-1.0)*sj1*x1757))+(((-1.0)*x1754*x1758))+((x1751*x1756))+(((-1.0)*x1751*x1753))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1759=IKcos(j2);
IkReal x1760=IKsin(j2);
IkReal x1761=(cj3*cj4);
IkReal x1762=(r21*sj5);
IkReal x1763=((0.35575)*sj1);
IkReal x1764=((1.0)*sj4);
IkReal x1765=((1.0)*cj5);
IkReal x1766=(cj5*sj3);
IkReal x1767=(cj5*r10);
IkReal x1768=((1.0)*cj4);
IkReal x1769=(cj5*r20);
IkReal x1770=(r11*sj5);
IkReal x1771=(sj3*sj5);
IkReal x1772=(sj1*x1760);
IkReal x1773=(cj1*x1759);
IkReal x1774=(cj1*x1760);
IkReal x1775=(sj1*x1759);
IkReal x1776=((1.0)*x1773);
evalcond[0]=(x1772+(((-1.0)*r12*x1768))+(((-1.0)*x1776))+(((-1.0)*x1764*x1770))+((sj4*x1767)));
evalcond[1]=((((-1.0)*x1762*x1764))+(((-1.0)*x1775))+(((-1.0)*x1774))+(((-1.0)*r22*x1768))+((sj4*x1769)));
evalcond[2]=((((-0.12)*x1769))+(((-1.0)*x1759*x1763))+(((-1.0)*pz))+(((-0.35575)*x1774))+(((0.12)*x1762))+(((0.35575)*cj1)));
evalcond[3]=((((-0.12)*x1767))+(((-1.0)*x1763))+(((-1.0)*py))+(((0.12)*x1770))+(((-0.35575)*x1773))+((x1760*x1763)));
evalcond[4]=(x1775+x1774+((x1761*x1770))+((r11*x1766))+((r10*x1771))+(((-1.0)*cj3*r12*x1764))+(((-1.0)*r10*x1761*x1765)));
evalcond[5]=(((r21*x1766))+x1772+(((-1.0)*cj3*r22*x1764))+((r20*x1771))+(((-1.0)*x1776))+(((-1.0)*r20*x1761*x1765))+((x1761*x1762)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1777=((0.33731553056922)*cj5);
IkReal x1778=(r01*sj5);
IkReal x1779=(cj5*sj4);
IkReal x1780=((1.0)*cj4);
IkReal x1781=((1.0)*sj4);
IkReal x1782=(r21*sj5);
if( IKabs((((r00*x1779))+((r00*x1777))+(((2.8109627547435)*px))+(((-0.33731553056922)*x1778))+(((-1.0)*x1778*x1781))+(((-1.0)*r02*x1780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1780))+(((2.8109627547435)*pz))+((r20*x1779))+((r20*x1777))+(((-1.0)*x1781*x1782))+(((-0.33731553056922)*x1782)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*x1779))+((r00*x1777))+(((2.8109627547435)*px))+(((-0.33731553056922)*x1778))+(((-1.0)*x1778*x1781))+(((-1.0)*r02*x1780))))+IKsqr(((((-1.0)*r22*x1780))+(((2.8109627547435)*pz))+((r20*x1779))+((r20*x1777))+(((-1.0)*x1781*x1782))+(((-0.33731553056922)*x1782))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r00*x1779))+((r00*x1777))+(((2.8109627547435)*px))+(((-0.33731553056922)*x1778))+(((-1.0)*x1778*x1781))+(((-1.0)*r02*x1780))), ((((-1.0)*r22*x1780))+(((2.8109627547435)*pz))+((r20*x1779))+((r20*x1777))+(((-1.0)*x1781*x1782))+(((-0.33731553056922)*x1782))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1783=((1.0)*px);
IkReal x1784=((0.35575)*r21);
IkReal x1785=(cj5*sj3);
IkReal x1786=(sj4*sj5);
IkReal x1787=((0.35575)*cj4);
IkReal x1788=((0.35575)*r01);
IkReal x1789=((0.12)*cj5);
IkReal x1790=((0.12)*sj5);
IkReal x1791=(cj5*r00);
IkReal x1792=((0.35575)*sj4);
IkReal x1793=(cj5*r20);
IkReal x1794=(r20*x1789);
IkReal x1795=(r21*x1790);
IkReal x1796=((0.35575)*(IKcos(j1)));
IkReal x1797=((0.35575)*(IKsin(j1)));
IkReal x1798=(r01*x1790);
IkReal x1799=(r00*x1789);
IkReal x1800=(cj3*cj4*sj5);
IkReal x1801=(cj3*x1792);
IkReal x1802=((0.35575)*sj3*sj5);
IkReal x1803=(x1783+x1799);
IkReal x1804=(x1796+x1795);
IkReal x1805=(x1798+x1797);
evalcond[0]=((((-1.0)*x1792*x1793))+(((-1.0)*x1794))+(((-1.0)*pz))+((r22*x1787))+((x1784*x1786))+x1804);
evalcond[1]=((((-1.0)*x1803))+x1805+((r02*x1787))+((x1786*x1788))+(((-1.0)*x1791*x1792)));
evalcond[2]=(x1794+(((-1.0)*cj3*x1787*x1791))+(((-1.0)*x1804))+pz+(((-1.0)*r02*x1801))+((x1785*x1788))+((r00*x1802))+((cj3*r01*sj5*x1787)));
evalcond[3]=(((x1784*x1800))+(((-1.0)*cj3*x1787*x1793))+(((-1.0)*x1803))+((x1784*x1785))+x1805+((r20*x1802))+(((-1.0)*r22*x1801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1806=((1.0)*cj1);
IkReal x1807=(cj4*r22);
IkReal x1808=(cj5*sj4);
IkReal x1809=(sj4*sj5);
IkReal x1810=((1.0)*sj1);
IkReal x1811=(cj4*r02);
if( IKabs((((r00*sj1*x1808))+(((-1.0)*x1810*x1811))+((cj1*r20*x1808))+(((-1.0)*r21*x1806*x1809))+(((-1.0)*x1806*x1807))+(((-1.0)*r01*x1809*x1810)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1809*x1810))+(((-1.0)*x1807*x1810))+((cj1*r01*x1809))+((cj1*x1811))+((r20*sj1*x1808))+(((-1.0)*r00*x1806*x1808)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj1*x1808))+(((-1.0)*x1810*x1811))+((cj1*r20*x1808))+(((-1.0)*r21*x1806*x1809))+(((-1.0)*x1806*x1807))+(((-1.0)*r01*x1809*x1810))))+IKsqr(((((-1.0)*r21*x1809*x1810))+(((-1.0)*x1807*x1810))+((cj1*r01*x1809))+((cj1*x1811))+((r20*sj1*x1808))+(((-1.0)*r00*x1806*x1808))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r00*sj1*x1808))+(((-1.0)*x1810*x1811))+((cj1*r20*x1808))+(((-1.0)*r21*x1806*x1809))+(((-1.0)*x1806*x1807))+(((-1.0)*r01*x1809*x1810))), ((((-1.0)*r21*x1809*x1810))+(((-1.0)*x1807*x1810))+((cj1*r01*x1809))+((cj1*x1811))+((r20*sj1*x1808))+(((-1.0)*r00*x1806*x1808))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1812=IKcos(j2);
IkReal x1813=IKsin(j2);
IkReal x1814=((1.0)*cj3);
IkReal x1815=(cj5*r00);
IkReal x1816=((0.35575)*sj1);
IkReal x1817=(cj5*sj3);
IkReal x1818=((1.0)*cj4);
IkReal x1819=(cj5*r20);
IkReal x1820=((1.0)*sj1);
IkReal x1821=(sj3*sj5);
IkReal x1822=((0.12)*sj5);
IkReal x1823=((0.35575)*cj1);
IkReal x1824=(cj1*x1812);
IkReal x1825=(cj3*cj4*sj5);
IkReal x1826=((1.0)*sj4*sj5);
IkReal x1827=(x1812*x1820);
IkReal x1828=((1.0)*cj1*x1813);
IkReal x1829=(x1828+x1827);
evalcond[0]=((((-1.0)*x1813*x1820))+(((-1.0)*r02*x1818))+(((-1.0)*r01*x1826))+x1824+((sj4*x1815)));
evalcond[1]=((((-1.0)*x1829))+((sj4*x1819))+(((-1.0)*r21*x1826))+(((-1.0)*r22*x1818)));
evalcond[2]=((((-1.0)*x1812*x1816))+(((-1.0)*x1813*x1823))+(((-1.0)*pz))+x1823+(((-0.12)*x1819))+((r21*x1822)));
evalcond[3]=((((-1.0)*x1813*x1816))+((x1812*x1823))+((r01*x1822))+(((-1.0)*px))+x1816+(((-0.12)*x1815)));
evalcond[4]=((((-1.0)*r22*sj4*x1814))+(((-1.0)*x1824))+((sj1*x1813))+(((-1.0)*cj4*x1814*x1819))+((r21*x1817))+((r21*x1825))+((r20*x1821)));
evalcond[5]=((((-1.0)*x1829))+((r00*x1821))+((r01*x1825))+((r01*x1817))+(((-1.0)*r02*sj4*x1814))+(((-1.0)*cj4*x1814*x1815)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1830=((0.33731553056922)*cj5);
IkReal x1831=(r01*sj5);
IkReal x1832=((1.0)*sj4);
IkReal x1833=(r21*sj5);
if( IKabs(((((-1.0)*r00*x1830))+(((-1.0)*cj5*r00*x1832))+(((-2.8109627547435)*px))+(((0.33731553056922)*x1831))+((sj4*x1831))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1832*x1833))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x1833))+((r20*x1830))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1830))+(((-1.0)*cj5*r00*x1832))+(((-2.8109627547435)*px))+(((0.33731553056922)*x1831))+((sj4*x1831))+((cj4*r02))))+IKsqr(((((-1.0)*x1832*x1833))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x1833))+((r20*x1830))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r00*x1830))+(((-1.0)*cj5*r00*x1832))+(((-2.8109627547435)*px))+(((0.33731553056922)*x1831))+((sj4*x1831))+((cj4*r02))), ((((-1.0)*x1832*x1833))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x1833))+((r20*x1830))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1834=((1.0)*pz);
IkReal x1835=((0.35575)*r21);
IkReal x1836=(cj5*sj3);
IkReal x1837=((0.35575)*r22);
IkReal x1838=(cj3*sj4);
IkReal x1839=(sj4*sj5);
IkReal x1840=((0.35575)*r02);
IkReal x1841=((0.35575)*r01);
IkReal x1842=((0.12)*cj5);
IkReal x1843=((0.12)*sj5);
IkReal x1844=(cj3*cj4);
IkReal x1845=(r01*x1843);
IkReal x1846=((0.35575)*(IKsin(j1)));
IkReal x1847=(r00*x1842);
IkReal x1848=(r21*x1843);
IkReal x1849=((0.35575)*(IKcos(j1)));
IkReal x1850=(r20*x1842);
IkReal x1851=(sj5*x1844);
IkReal x1852=((0.35575)*sj3*sj5);
IkReal x1853=((0.35575)*cj5*r00);
IkReal x1854=((0.35575)*cj5*r20);
IkReal x1855=(x1850+x1834);
IkReal x1856=(x1849+x1848);
IkReal x1857=(x1847+x1846);
evalcond[0]=((((-1.0)*cj4*x1840))+(((-1.0)*x1845))+((sj4*x1853))+(((-1.0)*x1839*x1841))+px+x1857);
evalcond[1]=(((x1835*x1839))+(((-1.0)*sj4*x1854))+((cj4*x1837))+x1856+(((-1.0)*x1855)));
evalcond[2]=(((x1844*x1854))+(((-1.0)*x1835*x1836))+(((-1.0)*px))+(((-1.0)*x1835*x1851))+x1845+((x1837*x1838))+(((-1.0)*x1857))+(((-1.0)*r20*x1852)));
evalcond[3]=(((x1836*x1841))+((r00*x1852))+x1856+(((-1.0)*x1838*x1840))+(((-1.0)*x1844*x1853))+(((-1.0)*x1855))+((x1841*x1851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1858=(sj1*sj4);
IkReal x1859=(r01*sj5);
IkReal x1860=((1.0)*cj1);
IkReal x1861=(cj4*r22);
IkReal x1862=(cj4*r02);
IkReal x1863=(cj5*r20);
IkReal x1864=(cj1*sj4);
IkReal x1865=(cj5*r00);
IkReal x1866=(r21*sj5);
if( IKabs(((((-1.0)*x1860*x1861))+(((-1.0)*sj4*x1860*x1866))+((x1863*x1864))+((sj1*x1862))+(((-1.0)*x1858*x1865))+((x1858*x1859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x1861))+((x1864*x1865))+(((-1.0)*x1860*x1862))+((x1858*x1863))+(((-1.0)*sj4*x1859*x1860))+(((-1.0)*x1858*x1866)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1860*x1861))+(((-1.0)*sj4*x1860*x1866))+((x1863*x1864))+((sj1*x1862))+(((-1.0)*x1858*x1865))+((x1858*x1859))))+IKsqr(((((-1.0)*sj1*x1861))+((x1864*x1865))+(((-1.0)*x1860*x1862))+((x1858*x1863))+(((-1.0)*sj4*x1859*x1860))+(((-1.0)*x1858*x1866))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1860*x1861))+(((-1.0)*sj4*x1860*x1866))+((x1863*x1864))+((sj1*x1862))+(((-1.0)*x1858*x1865))+((x1858*x1859))), ((((-1.0)*sj1*x1861))+((x1864*x1865))+(((-1.0)*x1860*x1862))+((x1858*x1863))+(((-1.0)*sj4*x1859*x1860))+(((-1.0)*x1858*x1866))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1867=IKcos(j2);
IkReal x1868=IKsin(j2);
IkReal x1869=(cj3*cj4);
IkReal x1870=(r21*sj5);
IkReal x1871=(cj5*r00);
IkReal x1872=((0.35575)*sj1);
IkReal x1873=(r01*sj5);
IkReal x1874=((1.0)*sj4);
IkReal x1875=(cj5*sj3);
IkReal x1876=((1.0)*cj4);
IkReal x1877=(cj5*r20);
IkReal x1878=(sj3*sj5);
IkReal x1879=(sj1*x1868);
IkReal x1880=(cj1*x1868);
IkReal x1881=(cj1*x1867);
IkReal x1882=(sj1*x1867);
IkReal x1883=((1.0)*x1881);
evalcond[0]=((((-1.0)*x1873*x1874))+(((-1.0)*r02*x1876))+x1879+(((-1.0)*x1883))+((sj4*x1871)));
evalcond[1]=((((-1.0)*r22*x1876))+(((-1.0)*x1870*x1874))+(((-1.0)*x1880))+(((-1.0)*x1882))+((sj4*x1877)));
evalcond[2]=((((-0.35575)*x1880))+(((-1.0)*pz))+(((-1.0)*x1867*x1872))+(((-0.12)*x1877))+(((0.35575)*cj1))+(((0.12)*x1870)));
evalcond[3]=((((-0.35575)*x1881))+(((-1.0)*x1872))+(((-1.0)*px))+(((-0.12)*x1871))+((x1868*x1872))+(((0.12)*x1873)));
evalcond[4]=((((-1.0)*x1869*x1871))+((r01*x1875))+((r00*x1878))+x1882+x1880+((x1869*x1873))+(((-1.0)*cj3*r02*x1874)));
evalcond[5]=((((-1.0)*x1869*x1877))+(((-1.0)*cj3*r22*x1874))+((r20*x1878))+x1879+((r21*x1875))+((x1869*x1870))+(((-1.0)*x1883)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1884=((0.35575)*cj0);
IkReal x1885=(r01*sj5);
IkReal x1886=((0.12)*cj0);
IkReal x1887=(cj5*r00);
IkReal x1888=(cj5*r20);
IkReal x1889=(r21*sj5);
CheckValue<IkReal> x1890=IKPowWithIntegerCheck(cj0,-2);
if(!x1890.valid){
continue;
}
if( IKabs(((-2.8109627547435)*(x1890.value)*((((cj4*r02*x1884))+((sj4*x1884*x1885))+(((-1.0)*sj4*x1884*x1887))+(((-1.0)*x1886*x1887))+((x1885*x1886))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.33731553056922)*x1888))+(((-0.33731553056922)*x1889))+(((-1.0)*sj4*x1889))+((sj4*x1888))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.8109627547435)*(x1890.value)*((((cj4*r02*x1884))+((sj4*x1884*x1885))+(((-1.0)*sj4*x1884*x1887))+(((-1.0)*x1886*x1887))+((x1885*x1886))+(((-1.0)*cj0*px))))))+IKsqr(((((0.33731553056922)*x1888))+(((-0.33731553056922)*x1889))+(((-1.0)*sj4*x1889))+((sj4*x1888))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.8109627547435)*(x1890.value)*((((cj4*r02*x1884))+((sj4*x1884*x1885))+(((-1.0)*sj4*x1884*x1887))+(((-1.0)*x1886*x1887))+((x1885*x1886))+(((-1.0)*cj0*px))))), ((((0.33731553056922)*x1888))+(((-0.33731553056922)*x1889))+(((-1.0)*sj4*x1889))+((sj4*x1888))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1891=IKsin(j1);
IkReal x1892=IKcos(j1);
IkReal x1893=((0.35575)*cj0);
IkReal x1894=(cj4*r02);
IkReal x1895=((1.0)*py);
IkReal x1896=((0.35575)*sj0);
IkReal x1897=(sj3*sj5);
IkReal x1898=(r21*sj5);
IkReal x1899=((0.12)*sj0);
IkReal x1900=(sj4*sj5);
IkReal x1901=(cj5*sj4);
IkReal x1902=((0.35575)*sj4);
IkReal x1903=((0.35575)*r10);
IkReal x1904=((0.35575)*r00);
IkReal x1905=(cj5*r10);
IkReal x1906=(cj4*r12);
IkReal x1907=((0.35575)*cj4);
IkReal x1908=(cj5*sj3);
IkReal x1909=(cj5*r20);
IkReal x1910=(cj3*cj4);
IkReal x1911=((1.0)*px);
IkReal x1912=(cj5*r00);
IkReal x1913=(r11*sj5);
IkReal x1914=(r01*sj5);
IkReal x1915=((0.12)*cj0*cj5);
IkReal x1916=((0.35575)*x1891);
IkReal x1917=((0.12)*cj0*sj5);
IkReal x1918=(cj3*r22*sj4);
IkReal x1919=(sj0*x1891*x1893);
evalcond[0]=(((x1898*x1902))+(((-0.35575)*r20*x1901))+(((-1.0)*pz))+(((0.35575)*x1892))+((r22*x1907))+(((-0.12)*x1909))+(((0.12)*x1898)));
evalcond[1]=((((-1.0)*x1899*x1905))+((sj0*x1891*x1896))+((x1899*x1913))+((r11*x1896*x1900))+(((-1.0)*sj0*x1895))+(((-1.0)*r10*x1896*x1901))+((x1896*x1906)));
evalcond[2]=((((-1.0)*cj0*x1911))+((x1893*x1894))+(((0.12)*cj0*x1914))+((r01*x1893*x1900))+(((-1.0)*r00*x1893*x1901))+(((-0.12)*cj0*x1912))+((cj0*x1891*x1893)));
evalcond[3]=((((-1.0)*x1892*x1896))+(((-1.0)*cj3*r12*x1902))+(((0.35575)*r11*x1908))+(((-1.0)*cj5*x1903*x1910))+(((-1.0)*x1898*x1899))+((x1899*x1909))+((pz*sj0))+((x1897*x1903))+((cj3*x1907*x1913)));
evalcond[4]=((((-1.0)*x1892*x1893))+(((0.12)*cj0*x1909))+(((-0.12)*cj0*x1898))+(((-1.0)*cj3*r02*x1902))+(((-1.0)*cj5*x1904*x1910))+((cj0*pz))+((x1897*x1904))+(((0.35575)*r01*x1908))+((cj3*x1907*x1914)));
evalcond[5]=((((0.12)*x1913))+((r21*x1896*x1908))+((x1896*x1898*x1910))+((x1891*x1896))+(((-0.12)*x1905))+(((-1.0)*x1896*x1909*x1910))+(((-1.0)*x1895))+(((-1.0)*x1896*x1918))+((r20*x1896*x1897)));
evalcond[6]=(((r21*x1893*x1908))+(((0.12)*x1914))+(((-1.0)*x1893*x1909*x1910))+((x1891*x1893))+(((-1.0)*x1893*x1918))+((x1893*x1898*x1910))+(((-0.12)*x1912))+(((-1.0)*x1911))+((r20*x1893*x1897)));
evalcond[7]=((((-1.0)*x1899*x1912))+(((-1.0)*r10*x1893*x1901))+((x1899*x1914))+x1919+((r11*x1893*x1900))+(((-1.0)*sj0*x1911))+((x1893*x1906)));
evalcond[8]=(((r01*x1896*x1900))+(((0.12)*cj0*x1913))+(((-1.0)*r00*x1896*x1901))+x1919+(((-0.12)*cj0*x1905))+(((-1.0)*cj0*x1895))+((x1894*x1896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1920=((1.0)*cj1);
IkReal x1921=(cj4*r22);
IkReal x1922=(cj5*sj4);
IkReal x1923=(sj4*sj5);
IkReal x1924=((1.0)*sj1);
IkReal x1925=(cj4*r02);
if( IKabs(((((-1.0)*r01*x1923*x1924))+(((-1.0)*r21*x1920*x1923))+((cj1*r20*x1922))+(((-1.0)*x1924*x1925))+((r00*sj1*x1922))+(((-1.0)*x1920*x1921)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1925))+(((-1.0)*r21*x1923*x1924))+((r20*sj1*x1922))+(((-1.0)*x1921*x1924))+(((-1.0)*r00*x1920*x1922))+((cj1*r01*x1923)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x1923*x1924))+(((-1.0)*r21*x1920*x1923))+((cj1*r20*x1922))+(((-1.0)*x1924*x1925))+((r00*sj1*x1922))+(((-1.0)*x1920*x1921))))+IKsqr((((cj1*x1925))+(((-1.0)*r21*x1923*x1924))+((r20*sj1*x1922))+(((-1.0)*x1921*x1924))+(((-1.0)*r00*x1920*x1922))+((cj1*r01*x1923))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x1923*x1924))+(((-1.0)*r21*x1920*x1923))+((cj1*r20*x1922))+(((-1.0)*x1924*x1925))+((r00*sj1*x1922))+(((-1.0)*x1920*x1921))), (((cj1*x1925))+(((-1.0)*r21*x1923*x1924))+((r20*sj1*x1922))+(((-1.0)*x1921*x1924))+(((-1.0)*r00*x1920*x1922))+((cj1*r01*x1923))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1926=IKcos(j2);
IkReal x1927=IKsin(j2);
IkReal x1928=((1.0)*cj3);
IkReal x1929=(cj5*r00);
IkReal x1930=((0.35575)*sj1);
IkReal x1931=(cj5*sj3);
IkReal x1932=((1.0)*cj4);
IkReal x1933=(cj5*r20);
IkReal x1934=((1.0)*sj1);
IkReal x1935=(sj3*sj5);
IkReal x1936=((0.12)*sj5);
IkReal x1937=((0.35575)*cj1);
IkReal x1938=(cj1*x1926);
IkReal x1939=(cj3*cj4*sj5);
IkReal x1940=((1.0)*sj4*sj5);
IkReal x1941=(x1926*x1934);
IkReal x1942=((1.0)*cj1*x1927);
IkReal x1943=(x1942+x1941);
evalcond[0]=(((sj4*x1929))+x1938+(((-1.0)*r01*x1940))+(((-1.0)*x1927*x1934))+(((-1.0)*r02*x1932)));
evalcond[1]=((((-1.0)*r21*x1940))+(((-1.0)*x1943))+((sj4*x1933))+(((-1.0)*r22*x1932)));
evalcond[2]=(((r21*x1936))+(((-1.0)*pz))+(((-1.0)*x1926*x1930))+x1937+(((-0.12)*x1933))+(((-1.0)*x1927*x1937)));
evalcond[3]=(((r01*x1936))+(((-0.12)*x1929))+(((-1.0)*px))+((x1926*x1937))+x1930+(((-1.0)*x1927*x1930)));
evalcond[4]=((((-1.0)*cj4*x1928*x1933))+(((-1.0)*r22*sj4*x1928))+(((-1.0)*x1938))+((r21*x1939))+((r21*x1931))+((r20*x1935))+((sj1*x1927)));
evalcond[5]=(((r00*x1935))+(((-1.0)*cj4*x1928*x1929))+(((-1.0)*x1943))+((r01*x1939))+((r01*x1931))+(((-1.0)*r02*sj4*x1928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1944=(sj1*sj4);
IkReal x1945=(r01*sj5);
IkReal x1946=((1.0)*cj1);
IkReal x1947=(cj4*r22);
IkReal x1948=(cj4*r02);
IkReal x1949=(cj5*r20);
IkReal x1950=(cj1*sj4);
IkReal x1951=(cj5*r00);
IkReal x1952=(r21*sj5);
if( IKabs(((((-1.0)*x1944*x1951))+(((-1.0)*sj4*x1946*x1952))+((x1944*x1945))+((sj1*x1948))+(((-1.0)*x1946*x1947))+((x1949*x1950)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1944*x1952))+((x1944*x1949))+((x1950*x1951))+(((-1.0)*x1946*x1948))+(((-1.0)*sj1*x1947))+(((-1.0)*sj4*x1945*x1946)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1944*x1951))+(((-1.0)*sj4*x1946*x1952))+((x1944*x1945))+((sj1*x1948))+(((-1.0)*x1946*x1947))+((x1949*x1950))))+IKsqr(((((-1.0)*x1944*x1952))+((x1944*x1949))+((x1950*x1951))+(((-1.0)*x1946*x1948))+(((-1.0)*sj1*x1947))+(((-1.0)*sj4*x1945*x1946))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1944*x1951))+(((-1.0)*sj4*x1946*x1952))+((x1944*x1945))+((sj1*x1948))+(((-1.0)*x1946*x1947))+((x1949*x1950))), ((((-1.0)*x1944*x1952))+((x1944*x1949))+((x1950*x1951))+(((-1.0)*x1946*x1948))+(((-1.0)*sj1*x1947))+(((-1.0)*sj4*x1945*x1946))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1953=IKcos(j2);
IkReal x1954=IKsin(j2);
IkReal x1955=(cj3*cj4);
IkReal x1956=(r21*sj5);
IkReal x1957=(cj5*r00);
IkReal x1958=((0.35575)*sj1);
IkReal x1959=(r01*sj5);
IkReal x1960=((1.0)*sj4);
IkReal x1961=(cj5*sj3);
IkReal x1962=((1.0)*cj4);
IkReal x1963=(cj5*r20);
IkReal x1964=(sj3*sj5);
IkReal x1965=(sj1*x1954);
IkReal x1966=(cj1*x1954);
IkReal x1967=(cj1*x1953);
IkReal x1968=(sj1*x1953);
IkReal x1969=((1.0)*x1967);
evalcond[0]=((((-1.0)*x1959*x1960))+(((-1.0)*r02*x1962))+(((-1.0)*x1969))+x1965+((sj4*x1957)));
evalcond[1]=((((-1.0)*x1956*x1960))+(((-1.0)*r22*x1962))+(((-1.0)*x1966))+(((-1.0)*x1968))+((sj4*x1963)));
evalcond[2]=((((-0.35575)*x1966))+(((-1.0)*pz))+(((-1.0)*x1953*x1958))+(((0.12)*x1956))+(((0.35575)*cj1))+(((-0.12)*x1963)));
evalcond[3]=((((-0.12)*x1957))+(((-1.0)*x1958))+(((-0.35575)*x1967))+((x1954*x1958))+(((-1.0)*px))+(((0.12)*x1959)));
evalcond[4]=((((-1.0)*cj3*r02*x1960))+((x1955*x1959))+(((-1.0)*x1955*x1957))+((r00*x1964))+x1968+x1966+((r01*x1961)));
evalcond[5]=(((r20*x1964))+(((-1.0)*x1955*x1963))+((x1955*x1956))+(((-1.0)*x1969))+((r21*x1961))+x1965+(((-1.0)*cj3*r22*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1970=(cj1*cj4);
IkReal x1971=((1.0)*r22);
IkReal x1972=(cj5*sj4);
IkReal x1973=((1.0)*cj1);
IkReal x1974=((1.0)*sj1);
IkReal x1975=(sj4*sj5);
if( IKabs((((cj1*r20*x1972))+((r10*sj1*x1972))+(((-1.0)*cj4*r12*x1974))+(((-1.0)*r11*x1974*x1975))+(((-1.0)*x1970*x1971))+(((-1.0)*r21*x1973*x1975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1972*x1973))+((r20*sj1*x1972))+((r12*x1970))+(((-1.0)*cj4*sj1*x1971))+((cj1*r11*x1975))+(((-1.0)*r21*x1974*x1975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1972))+((r10*sj1*x1972))+(((-1.0)*cj4*r12*x1974))+(((-1.0)*r11*x1974*x1975))+(((-1.0)*x1970*x1971))+(((-1.0)*r21*x1973*x1975))))+IKsqr(((((-1.0)*r10*x1972*x1973))+((r20*sj1*x1972))+((r12*x1970))+(((-1.0)*cj4*sj1*x1971))+((cj1*r11*x1975))+(((-1.0)*r21*x1974*x1975))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1972))+((r10*sj1*x1972))+(((-1.0)*cj4*r12*x1974))+(((-1.0)*r11*x1974*x1975))+(((-1.0)*x1970*x1971))+(((-1.0)*r21*x1973*x1975))), ((((-1.0)*r10*x1972*x1973))+((r20*sj1*x1972))+((r12*x1970))+(((-1.0)*cj4*sj1*x1971))+((cj1*r11*x1975))+(((-1.0)*r21*x1974*x1975))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1976=IKcos(j2);
IkReal x1977=IKsin(j2);
IkReal x1978=(cj3*cj4);
IkReal x1979=(r21*sj5);
IkReal x1980=((0.35575)*sj1);
IkReal x1981=((1.0)*sj4);
IkReal x1982=((1.0)*cj5);
IkReal x1983=(cj5*sj3);
IkReal x1984=((1.0)*sj1);
IkReal x1985=(cj5*r10);
IkReal x1986=((1.0)*cj4);
IkReal x1987=(cj5*r20);
IkReal x1988=(sj3*sj5);
IkReal x1989=((0.35575)*cj1);
IkReal x1990=(r11*sj5);
IkReal x1991=(cj1*x1976);
IkReal x1992=(x1976*x1984);
IkReal x1993=((1.0)*cj1*x1977);
IkReal x1994=(x1993+x1992);
evalcond[0]=((((-1.0)*x1981*x1990))+(((-1.0)*r12*x1986))+x1991+((sj4*x1985))+(((-1.0)*x1977*x1984)));
evalcond[1]=((((-1.0)*x1979*x1981))+((sj4*x1987))+(((-1.0)*x1994))+(((-1.0)*r22*x1986)));
evalcond[2]=((((-1.0)*x1976*x1980))+(((-1.0)*pz))+x1989+(((-1.0)*x1977*x1989))+(((-0.12)*x1987))+(((0.12)*x1979)));
evalcond[3]=(((x1976*x1989))+(((-1.0)*py))+x1980+(((-1.0)*x1977*x1980))+(((0.12)*x1990))+(((-0.12)*x1985)));
evalcond[4]=(((sj1*x1977))+((r21*x1983))+(((-1.0)*cj3*r22*x1981))+(((-1.0)*r20*x1978*x1982))+((x1978*x1979))+(((-1.0)*x1991))+((r20*x1988)));
evalcond[5]=((((-1.0)*r10*x1978*x1982))+(((-1.0)*cj3*r12*x1981))+((r11*x1983))+((r10*x1988))+(((-1.0)*x1994))+((x1978*x1990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1995=(cj1*sj4);
IkReal x1996=(cj5*r20);
IkReal x1997=(r11*sj5);
IkReal x1998=(sj1*sj4);
IkReal x1999=(cj4*r12);
IkReal x2000=(cj5*r10);
IkReal x2001=((1.0)*cj4*r22);
IkReal x2002=((1.0)*r21*sj5);
if( IKabs((((sj1*x1999))+(((-1.0)*x1995*x2002))+(((-1.0)*x1998*x2000))+((x1995*x1996))+(((-1.0)*cj1*x2001))+((x1997*x1998)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1996*x1998))+(((-1.0)*x1998*x2002))+(((-1.0)*x1995*x1997))+(((-1.0)*sj1*x2001))+((x1995*x2000))+(((-1.0)*cj1*x1999)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x1999))+(((-1.0)*x1995*x2002))+(((-1.0)*x1998*x2000))+((x1995*x1996))+(((-1.0)*cj1*x2001))+((x1997*x1998))))+IKsqr((((x1996*x1998))+(((-1.0)*x1998*x2002))+(((-1.0)*x1995*x1997))+(((-1.0)*sj1*x2001))+((x1995*x2000))+(((-1.0)*cj1*x1999))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x1999))+(((-1.0)*x1995*x2002))+(((-1.0)*x1998*x2000))+((x1995*x1996))+(((-1.0)*cj1*x2001))+((x1997*x1998))), (((x1996*x1998))+(((-1.0)*x1998*x2002))+(((-1.0)*x1995*x1997))+(((-1.0)*sj1*x2001))+((x1995*x2000))+(((-1.0)*cj1*x1999))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2003=IKcos(j2);
IkReal x2004=IKsin(j2);
IkReal x2005=(cj3*cj4);
IkReal x2006=(r21*sj5);
IkReal x2007=((0.35575)*sj1);
IkReal x2008=((1.0)*sj4);
IkReal x2009=((1.0)*cj5);
IkReal x2010=(cj5*sj3);
IkReal x2011=(cj5*r10);
IkReal x2012=((1.0)*cj4);
IkReal x2013=(cj5*r20);
IkReal x2014=(r11*sj5);
IkReal x2015=(sj3*sj5);
IkReal x2016=(sj1*x2004);
IkReal x2017=(cj1*x2003);
IkReal x2018=(cj1*x2004);
IkReal x2019=(sj1*x2003);
IkReal x2020=((1.0)*x2017);
evalcond[0]=((((-1.0)*x2008*x2014))+((sj4*x2011))+x2016+(((-1.0)*r12*x2012))+(((-1.0)*x2020)));
evalcond[1]=((((-1.0)*x2006*x2008))+((sj4*x2013))+(((-1.0)*x2019))+(((-1.0)*x2018))+(((-1.0)*r22*x2012)));
evalcond[2]=((((0.12)*x2006))+(((-1.0)*x2003*x2007))+(((-1.0)*pz))+(((-0.12)*x2013))+(((0.35575)*cj1))+(((-0.35575)*x2018)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*x2007))+(((-0.12)*x2011))+((x2004*x2007))+(((-0.35575)*x2017))+(((0.12)*x2014)));
evalcond[4]=(x2019+x2018+((r10*x2015))+((x2005*x2014))+(((-1.0)*r10*x2005*x2009))+((r11*x2010))+(((-1.0)*cj3*r12*x2008)));
evalcond[5]=(((r20*x2015))+x2016+(((-1.0)*cj3*r22*x2008))+(((-1.0)*r20*x2005*x2009))+((x2005*x2006))+((r21*x2010))+(((-1.0)*x2020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2021=(r20*sj0);
IkReal x2022=((1.0)*sj1);
IkReal x2023=(cj4*r12);
IkReal x2024=(cj5*sj1*sj4);
IkReal x2025=(cj1*cj5*sj4);
IkReal x2026=(cj4*r22*sj0);
IkReal x2027=(r11*sj4*sj5);
IkReal x2028=((1.0)*r21*sj0*sj4*sj5);
CheckValue<IkReal> x2029 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x2026))+(((-1.0)*x2022*x2027))+(((-1.0)*x2022*x2023))+((r10*x2024))+(((-1.0)*cj1*x2028))+((x2021*x2025)))),IkReal(((((-1.0)*x2022*x2026))+(((-1.0)*r21*sj0*sj4*sj5*x2022))+((cj1*x2027))+((cj1*x2023))+(((-1.0)*r10*x2025))+((x2021*x2024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2029.valid){
continue;
}
CheckValue<IkReal> x2030=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2030.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2029.value)+(((1.5707963267949)*(x2030.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2031=IKcos(j2);
IkReal x2032=IKsin(j2);
IkReal x2033=((1.0)*cj3);
IkReal x2034=(cj4*cj5);
IkReal x2035=(cj5*r10);
IkReal x2036=(cj5*sj3);
IkReal x2037=((0.35575)*cj1);
IkReal x2038=((0.35575)*sj0);
IkReal x2039=((1.0)*sj1);
IkReal x2040=(sj3*sj5);
IkReal x2041=((1.0)*cj4);
IkReal x2042=((0.12)*cj5);
IkReal x2043=((1.0)*cj1);
IkReal x2044=(cj5*sj4);
IkReal x2045=((0.12)*sj5);
IkReal x2046=((0.35575)*cj0*sj1);
IkReal x2047=(cj3*cj4*sj5);
IkReal x2048=(cj1*x2031);
IkReal x2049=((1.0)*sj4*sj5);
IkReal x2050=(sj0*x2039);
IkReal x2051=(cj0*x2032);
IkReal x2052=(sj1*x2032);
evalcond[0]=((((-1.0)*r22*x2041))+((r20*x2044))+(((-1.0)*r21*x2049))+(((-1.0)*x2032*x2043))+(((-1.0)*x2031*x2039)));
evalcond[1]=(((r21*x2045))+x2037+(((-0.35575)*sj1*x2031))+(((-1.0)*pz))+(((-1.0)*r20*x2042))+(((-1.0)*x2032*x2037)));
evalcond[2]=(((cj0*x2048))+(((-1.0)*r02*x2041))+(((-1.0)*x2039*x2051))+(((-1.0)*r01*x2049))+((r00*x2044)));
evalcond[3]=(((sj0*x2048))+((sj4*x2035))+(((-1.0)*x2032*x2050))+(((-1.0)*r11*x2049))+(((-1.0)*r12*x2041)));
evalcond[4]=(x2046+(((-1.0)*px))+((cj0*x2031*x2037))+(((-1.0)*x2032*x2046))+((r01*x2045))+(((-1.0)*r00*x2042)));
evalcond[5]=(((sj0*x2031*x2037))+((r11*x2045))+(((-1.0)*py))+((sj1*x2038))+(((-0.12)*x2035))+(((-1.0)*x2038*x2052)));
evalcond[6]=(((r21*x2047))+((r21*x2036))+x2052+((r20*x2040))+(((-1.0)*r20*x2033*x2034))+(((-1.0)*x2031*x2043))+(((-1.0)*r22*sj4*x2033)));
evalcond[7]=(((r01*x2036))+(((-1.0)*r02*sj4*x2033))+(((-1.0)*x2043*x2051))+((r01*x2047))+((r00*x2040))+(((-1.0)*r00*x2033*x2034))+(((-1.0)*cj0*x2031*x2039)));
evalcond[8]=((((-1.0)*sj0*x2032*x2043))+(((-1.0)*r12*sj4*x2033))+((r11*x2047))+(((-1.0)*r10*x2033*x2034))+((r10*x2040))+((r11*x2036))+(((-1.0)*x2031*x2050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2053=(sj4*sj5);
IkReal x2054=((1.0)*cj0);
IkReal x2055=(cj1*cj4);
IkReal x2056=(cj5*sj4);
IkReal x2057=(cj4*sj1);
IkReal x2058=(cj0*r20);
CheckValue<IkReal> x2059 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*r21*x2053*x2054))+((cj1*x2056*x2058))+(((-1.0)*r02*x2057))+(((-1.0)*r22*x2054*x2055))+(((-1.0)*r01*sj1*x2053))+((r00*sj1*x2056)))),IkReal(((((-1.0)*cj1*r00*x2056))+((cj1*r01*x2053))+(((-1.0)*r21*sj1*x2053*x2054))+((sj1*x2056*x2058))+((r02*x2055))+(((-1.0)*r22*x2054*x2057)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2059.valid){
continue;
}
CheckValue<IkReal> x2060=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2060.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2059.value)+(((1.5707963267949)*(x2060.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2061=IKcos(j2);
IkReal x2062=IKsin(j2);
IkReal x2063=((1.0)*cj3);
IkReal x2064=(cj4*cj5);
IkReal x2065=(cj5*r10);
IkReal x2066=(cj5*sj3);
IkReal x2067=((0.35575)*cj1);
IkReal x2068=((0.35575)*sj0);
IkReal x2069=((1.0)*sj1);
IkReal x2070=(sj3*sj5);
IkReal x2071=((1.0)*cj4);
IkReal x2072=((0.12)*cj5);
IkReal x2073=((1.0)*cj1);
IkReal x2074=(cj5*sj4);
IkReal x2075=((0.12)*sj5);
IkReal x2076=((0.35575)*cj0*sj1);
IkReal x2077=(cj3*cj4*sj5);
IkReal x2078=(cj1*x2061);
IkReal x2079=((1.0)*sj4*sj5);
IkReal x2080=(sj0*x2069);
IkReal x2081=(cj0*x2062);
IkReal x2082=(sj1*x2062);
evalcond[0]=((((-1.0)*r22*x2071))+((r20*x2074))+(((-1.0)*r21*x2079))+(((-1.0)*x2061*x2069))+(((-1.0)*x2062*x2073)));
evalcond[1]=(x2067+(((-1.0)*pz))+(((-0.35575)*sj1*x2061))+(((-1.0)*r20*x2072))+(((-1.0)*x2062*x2067))+((r21*x2075)));
evalcond[2]=((((-1.0)*r02*x2071))+(((-1.0)*r01*x2079))+((r00*x2074))+(((-1.0)*x2069*x2081))+((cj0*x2078)));
evalcond[3]=((((-1.0)*r11*x2079))+(((-1.0)*r12*x2071))+((sj4*x2065))+(((-1.0)*x2062*x2080))+((sj0*x2078)));
evalcond[4]=(x2076+(((-1.0)*px))+((r01*x2075))+(((-1.0)*r00*x2072))+(((-1.0)*x2062*x2076))+((cj0*x2061*x2067)));
evalcond[5]=(((sj0*x2061*x2067))+(((-0.12)*x2065))+(((-1.0)*x2068*x2082))+((r11*x2075))+(((-1.0)*py))+((sj1*x2068)));
evalcond[6]=(((r21*x2066))+(((-1.0)*r22*sj4*x2063))+x2082+((r20*x2070))+(((-1.0)*x2061*x2073))+(((-1.0)*r20*x2063*x2064))+((r21*x2077)));
evalcond[7]=((((-1.0)*r00*x2063*x2064))+(((-1.0)*cj0*x2061*x2069))+(((-1.0)*x2073*x2081))+((r01*x2077))+((r01*x2066))+((r00*x2070))+(((-1.0)*r02*sj4*x2063)));
evalcond[8]=((((-1.0)*r12*sj4*x2063))+((r11*x2066))+((r11*x2077))+(((-1.0)*r10*x2063*x2064))+(((-1.0)*x2061*x2080))+((r10*x2070))+(((-1.0)*sj0*x2062*x2073)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2083=((0.12)*sj0);
IkReal x2084=(r11*sj5);
IkReal x2085=(cj5*r20);
IkReal x2086=(cj5*r10);
IkReal x2087=(r21*sj5);
IkReal x2088=((0.35575)*sj0*sj4);
CheckValue<IkReal> x2089=IKPowWithIntegerCheck(sj0,-2);
if(!x2089.valid){
continue;
}
if( IKabs(((-2.8109627547435)*(x2089.value)*(((((0.35575)*cj4*r12*sj0))+((x2084*x2088))+(((-1.0)*x2086*x2088))+((x2083*x2084))+(((-1.0)*x2083*x2086))+(((-1.0)*py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.33731553056922)*x2085))+((sj4*x2085))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2087))+(((-1.0)*cj4*r22))+(((-1.0)*sj4*x2087)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.8109627547435)*(x2089.value)*(((((0.35575)*cj4*r12*sj0))+((x2084*x2088))+(((-1.0)*x2086*x2088))+((x2083*x2084))+(((-1.0)*x2083*x2086))+(((-1.0)*py*sj0))))))+IKsqr(((((0.33731553056922)*x2085))+((sj4*x2085))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2087))+(((-1.0)*cj4*r22))+(((-1.0)*sj4*x2087))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.8109627547435)*(x2089.value)*(((((0.35575)*cj4*r12*sj0))+((x2084*x2088))+(((-1.0)*x2086*x2088))+((x2083*x2084))+(((-1.0)*x2083*x2086))+(((-1.0)*py*sj0))))), ((((0.33731553056922)*x2085))+((sj4*x2085))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2087))+(((-1.0)*cj4*r22))+(((-1.0)*sj4*x2087))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2090=IKsin(j1);
IkReal x2091=IKcos(j1);
IkReal x2092=((0.35575)*cj0);
IkReal x2093=(cj4*r02);
IkReal x2094=((1.0)*py);
IkReal x2095=((0.35575)*sj0);
IkReal x2096=(sj3*sj5);
IkReal x2097=(r21*sj5);
IkReal x2098=((0.12)*sj0);
IkReal x2099=(sj4*sj5);
IkReal x2100=(cj5*sj4);
IkReal x2101=((0.35575)*sj4);
IkReal x2102=((0.35575)*r10);
IkReal x2103=((0.35575)*r00);
IkReal x2104=(cj5*r10);
IkReal x2105=(cj4*r12);
IkReal x2106=((0.35575)*cj4);
IkReal x2107=(cj5*sj3);
IkReal x2108=(cj5*r20);
IkReal x2109=(cj3*cj4);
IkReal x2110=((1.0)*px);
IkReal x2111=(cj5*r00);
IkReal x2112=(r11*sj5);
IkReal x2113=(r01*sj5);
IkReal x2114=((0.12)*cj0*cj5);
IkReal x2115=((0.35575)*x2090);
IkReal x2116=((0.12)*cj0*sj5);
IkReal x2117=(cj3*r22*sj4);
IkReal x2118=(sj0*x2090*x2092);
evalcond[0]=((((0.35575)*x2091))+(((-1.0)*pz))+((r22*x2106))+((x2097*x2101))+(((-0.35575)*r20*x2100))+(((0.12)*x2097))+(((-0.12)*x2108)));
evalcond[1]=((((-1.0)*sj0*x2094))+((r11*x2095*x2099))+(((-1.0)*r10*x2095*x2100))+((sj0*x2090*x2095))+(((-1.0)*x2098*x2104))+((x2098*x2112))+((x2095*x2105)));
evalcond[2]=((((0.12)*cj0*x2113))+((r01*x2092*x2099))+(((-1.0)*cj0*x2110))+(((-0.12)*cj0*x2111))+((x2092*x2093))+((cj0*x2090*x2092))+(((-1.0)*r00*x2092*x2100)));
evalcond[3]=(((x2098*x2108))+(((-1.0)*cj3*r12*x2101))+(((-1.0)*x2097*x2098))+((cj3*x2106*x2112))+(((-1.0)*x2091*x2095))+(((0.35575)*r11*x2107))+((x2096*x2102))+((pz*sj0))+(((-1.0)*cj5*x2102*x2109)));
evalcond[4]=((((0.12)*cj0*x2108))+((cj3*x2106*x2113))+(((-1.0)*x2091*x2092))+(((0.35575)*r01*x2107))+(((-0.12)*cj0*x2097))+((x2096*x2103))+(((-1.0)*cj3*r02*x2101))+((cj0*pz))+(((-1.0)*cj5*x2103*x2109)));
evalcond[5]=((((-1.0)*x2094))+((r21*x2095*x2107))+((r20*x2095*x2096))+(((0.12)*x2112))+((x2090*x2095))+(((-1.0)*x2095*x2108*x2109))+((x2095*x2097*x2109))+(((-0.12)*x2104))+(((-1.0)*x2095*x2117)));
evalcond[6]=((((-0.12)*x2111))+(((-1.0)*x2092*x2117))+(((0.12)*x2113))+((x2090*x2092))+(((-1.0)*x2092*x2108*x2109))+((x2092*x2097*x2109))+(((-1.0)*x2110))+((r20*x2092*x2096))+((r21*x2092*x2107)));
evalcond[7]=((((-1.0)*r10*x2092*x2100))+x2118+((x2092*x2105))+((r11*x2092*x2099))+((x2098*x2113))+(((-1.0)*x2098*x2111))+(((-1.0)*sj0*x2110)));
evalcond[8]=((((-1.0)*r00*x2095*x2100))+(((0.12)*cj0*x2112))+x2118+(((-0.12)*cj0*x2104))+((r01*x2095*x2099))+((x2093*x2095))+(((-1.0)*cj0*x2094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2119=((1.0)*cj1);
IkReal x2120=(cj4*r22);
IkReal x2121=(cj5*sj4);
IkReal x2122=(sj4*sj5);
IkReal x2123=((1.0)*sj1);
IkReal x2124=(cj4*r02);
if( IKabs(((((-1.0)*r21*x2119*x2122))+((r00*sj1*x2121))+(((-1.0)*x2119*x2120))+((cj1*r20*x2121))+(((-1.0)*r01*x2122*x2123))+(((-1.0)*x2123*x2124)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2122*x2123))+((r20*sj1*x2121))+(((-1.0)*r00*x2119*x2121))+(((-1.0)*x2120*x2123))+((cj1*x2124))+((cj1*r01*x2122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2119*x2122))+((r00*sj1*x2121))+(((-1.0)*x2119*x2120))+((cj1*r20*x2121))+(((-1.0)*r01*x2122*x2123))+(((-1.0)*x2123*x2124))))+IKsqr(((((-1.0)*r21*x2122*x2123))+((r20*sj1*x2121))+(((-1.0)*r00*x2119*x2121))+(((-1.0)*x2120*x2123))+((cj1*x2124))+((cj1*r01*x2122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2119*x2122))+((r00*sj1*x2121))+(((-1.0)*x2119*x2120))+((cj1*r20*x2121))+(((-1.0)*r01*x2122*x2123))+(((-1.0)*x2123*x2124))), ((((-1.0)*r21*x2122*x2123))+((r20*sj1*x2121))+(((-1.0)*r00*x2119*x2121))+(((-1.0)*x2120*x2123))+((cj1*x2124))+((cj1*r01*x2122))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2125=IKcos(j2);
IkReal x2126=IKsin(j2);
IkReal x2127=((1.0)*cj3);
IkReal x2128=(cj5*r00);
IkReal x2129=((0.35575)*sj1);
IkReal x2130=(cj5*sj3);
IkReal x2131=((1.0)*cj4);
IkReal x2132=(cj5*r20);
IkReal x2133=((1.0)*sj1);
IkReal x2134=(sj3*sj5);
IkReal x2135=((0.12)*sj5);
IkReal x2136=((0.35575)*cj1);
IkReal x2137=(cj1*x2125);
IkReal x2138=(cj3*cj4*sj5);
IkReal x2139=((1.0)*sj4*sj5);
IkReal x2140=(x2125*x2133);
IkReal x2141=((1.0)*cj1*x2126);
IkReal x2142=(x2141+x2140);
evalcond[0]=(x2137+(((-1.0)*r01*x2139))+((sj4*x2128))+(((-1.0)*x2126*x2133))+(((-1.0)*r02*x2131)));
evalcond[1]=((((-1.0)*r22*x2131))+((sj4*x2132))+(((-1.0)*x2142))+(((-1.0)*r21*x2139)));
evalcond[2]=(((r21*x2135))+(((-1.0)*x2125*x2129))+x2136+(((-1.0)*pz))+(((-1.0)*x2126*x2136))+(((-0.12)*x2132)));
evalcond[3]=(x2129+((r01*x2135))+(((-1.0)*px))+(((-0.12)*x2128))+((x2125*x2136))+(((-1.0)*x2126*x2129)));
evalcond[4]=((((-1.0)*cj4*x2127*x2132))+((r21*x2138))+((r21*x2130))+(((-1.0)*r22*sj4*x2127))+((sj1*x2126))+(((-1.0)*x2137))+((r20*x2134)));
evalcond[5]=((((-1.0)*cj4*x2127*x2128))+((r01*x2138))+((r01*x2130))+((r00*x2134))+(((-1.0)*x2142))+(((-1.0)*r02*sj4*x2127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2143=(sj1*sj4);
IkReal x2144=(r01*sj5);
IkReal x2145=((1.0)*cj1);
IkReal x2146=(cj4*r22);
IkReal x2147=(cj4*r02);
IkReal x2148=(cj5*r20);
IkReal x2149=(cj1*sj4);
IkReal x2150=(cj5*r00);
IkReal x2151=(r21*sj5);
if( IKabs(((((-1.0)*sj4*x2145*x2151))+((x2143*x2144))+(((-1.0)*x2143*x2150))+((sj1*x2147))+((x2148*x2149))+(((-1.0)*x2145*x2146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2149*x2150))+(((-1.0)*sj1*x2146))+((x2143*x2148))+(((-1.0)*x2143*x2151))+(((-1.0)*sj4*x2144*x2145))+(((-1.0)*x2145*x2147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x2145*x2151))+((x2143*x2144))+(((-1.0)*x2143*x2150))+((sj1*x2147))+((x2148*x2149))+(((-1.0)*x2145*x2146))))+IKsqr((((x2149*x2150))+(((-1.0)*sj1*x2146))+((x2143*x2148))+(((-1.0)*x2143*x2151))+(((-1.0)*sj4*x2144*x2145))+(((-1.0)*x2145*x2147))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x2145*x2151))+((x2143*x2144))+(((-1.0)*x2143*x2150))+((sj1*x2147))+((x2148*x2149))+(((-1.0)*x2145*x2146))), (((x2149*x2150))+(((-1.0)*sj1*x2146))+((x2143*x2148))+(((-1.0)*x2143*x2151))+(((-1.0)*sj4*x2144*x2145))+(((-1.0)*x2145*x2147))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2152=IKcos(j2);
IkReal x2153=IKsin(j2);
IkReal x2154=(cj3*cj4);
IkReal x2155=(r21*sj5);
IkReal x2156=(cj5*r00);
IkReal x2157=((0.35575)*sj1);
IkReal x2158=(r01*sj5);
IkReal x2159=((1.0)*sj4);
IkReal x2160=(cj5*sj3);
IkReal x2161=((1.0)*cj4);
IkReal x2162=(cj5*r20);
IkReal x2163=(sj3*sj5);
IkReal x2164=(sj1*x2153);
IkReal x2165=(cj1*x2153);
IkReal x2166=(cj1*x2152);
IkReal x2167=(sj1*x2152);
IkReal x2168=((1.0)*x2166);
evalcond[0]=(x2164+((sj4*x2156))+(((-1.0)*x2158*x2159))+(((-1.0)*x2168))+(((-1.0)*r02*x2161)));
evalcond[1]=(((sj4*x2162))+(((-1.0)*r22*x2161))+(((-1.0)*x2155*x2159))+(((-1.0)*x2167))+(((-1.0)*x2165)));
evalcond[2]=((((-0.12)*x2162))+(((-1.0)*x2152*x2157))+(((-1.0)*pz))+(((0.12)*x2155))+(((-0.35575)*x2165))+(((0.35575)*cj1)));
evalcond[3]=((((-0.12)*x2156))+(((-1.0)*px))+(((0.12)*x2158))+(((-1.0)*x2157))+(((-0.35575)*x2166))+((x2153*x2157)));
evalcond[4]=((((-1.0)*cj3*r02*x2159))+((r00*x2163))+((r01*x2160))+((x2154*x2158))+x2165+x2167+(((-1.0)*x2154*x2156)));
evalcond[5]=((((-1.0)*cj3*r22*x2159))+((x2154*x2155))+x2164+((r21*x2160))+((r20*x2163))+(((-1.0)*x2168))+(((-1.0)*x2154*x2162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2169=(cj1*cj4);
IkReal x2170=((1.0)*r22);
IkReal x2171=(cj5*sj4);
IkReal x2172=((1.0)*cj1);
IkReal x2173=((1.0)*sj1);
IkReal x2174=(sj4*sj5);
if( IKabs((((cj1*r20*x2171))+(((-1.0)*x2169*x2170))+((r10*sj1*x2171))+(((-1.0)*cj4*r12*x2173))+(((-1.0)*r21*x2172*x2174))+(((-1.0)*r11*x2173*x2174)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2173*x2174))+((r12*x2169))+((cj1*r11*x2174))+((r20*sj1*x2171))+(((-1.0)*r10*x2171*x2172))+(((-1.0)*cj4*sj1*x2170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x2171))+(((-1.0)*x2169*x2170))+((r10*sj1*x2171))+(((-1.0)*cj4*r12*x2173))+(((-1.0)*r21*x2172*x2174))+(((-1.0)*r11*x2173*x2174))))+IKsqr(((((-1.0)*r21*x2173*x2174))+((r12*x2169))+((cj1*r11*x2174))+((r20*sj1*x2171))+(((-1.0)*r10*x2171*x2172))+(((-1.0)*cj4*sj1*x2170))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x2171))+(((-1.0)*x2169*x2170))+((r10*sj1*x2171))+(((-1.0)*cj4*r12*x2173))+(((-1.0)*r21*x2172*x2174))+(((-1.0)*r11*x2173*x2174))), ((((-1.0)*r21*x2173*x2174))+((r12*x2169))+((cj1*r11*x2174))+((r20*sj1*x2171))+(((-1.0)*r10*x2171*x2172))+(((-1.0)*cj4*sj1*x2170))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2175=IKcos(j2);
IkReal x2176=IKsin(j2);
IkReal x2177=(cj3*cj4);
IkReal x2178=(r21*sj5);
IkReal x2179=((0.35575)*sj1);
IkReal x2180=((1.0)*sj4);
IkReal x2181=((1.0)*cj5);
IkReal x2182=(cj5*sj3);
IkReal x2183=((1.0)*sj1);
IkReal x2184=(cj5*r10);
IkReal x2185=((1.0)*cj4);
IkReal x2186=(cj5*r20);
IkReal x2187=(sj3*sj5);
IkReal x2188=((0.35575)*cj1);
IkReal x2189=(r11*sj5);
IkReal x2190=(cj1*x2175);
IkReal x2191=(x2175*x2183);
IkReal x2192=((1.0)*cj1*x2176);
IkReal x2193=(x2191+x2192);
evalcond[0]=((((-1.0)*x2180*x2189))+x2190+(((-1.0)*x2176*x2183))+((sj4*x2184))+(((-1.0)*r12*x2185)));
evalcond[1]=((((-1.0)*r22*x2185))+(((-1.0)*x2193))+((sj4*x2186))+(((-1.0)*x2178*x2180)));
evalcond[2]=(x2188+(((-0.12)*x2186))+(((-1.0)*pz))+(((0.12)*x2178))+(((-1.0)*x2176*x2188))+(((-1.0)*x2175*x2179)));
evalcond[3]=((((-1.0)*x2176*x2179))+(((0.12)*x2189))+x2179+(((-0.12)*x2184))+(((-1.0)*py))+((x2175*x2188)));
evalcond[4]=(((sj1*x2176))+(((-1.0)*cj3*r22*x2180))+(((-1.0)*x2190))+((r20*x2187))+((x2177*x2178))+((r21*x2182))+(((-1.0)*r20*x2177*x2181)));
evalcond[5]=(((x2177*x2189))+(((-1.0)*cj3*r12*x2180))+((r11*x2182))+(((-1.0)*x2193))+(((-1.0)*r10*x2177*x2181))+((r10*x2187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2194=(cj1*sj4);
IkReal x2195=(cj5*r20);
IkReal x2196=(r11*sj5);
IkReal x2197=(sj1*sj4);
IkReal x2198=(cj4*r12);
IkReal x2199=(cj5*r10);
IkReal x2200=((1.0)*cj4*r22);
IkReal x2201=((1.0)*r21*sj5);
if( IKabs((((x2196*x2197))+(((-1.0)*cj1*x2200))+(((-1.0)*x2197*x2199))+((x2194*x2195))+((sj1*x2198))+(((-1.0)*x2194*x2201)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2200))+((x2194*x2199))+(((-1.0)*x2194*x2196))+(((-1.0)*x2197*x2201))+(((-1.0)*cj1*x2198))+((x2195*x2197)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2196*x2197))+(((-1.0)*cj1*x2200))+(((-1.0)*x2197*x2199))+((x2194*x2195))+((sj1*x2198))+(((-1.0)*x2194*x2201))))+IKsqr(((((-1.0)*sj1*x2200))+((x2194*x2199))+(((-1.0)*x2194*x2196))+(((-1.0)*x2197*x2201))+(((-1.0)*cj1*x2198))+((x2195*x2197))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2196*x2197))+(((-1.0)*cj1*x2200))+(((-1.0)*x2197*x2199))+((x2194*x2195))+((sj1*x2198))+(((-1.0)*x2194*x2201))), ((((-1.0)*sj1*x2200))+((x2194*x2199))+(((-1.0)*x2194*x2196))+(((-1.0)*x2197*x2201))+(((-1.0)*cj1*x2198))+((x2195*x2197))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2202=IKcos(j2);
IkReal x2203=IKsin(j2);
IkReal x2204=(cj3*cj4);
IkReal x2205=(r21*sj5);
IkReal x2206=((0.35575)*sj1);
IkReal x2207=((1.0)*sj4);
IkReal x2208=((1.0)*cj5);
IkReal x2209=(cj5*sj3);
IkReal x2210=(cj5*r10);
IkReal x2211=((1.0)*cj4);
IkReal x2212=(cj5*r20);
IkReal x2213=(r11*sj5);
IkReal x2214=(sj3*sj5);
IkReal x2215=(sj1*x2203);
IkReal x2216=(cj1*x2202);
IkReal x2217=(cj1*x2203);
IkReal x2218=(sj1*x2202);
IkReal x2219=((1.0)*x2216);
evalcond[0]=(x2215+(((-1.0)*x2219))+(((-1.0)*x2207*x2213))+(((-1.0)*r12*x2211))+((sj4*x2210)));
evalcond[1]=((((-1.0)*x2218))+(((-1.0)*x2217))+(((-1.0)*x2205*x2207))+(((-1.0)*r22*x2211))+((sj4*x2212)));
evalcond[2]=((((-0.12)*x2212))+(((-1.0)*x2202*x2206))+(((-1.0)*pz))+(((-0.35575)*x2217))+(((0.12)*x2205))+(((0.35575)*cj1)));
evalcond[3]=((((-1.0)*x2206))+(((-0.12)*x2210))+((x2203*x2206))+(((-1.0)*py))+(((-0.35575)*x2216))+(((0.12)*x2213)));
evalcond[4]=((((-1.0)*cj3*r12*x2207))+x2217+x2218+((r11*x2209))+((x2204*x2213))+(((-1.0)*r10*x2204*x2208))+((r10*x2214)));
evalcond[5]=((((-1.0)*r20*x2204*x2208))+((r20*x2214))+x2215+(((-1.0)*x2219))+(((-1.0)*cj3*r22*x2207))+((x2204*x2205))+((r21*x2209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2220=(r20*sj0);
IkReal x2221=((1.0)*sj1);
IkReal x2222=(cj4*r12);
IkReal x2223=(cj5*sj1*sj4);
IkReal x2224=(cj1*cj5*sj4);
IkReal x2225=(cj4*r22*sj0);
IkReal x2226=(r11*sj4*sj5);
IkReal x2227=((1.0)*r21*sj0*sj4*sj5);
CheckValue<IkReal> x2228=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2228.valid){
continue;
}
CheckValue<IkReal> x2229 = IKatan2WithCheck(IkReal((((r10*x2223))+(((-1.0)*x2221*x2222))+(((-1.0)*x2221*x2226))+((x2220*x2224))+(((-1.0)*cj1*x2225))+(((-1.0)*cj1*x2227)))),IkReal(((((-1.0)*r10*x2224))+(((-1.0)*x2221*x2225))+(((-1.0)*r21*sj0*sj4*sj5*x2221))+((x2220*x2223))+((cj1*x2226))+((cj1*x2222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2229.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2228.value)))+(x2229.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2230=IKcos(j2);
IkReal x2231=IKsin(j2);
IkReal x2232=((1.0)*cj3);
IkReal x2233=(cj4*cj5);
IkReal x2234=(cj5*r10);
IkReal x2235=(cj5*sj3);
IkReal x2236=((0.35575)*cj1);
IkReal x2237=((0.35575)*sj0);
IkReal x2238=((1.0)*sj1);
IkReal x2239=(sj3*sj5);
IkReal x2240=((1.0)*cj4);
IkReal x2241=((0.12)*cj5);
IkReal x2242=((1.0)*cj1);
IkReal x2243=(cj5*sj4);
IkReal x2244=((0.12)*sj5);
IkReal x2245=((0.35575)*cj0*sj1);
IkReal x2246=(cj3*cj4*sj5);
IkReal x2247=(cj1*x2230);
IkReal x2248=((1.0)*sj4*sj5);
IkReal x2249=(sj0*x2238);
IkReal x2250=(cj0*x2231);
IkReal x2251=(sj1*x2231);
evalcond[0]=((((-1.0)*r22*x2240))+(((-1.0)*x2231*x2242))+((r20*x2243))+(((-1.0)*x2230*x2238))+(((-1.0)*r21*x2248)));
evalcond[1]=(x2236+(((-1.0)*pz))+(((-0.35575)*sj1*x2230))+((r21*x2244))+(((-1.0)*x2231*x2236))+(((-1.0)*r20*x2241)));
evalcond[2]=((((-1.0)*r02*x2240))+(((-1.0)*r01*x2248))+((r00*x2243))+(((-1.0)*x2238*x2250))+((cj0*x2247)));
evalcond[3]=(((sj4*x2234))+(((-1.0)*x2231*x2249))+((sj0*x2247))+(((-1.0)*r11*x2248))+(((-1.0)*r12*x2240)));
evalcond[4]=(x2245+((cj0*x2230*x2236))+(((-1.0)*r00*x2241))+(((-1.0)*x2231*x2245))+(((-1.0)*px))+((r01*x2244)));
evalcond[5]=(((r11*x2244))+(((-1.0)*x2237*x2251))+((sj1*x2237))+((sj0*x2230*x2236))+(((-1.0)*py))+(((-0.12)*x2234)));
evalcond[6]=(x2251+(((-1.0)*x2230*x2242))+((r21*x2235))+((r20*x2239))+((r21*x2246))+(((-1.0)*r22*sj4*x2232))+(((-1.0)*r20*x2232*x2233)));
evalcond[7]=((((-1.0)*r02*sj4*x2232))+(((-1.0)*cj0*x2230*x2238))+((r01*x2246))+(((-1.0)*x2242*x2250))+(((-1.0)*r00*x2232*x2233))+((r01*x2235))+((r00*x2239)));
evalcond[8]=((((-1.0)*r12*sj4*x2232))+((r11*x2246))+(((-1.0)*x2230*x2249))+((r10*x2239))+(((-1.0)*sj0*x2231*x2242))+((r11*x2235))+(((-1.0)*r10*x2232*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2252=(sj4*sj5);
IkReal x2253=((1.0)*cj0);
IkReal x2254=(cj1*cj4);
IkReal x2255=(cj5*sj4);
IkReal x2256=(cj4*sj1);
IkReal x2257=(cj0*r20);
CheckValue<IkReal> x2258 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2253*x2254))+((r00*sj1*x2255))+((cj1*x2255*x2257))+(((-1.0)*cj1*r21*x2252*x2253))+(((-1.0)*r01*sj1*x2252))+(((-1.0)*r02*x2256)))),IkReal((((sj1*x2255*x2257))+(((-1.0)*r22*x2253*x2256))+(((-1.0)*r21*sj1*x2252*x2253))+(((-1.0)*cj1*r00*x2255))+((cj1*r01*x2252))+((r02*x2254)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2258.valid){
continue;
}
CheckValue<IkReal> x2259=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2259.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2258.value)+(((1.5707963267949)*(x2259.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2260=IKcos(j2);
IkReal x2261=IKsin(j2);
IkReal x2262=((1.0)*cj3);
IkReal x2263=(cj4*cj5);
IkReal x2264=(cj5*r10);
IkReal x2265=(cj5*sj3);
IkReal x2266=((0.35575)*cj1);
IkReal x2267=((0.35575)*sj0);
IkReal x2268=((1.0)*sj1);
IkReal x2269=(sj3*sj5);
IkReal x2270=((1.0)*cj4);
IkReal x2271=((0.12)*cj5);
IkReal x2272=((1.0)*cj1);
IkReal x2273=(cj5*sj4);
IkReal x2274=((0.12)*sj5);
IkReal x2275=((0.35575)*cj0*sj1);
IkReal x2276=(cj3*cj4*sj5);
IkReal x2277=(cj1*x2260);
IkReal x2278=((1.0)*sj4*sj5);
IkReal x2279=(sj0*x2268);
IkReal x2280=(cj0*x2261);
IkReal x2281=(sj1*x2261);
evalcond[0]=((((-1.0)*r21*x2278))+(((-1.0)*x2260*x2268))+(((-1.0)*r22*x2270))+(((-1.0)*x2261*x2272))+((r20*x2273)));
evalcond[1]=(((r21*x2274))+x2266+(((-1.0)*r20*x2271))+(((-1.0)*pz))+(((-1.0)*x2261*x2266))+(((-0.35575)*sj1*x2260)));
evalcond[2]=(((r00*x2273))+(((-1.0)*x2268*x2280))+(((-1.0)*r01*x2278))+((cj0*x2277))+(((-1.0)*r02*x2270)));
evalcond[3]=(((sj0*x2277))+((sj4*x2264))+(((-1.0)*x2261*x2279))+(((-1.0)*r11*x2278))+(((-1.0)*r12*x2270)));
evalcond[4]=(((r01*x2274))+x2275+((cj0*x2260*x2266))+(((-1.0)*r00*x2271))+(((-1.0)*px))+(((-1.0)*x2261*x2275)));
evalcond[5]=(((sj1*x2267))+(((-0.12)*x2264))+(((-1.0)*x2267*x2281))+(((-1.0)*py))+((r11*x2274))+((sj0*x2260*x2266)));
evalcond[6]=((((-1.0)*r20*x2262*x2263))+((r21*x2276))+x2281+((r21*x2265))+(((-1.0)*x2260*x2272))+((r20*x2269))+(((-1.0)*r22*sj4*x2262)));
evalcond[7]=(((r00*x2269))+((r01*x2276))+((r01*x2265))+(((-1.0)*r02*sj4*x2262))+(((-1.0)*x2272*x2280))+(((-1.0)*r00*x2262*x2263))+(((-1.0)*cj0*x2260*x2268)));
evalcond[8]=((((-1.0)*x2260*x2279))+(((-1.0)*r12*sj4*x2262))+((r11*x2265))+((r10*x2269))+(((-1.0)*r10*x2262*x2263))+((r11*x2276))+(((-1.0)*sj0*x2261*x2272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2282=((1.0)*cj0);
CheckValue<IkReal> x2283=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)))),-1);
if(!x2283.valid){
continue;
}
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x2282))+(((-1.0)*cj5*r21*x2282)))),IkReal((((cj0*cj4*cj5*r20))+(((-1.0)*cj4*r21*sj5*x2282))+((cj0*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2283.value)))+(x2284.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2285=IKsin(j3);
IkReal x2286=IKcos(j3);
IkReal x2287=((1.0)*cj5);
IkReal x2288=(cj4*x2285);
IkReal x2289=((1.0)*sj5*x2286);
IkReal x2290=((1.0)*sj4*x2285);
evalcond[0]=((((-1.0)*r21*x2286*x2287))+(((-1.0)*r20*x2287*x2288))+((r21*sj5*x2288))+(((-1.0)*r20*x2289))+(((-1.0)*r22*x2290)));
evalcond[1]=(cj0+(((-1.0)*r10*x2289))+(((-1.0)*r10*x2287*x2288))+(((-1.0)*r12*x2290))+(((-1.0)*r11*x2286*x2287))+((r11*sj5*x2288)));
evalcond[2]=((((-1.0)*r01*x2286*x2287))+(((-1.0)*sj0))+(((-1.0)*r02*x2290))+((r01*sj5*x2288))+(((-1.0)*r00*x2289))+(((-1.0)*r00*x2287*x2288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2291=((0.33731553056922)*cj5);
IkReal x2292=(cj5*sj4);
IkReal x2293=((1.0)*cj4);
IkReal x2294=((0.33731553056922)*sj5);
IkReal x2295=((1.0)*sj4*sj5);
if( IKabs((((r10*x2292))+((r10*x2291))+(((2.8109627547435)*py))+(((-1.0)*r12*x2293))+(((-1.0)*r11*x2294))+(((-1.0)*r11*x2295)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.8109627547435)*pz))+((r20*x2292))+((r20*x2291))+(((-1.0)*r22*x2293))+(((-1.0)*r21*x2295))+(((-1.0)*r21*x2294)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r10*x2292))+((r10*x2291))+(((2.8109627547435)*py))+(((-1.0)*r12*x2293))+(((-1.0)*r11*x2294))+(((-1.0)*r11*x2295))))+IKsqr(((((2.8109627547435)*pz))+((r20*x2292))+((r20*x2291))+(((-1.0)*r22*x2293))+(((-1.0)*r21*x2295))+(((-1.0)*r21*x2294))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2((((r10*x2292))+((r10*x2291))+(((2.8109627547435)*py))+(((-1.0)*r12*x2293))+(((-1.0)*r11*x2294))+(((-1.0)*r11*x2295))), ((((2.8109627547435)*pz))+((r20*x2292))+((r20*x2291))+(((-1.0)*r22*x2293))+(((-1.0)*r21*x2295))+(((-1.0)*r21*x2294))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2296=((1.0)*py);
IkReal x2297=((0.35575)*cj4);
IkReal x2298=((0.35575)*sj3);
IkReal x2299=(r21*sj5);
IkReal x2300=((0.35575)*sj4);
IkReal x2301=(cj5*r10);
IkReal x2302=(r11*sj5);
IkReal x2303=(cj5*r20);
IkReal x2304=((0.12)*x2303);
IkReal x2305=((0.12)*x2299);
IkReal x2306=((0.35575)*(IKcos(j1)));
IkReal x2307=((0.35575)*(IKsin(j1)));
IkReal x2308=((0.12)*x2302);
IkReal x2309=((0.12)*x2301);
IkReal x2310=(x2296+x2309);
IkReal x2311=(x2308+x2307);
IkReal x2312=(x2305+x2306);
evalcond[0]=((((-1.0)*x2300*x2303))+x2312+((r22*x2297))+(((-1.0)*x2304))+(((-1.0)*pz))+((x2299*x2300)));
evalcond[1]=(((x2300*x2302))+(((-1.0)*x2300*x2301))+x2311+((r12*x2297))+(((-1.0)*x2310)));
evalcond[2]=(((cj5*r11*x2298))+x2304+((cj3*x2297*x2302))+((r10*sj5*x2298))+(((-1.0)*cj3*r12*x2300))+pz+(((-1.0)*x2312))+(((-1.0)*cj3*x2297*x2301)));
evalcond[3]=(x2311+(((-1.0)*cj3*r22*x2300))+((cj5*r21*x2298))+((r20*sj5*x2298))+((cj3*x2297*x2299))+(((-1.0)*x2310))+(((-1.0)*cj3*x2297*x2303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2313=(cj1*cj4);
IkReal x2314=((1.0)*r22);
IkReal x2315=(cj5*sj4);
IkReal x2316=((1.0)*cj1);
IkReal x2317=((1.0)*sj1);
IkReal x2318=(sj4*sj5);
if( IKabs(((((-1.0)*r21*x2316*x2318))+(((-1.0)*r11*x2317*x2318))+((cj1*r20*x2315))+(((-1.0)*cj4*r12*x2317))+(((-1.0)*x2313*x2314))+((r10*sj1*x2315)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2317*x2318))+(((-1.0)*cj4*sj1*x2314))+((r12*x2313))+(((-1.0)*r10*x2315*x2316))+((r20*sj1*x2315))+((cj1*r11*x2318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2316*x2318))+(((-1.0)*r11*x2317*x2318))+((cj1*r20*x2315))+(((-1.0)*cj4*r12*x2317))+(((-1.0)*x2313*x2314))+((r10*sj1*x2315))))+IKsqr(((((-1.0)*r21*x2317*x2318))+(((-1.0)*cj4*sj1*x2314))+((r12*x2313))+(((-1.0)*r10*x2315*x2316))+((r20*sj1*x2315))+((cj1*r11*x2318))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2316*x2318))+(((-1.0)*r11*x2317*x2318))+((cj1*r20*x2315))+(((-1.0)*cj4*r12*x2317))+(((-1.0)*x2313*x2314))+((r10*sj1*x2315))), ((((-1.0)*r21*x2317*x2318))+(((-1.0)*cj4*sj1*x2314))+((r12*x2313))+(((-1.0)*r10*x2315*x2316))+((r20*sj1*x2315))+((cj1*r11*x2318))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2319=IKcos(j2);
IkReal x2320=IKsin(j2);
IkReal x2321=(cj3*cj4);
IkReal x2322=(r21*sj5);
IkReal x2323=((0.35575)*sj1);
IkReal x2324=((1.0)*sj4);
IkReal x2325=((1.0)*cj5);
IkReal x2326=(cj5*sj3);
IkReal x2327=((1.0)*sj1);
IkReal x2328=(cj5*r10);
IkReal x2329=((1.0)*cj4);
IkReal x2330=(cj5*r20);
IkReal x2331=(sj3*sj5);
IkReal x2332=((0.35575)*cj1);
IkReal x2333=(r11*sj5);
IkReal x2334=(cj1*x2319);
IkReal x2335=(x2319*x2327);
IkReal x2336=((1.0)*cj1*x2320);
IkReal x2337=(x2335+x2336);
evalcond[0]=(x2334+(((-1.0)*x2320*x2327))+((sj4*x2328))+(((-1.0)*r12*x2329))+(((-1.0)*x2324*x2333)));
evalcond[1]=((((-1.0)*x2337))+(((-1.0)*r22*x2329))+(((-1.0)*x2322*x2324))+((sj4*x2330)));
evalcond[2]=(x2332+(((-1.0)*x2320*x2332))+(((-1.0)*x2319*x2323))+(((-0.12)*x2330))+(((-1.0)*pz))+(((0.12)*x2322)));
evalcond[3]=(((x2319*x2332))+x2323+(((-1.0)*x2320*x2323))+(((-1.0)*py))+(((-0.12)*x2328))+(((0.12)*x2333)));
evalcond[4]=((((-1.0)*r20*x2321*x2325))+((r21*x2326))+((x2321*x2322))+((sj1*x2320))+(((-1.0)*cj3*r22*x2324))+((r20*x2331))+(((-1.0)*x2334)));
evalcond[5]=((((-1.0)*x2337))+((r11*x2326))+((x2321*x2333))+(((-1.0)*r10*x2321*x2325))+((r10*x2331))+(((-1.0)*cj3*r12*x2324)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2338=((0.33731553056922)*cj5);
IkReal x2339=(r11*sj5);
IkReal x2340=(cj5*sj4);
IkReal x2341=(r21*sj5);
if( IKabs(((((-1.0)*r10*x2338))+(((-1.0)*r10*x2340))+(((0.33731553056922)*x2339))+(((-2.8109627547435)*py))+((sj4*x2339))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x2341))+(((2.8109627547435)*pz))+((r20*x2340))+(((-1.0)*cj4*r22))+((r20*x2338))+(((-0.33731553056922)*x2341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x2338))+(((-1.0)*r10*x2340))+(((0.33731553056922)*x2339))+(((-2.8109627547435)*py))+((sj4*x2339))+((cj4*r12))))+IKsqr(((((-1.0)*sj4*x2341))+(((2.8109627547435)*pz))+((r20*x2340))+(((-1.0)*cj4*r22))+((r20*x2338))+(((-0.33731553056922)*x2341))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r10*x2338))+(((-1.0)*r10*x2340))+(((0.33731553056922)*x2339))+(((-2.8109627547435)*py))+((sj4*x2339))+((cj4*r12))), ((((-1.0)*sj4*x2341))+(((2.8109627547435)*pz))+((r20*x2340))+(((-1.0)*cj4*r22))+((r20*x2338))+(((-0.33731553056922)*x2341))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2342=((1.0)*pz);
IkReal x2343=((0.35575)*cj4);
IkReal x2344=((0.35575)*sj3);
IkReal x2345=(r21*sj5);
IkReal x2346=((0.35575)*sj4);
IkReal x2347=(cj5*r10);
IkReal x2348=(r11*sj5);
IkReal x2349=(cj5*r20);
IkReal x2350=((0.12)*x2348);
IkReal x2351=((0.12)*x2347);
IkReal x2352=((0.35575)*(IKsin(j1)));
IkReal x2353=((0.12)*x2345);
IkReal x2354=((0.35575)*(IKcos(j1)));
IkReal x2355=((0.12)*x2349);
IkReal x2356=(x2355+x2342);
IkReal x2357=(x2353+x2354);
IkReal x2358=(x2352+x2351);
evalcond[0]=(((x2346*x2347))+(((-1.0)*x2346*x2348))+x2358+py+(((-1.0)*r12*x2343))+(((-1.0)*x2350)));
evalcond[1]=((((-1.0)*x2346*x2349))+x2357+((r22*x2343))+((x2345*x2346))+(((-1.0)*x2356)));
evalcond[2]=(x2350+(((-1.0)*cj3*x2343*x2345))+(((-1.0)*py))+((cj3*x2343*x2349))+(((-1.0)*cj5*r21*x2344))+(((-1.0)*x2358))+(((-1.0)*r20*sj5*x2344))+((cj3*r22*x2346)));
evalcond[3]=(x2357+((r10*sj5*x2344))+(((-1.0)*cj3*x2343*x2347))+(((-1.0)*cj3*r12*x2346))+((cj3*x2343*x2348))+((cj5*r11*x2344))+(((-1.0)*x2356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2359=(cj1*sj4);
IkReal x2360=(cj5*r20);
IkReal x2361=(r11*sj5);
IkReal x2362=(sj1*sj4);
IkReal x2363=(cj4*r12);
IkReal x2364=(cj5*r10);
IkReal x2365=((1.0)*cj4*r22);
IkReal x2366=((1.0)*r21*sj5);
if( IKabs(((((-1.0)*x2362*x2364))+((sj1*x2363))+((x2359*x2360))+(((-1.0)*x2359*x2366))+((x2361*x2362))+(((-1.0)*cj1*x2365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2359*x2361))+((x2359*x2364))+((x2360*x2362))+(((-1.0)*cj1*x2363))+(((-1.0)*x2362*x2366))+(((-1.0)*sj1*x2365)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2362*x2364))+((sj1*x2363))+((x2359*x2360))+(((-1.0)*x2359*x2366))+((x2361*x2362))+(((-1.0)*cj1*x2365))))+IKsqr(((((-1.0)*x2359*x2361))+((x2359*x2364))+((x2360*x2362))+(((-1.0)*cj1*x2363))+(((-1.0)*x2362*x2366))+(((-1.0)*sj1*x2365))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2362*x2364))+((sj1*x2363))+((x2359*x2360))+(((-1.0)*x2359*x2366))+((x2361*x2362))+(((-1.0)*cj1*x2365))), ((((-1.0)*x2359*x2361))+((x2359*x2364))+((x2360*x2362))+(((-1.0)*cj1*x2363))+(((-1.0)*x2362*x2366))+(((-1.0)*sj1*x2365))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2367=IKcos(j2);
IkReal x2368=IKsin(j2);
IkReal x2369=(cj3*cj4);
IkReal x2370=(r21*sj5);
IkReal x2371=((0.35575)*sj1);
IkReal x2372=((1.0)*sj4);
IkReal x2373=((1.0)*cj5);
IkReal x2374=(cj5*sj3);
IkReal x2375=(cj5*r10);
IkReal x2376=((1.0)*cj4);
IkReal x2377=(cj5*r20);
IkReal x2378=(r11*sj5);
IkReal x2379=(sj3*sj5);
IkReal x2380=(sj1*x2368);
IkReal x2381=(cj1*x2367);
IkReal x2382=(cj1*x2368);
IkReal x2383=(sj1*x2367);
IkReal x2384=((1.0)*x2381);
evalcond[0]=(x2380+(((-1.0)*x2384))+(((-1.0)*x2372*x2378))+((sj4*x2375))+(((-1.0)*r12*x2376)));
evalcond[1]=((((-1.0)*x2383))+(((-1.0)*x2382))+((sj4*x2377))+(((-1.0)*x2370*x2372))+(((-1.0)*r22*x2376)));
evalcond[2]=((((-0.35575)*x2382))+(((-1.0)*pz))+(((0.12)*x2370))+(((0.35575)*cj1))+(((-1.0)*x2367*x2371))+(((-0.12)*x2377)));
evalcond[3]=(((x2368*x2371))+(((-1.0)*x2371))+(((-0.35575)*x2381))+(((-1.0)*py))+(((0.12)*x2378))+(((-0.12)*x2375)));
evalcond[4]=((((-1.0)*r10*x2369*x2373))+x2383+x2382+((r10*x2379))+(((-1.0)*cj3*r12*x2372))+((x2369*x2378))+((r11*x2374)));
evalcond[5]=(((r20*x2379))+x2380+(((-1.0)*cj3*r22*x2372))+(((-1.0)*x2384))+(((-1.0)*r20*x2369*x2373))+((x2369*x2370))+((r21*x2374)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2385=((0.33731553056922)*cj5);
IkReal x2386=(r01*sj5);
IkReal x2387=(cj5*sj4);
IkReal x2388=((1.0)*cj4);
IkReal x2389=((1.0)*sj4);
IkReal x2390=(r21*sj5);
if( IKabs(((((-1.0)*r02*x2388))+((r00*x2387))+((r00*x2385))+(((-1.0)*x2386*x2389))+(((-0.33731553056922)*x2386))+(((2.8109627547435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2389*x2390))+((r20*x2385))+((r20*x2387))+(((2.8109627547435)*pz))+(((-1.0)*r22*x2388))+(((-0.33731553056922)*x2390)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x2388))+((r00*x2387))+((r00*x2385))+(((-1.0)*x2386*x2389))+(((-0.33731553056922)*x2386))+(((2.8109627547435)*px))))+IKsqr(((((-1.0)*x2389*x2390))+((r20*x2385))+((r20*x2387))+(((2.8109627547435)*pz))+(((-1.0)*r22*x2388))+(((-0.33731553056922)*x2390))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*r02*x2388))+((r00*x2387))+((r00*x2385))+(((-1.0)*x2386*x2389))+(((-0.33731553056922)*x2386))+(((2.8109627547435)*px))), ((((-1.0)*x2389*x2390))+((r20*x2385))+((r20*x2387))+(((2.8109627547435)*pz))+(((-1.0)*r22*x2388))+(((-0.33731553056922)*x2390))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2391=((1.0)*px);
IkReal x2392=((0.35575)*r21);
IkReal x2393=(cj5*sj3);
IkReal x2394=(sj4*sj5);
IkReal x2395=((0.35575)*cj4);
IkReal x2396=((0.35575)*r01);
IkReal x2397=((0.12)*cj5);
IkReal x2398=((0.12)*sj5);
IkReal x2399=(cj5*r00);
IkReal x2400=((0.35575)*sj4);
IkReal x2401=(cj5*r20);
IkReal x2402=(r20*x2397);
IkReal x2403=(r21*x2398);
IkReal x2404=((0.35575)*(IKcos(j1)));
IkReal x2405=((0.35575)*(IKsin(j1)));
IkReal x2406=(r01*x2398);
IkReal x2407=(r00*x2397);
IkReal x2408=(cj3*cj4*sj5);
IkReal x2409=(cj3*x2400);
IkReal x2410=((0.35575)*sj3*sj5);
IkReal x2411=(x2407+x2391);
IkReal x2412=(x2404+x2403);
IkReal x2413=(x2406+x2405);
evalcond[0]=(((x2392*x2394))+x2412+(((-1.0)*x2400*x2401))+(((-1.0)*x2402))+(((-1.0)*pz))+((r22*x2395)));
evalcond[1]=((((-1.0)*x2399*x2400))+x2413+((r02*x2395))+((x2394*x2396))+(((-1.0)*x2411)));
evalcond[2]=(x2402+((cj3*r01*sj5*x2395))+((r00*x2410))+(((-1.0)*cj3*x2395*x2399))+((x2393*x2396))+(((-1.0)*r02*x2409))+(((-1.0)*x2412))+pz);
evalcond[3]=(((x2392*x2393))+x2413+(((-1.0)*cj3*x2395*x2401))+(((-1.0)*x2411))+((r20*x2410))+((x2392*x2408))+(((-1.0)*r22*x2409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2414=((1.0)*cj1);
IkReal x2415=(cj4*r22);
IkReal x2416=(cj5*sj4);
IkReal x2417=(sj4*sj5);
IkReal x2418=((1.0)*sj1);
IkReal x2419=(cj4*r02);
if( IKabs((((cj1*r20*x2416))+(((-1.0)*r01*x2417*x2418))+(((-1.0)*x2414*x2415))+(((-1.0)*r21*x2414*x2417))+(((-1.0)*x2418*x2419))+((r00*sj1*x2416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2415*x2418))+((cj1*r01*x2417))+(((-1.0)*r21*x2417*x2418))+((r20*sj1*x2416))+((cj1*x2419))+(((-1.0)*r00*x2414*x2416)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x2416))+(((-1.0)*r01*x2417*x2418))+(((-1.0)*x2414*x2415))+(((-1.0)*r21*x2414*x2417))+(((-1.0)*x2418*x2419))+((r00*sj1*x2416))))+IKsqr(((((-1.0)*x2415*x2418))+((cj1*r01*x2417))+(((-1.0)*r21*x2417*x2418))+((r20*sj1*x2416))+((cj1*x2419))+(((-1.0)*r00*x2414*x2416))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x2416))+(((-1.0)*r01*x2417*x2418))+(((-1.0)*x2414*x2415))+(((-1.0)*r21*x2414*x2417))+(((-1.0)*x2418*x2419))+((r00*sj1*x2416))), ((((-1.0)*x2415*x2418))+((cj1*r01*x2417))+(((-1.0)*r21*x2417*x2418))+((r20*sj1*x2416))+((cj1*x2419))+(((-1.0)*r00*x2414*x2416))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2420=IKcos(j2);
IkReal x2421=IKsin(j2);
IkReal x2422=((1.0)*cj3);
IkReal x2423=(cj5*r00);
IkReal x2424=((0.35575)*sj1);
IkReal x2425=(cj5*sj3);
IkReal x2426=((1.0)*cj4);
IkReal x2427=(cj5*r20);
IkReal x2428=((1.0)*sj1);
IkReal x2429=(sj3*sj5);
IkReal x2430=((0.12)*sj5);
IkReal x2431=((0.35575)*cj1);
IkReal x2432=(cj1*x2420);
IkReal x2433=(cj3*cj4*sj5);
IkReal x2434=((1.0)*sj4*sj5);
IkReal x2435=(x2420*x2428);
IkReal x2436=((1.0)*cj1*x2421);
IkReal x2437=(x2436+x2435);
evalcond[0]=((((-1.0)*r02*x2426))+x2432+((sj4*x2423))+(((-1.0)*r01*x2434))+(((-1.0)*x2421*x2428)));
evalcond[1]=((((-1.0)*x2437))+((sj4*x2427))+(((-1.0)*r22*x2426))+(((-1.0)*r21*x2434)));
evalcond[2]=(x2431+(((-1.0)*x2421*x2431))+(((-1.0)*x2420*x2424))+(((-1.0)*pz))+(((-0.12)*x2427))+((r21*x2430)));
evalcond[3]=(x2424+((r01*x2430))+(((-1.0)*px))+(((-0.12)*x2423))+(((-1.0)*x2421*x2424))+((x2420*x2431)));
evalcond[4]=((((-1.0)*x2432))+(((-1.0)*r22*sj4*x2422))+((r21*x2425))+((sj1*x2421))+((r21*x2433))+((r20*x2429))+(((-1.0)*cj4*x2422*x2427)));
evalcond[5]=(((r01*x2433))+(((-1.0)*x2437))+(((-1.0)*r02*sj4*x2422))+((r00*x2429))+((r01*x2425))+(((-1.0)*cj4*x2422*x2423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2438=((0.33731553056922)*cj5);
IkReal x2439=(r01*sj5);
IkReal x2440=((1.0)*sj4);
IkReal x2441=(r21*sj5);
if( IKabs(((((-1.0)*cj5*r00*x2440))+(((-1.0)*r00*x2438))+(((0.33731553056922)*x2439))+(((-2.8109627547435)*px))+((sj4*x2439))+((cj4*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x2438))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-0.33731553056922)*x2441))+(((-1.0)*x2440*x2441)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj5*r00*x2440))+(((-1.0)*r00*x2438))+(((0.33731553056922)*x2439))+(((-2.8109627547435)*px))+((sj4*x2439))+((cj4*r02))))+IKsqr((((r20*x2438))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-0.33731553056922)*x2441))+(((-1.0)*x2440*x2441))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((((-1.0)*cj5*r00*x2440))+(((-1.0)*r00*x2438))+(((0.33731553056922)*x2439))+(((-2.8109627547435)*px))+((sj4*x2439))+((cj4*r02))), (((r20*x2438))+((cj5*r20*sj4))+(((2.8109627547435)*pz))+(((-1.0)*cj4*r22))+(((-0.33731553056922)*x2441))+(((-1.0)*x2440*x2441))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2442=((1.0)*pz);
IkReal x2443=((0.35575)*r21);
IkReal x2444=(cj5*sj3);
IkReal x2445=((0.35575)*r22);
IkReal x2446=(cj3*sj4);
IkReal x2447=(sj4*sj5);
IkReal x2448=((0.35575)*r02);
IkReal x2449=((0.35575)*r01);
IkReal x2450=((0.12)*cj5);
IkReal x2451=((0.12)*sj5);
IkReal x2452=(cj3*cj4);
IkReal x2453=(r01*x2451);
IkReal x2454=((0.35575)*(IKsin(j1)));
IkReal x2455=(r00*x2450);
IkReal x2456=(r21*x2451);
IkReal x2457=((0.35575)*(IKcos(j1)));
IkReal x2458=(r20*x2450);
IkReal x2459=(sj5*x2452);
IkReal x2460=((0.35575)*sj3*sj5);
IkReal x2461=((0.35575)*cj5*r00);
IkReal x2462=((0.35575)*cj5*r20);
IkReal x2463=(x2442+x2458);
IkReal x2464=(x2457+x2456);
IkReal x2465=(x2455+x2454);
evalcond[0]=(x2465+(((-1.0)*cj4*x2448))+px+(((-1.0)*x2453))+(((-1.0)*x2447*x2449))+((sj4*x2461)));
evalcond[1]=(x2464+(((-1.0)*sj4*x2462))+((x2443*x2447))+((cj4*x2445))+(((-1.0)*x2463)));
evalcond[2]=((((-1.0)*x2443*x2444))+x2453+((x2452*x2462))+(((-1.0)*px))+(((-1.0)*r20*x2460))+((x2445*x2446))+(((-1.0)*x2465))+(((-1.0)*x2443*x2459)));
evalcond[3]=(x2464+((x2449*x2459))+(((-1.0)*x2446*x2448))+((x2444*x2449))+(((-1.0)*x2463))+(((-1.0)*x2452*x2461))+((r00*x2460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2466=(sj1*sj4);
IkReal x2467=(r01*sj5);
IkReal x2468=((1.0)*cj1);
IkReal x2469=(cj4*r22);
IkReal x2470=(cj4*r02);
IkReal x2471=(cj5*r20);
IkReal x2472=(cj1*sj4);
IkReal x2473=(cj5*r00);
IkReal x2474=(r21*sj5);
if( IKabs((((x2471*x2472))+(((-1.0)*sj4*x2468*x2474))+(((-1.0)*x2468*x2469))+((x2466*x2467))+(((-1.0)*x2466*x2473))+((sj1*x2470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2469))+(((-1.0)*x2466*x2474))+(((-1.0)*x2468*x2470))+((x2466*x2471))+(((-1.0)*sj4*x2467*x2468))+((x2472*x2473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2471*x2472))+(((-1.0)*sj4*x2468*x2474))+(((-1.0)*x2468*x2469))+((x2466*x2467))+(((-1.0)*x2466*x2473))+((sj1*x2470))))+IKsqr(((((-1.0)*sj1*x2469))+(((-1.0)*x2466*x2474))+(((-1.0)*x2468*x2470))+((x2466*x2471))+(((-1.0)*sj4*x2467*x2468))+((x2472*x2473))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2471*x2472))+(((-1.0)*sj4*x2468*x2474))+(((-1.0)*x2468*x2469))+((x2466*x2467))+(((-1.0)*x2466*x2473))+((sj1*x2470))), ((((-1.0)*sj1*x2469))+(((-1.0)*x2466*x2474))+(((-1.0)*x2468*x2470))+((x2466*x2471))+(((-1.0)*sj4*x2467*x2468))+((x2472*x2473))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2475=IKcos(j2);
IkReal x2476=IKsin(j2);
IkReal x2477=(cj3*cj4);
IkReal x2478=(r21*sj5);
IkReal x2479=(cj5*r00);
IkReal x2480=((0.35575)*sj1);
IkReal x2481=(r01*sj5);
IkReal x2482=((1.0)*sj4);
IkReal x2483=(cj5*sj3);
IkReal x2484=((1.0)*cj4);
IkReal x2485=(cj5*r20);
IkReal x2486=(sj3*sj5);
IkReal x2487=(sj1*x2476);
IkReal x2488=(cj1*x2476);
IkReal x2489=(cj1*x2475);
IkReal x2490=(sj1*x2475);
IkReal x2491=((1.0)*x2489);
evalcond[0]=(x2487+((sj4*x2479))+(((-1.0)*x2491))+(((-1.0)*r02*x2484))+(((-1.0)*x2481*x2482)));
evalcond[1]=((((-1.0)*r22*x2484))+(((-1.0)*x2488))+(((-1.0)*x2490))+((sj4*x2485))+(((-1.0)*x2478*x2482)));
evalcond[2]=((((-0.35575)*x2488))+(((-1.0)*pz))+(((0.12)*x2478))+(((-0.12)*x2485))+(((0.35575)*cj1))+(((-1.0)*x2475*x2480)));
evalcond[3]=(((x2476*x2480))+(((-0.12)*x2479))+(((-0.35575)*x2489))+(((-1.0)*x2480))+(((-1.0)*px))+(((0.12)*x2481)));
evalcond[4]=(((r01*x2483))+x2488+x2490+((x2477*x2481))+(((-1.0)*cj3*r02*x2482))+(((-1.0)*x2477*x2479))+((r00*x2486)));
evalcond[5]=(x2487+(((-1.0)*cj3*r22*x2482))+(((-1.0)*x2491))+(((-1.0)*x2477*x2485))+((x2477*x2478))+((r21*x2483))+((r20*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2492=((0.35575)*cj0);
IkReal x2493=(r01*sj5);
IkReal x2494=((0.12)*cj0);
IkReal x2495=(cj5*r00);
IkReal x2496=(cj5*r20);
IkReal x2497=(r21*sj5);
CheckValue<IkReal> x2498=IKPowWithIntegerCheck(cj0,-2);
if(!x2498.valid){
continue;
}
if( IKabs(((-2.8109627547435)*(x2498.value)*(((((-1.0)*x2494*x2495))+((x2493*x2494))+((sj4*x2492*x2493))+((cj4*r02*x2492))+(((-1.0)*sj4*x2492*x2495))+(((-1.0)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x2497))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2497))+((sj4*x2496))+(((-1.0)*cj4*r22))+(((0.33731553056922)*x2496)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.8109627547435)*(x2498.value)*(((((-1.0)*x2494*x2495))+((x2493*x2494))+((sj4*x2492*x2493))+((cj4*r02*x2492))+(((-1.0)*sj4*x2492*x2495))+(((-1.0)*cj0*px))))))+IKsqr(((((-1.0)*sj4*x2497))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2497))+((sj4*x2496))+(((-1.0)*cj4*r22))+(((0.33731553056922)*x2496))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.8109627547435)*(x2498.value)*(((((-1.0)*x2494*x2495))+((x2493*x2494))+((sj4*x2492*x2493))+((cj4*r02*x2492))+(((-1.0)*sj4*x2492*x2495))+(((-1.0)*cj0*px))))), ((((-1.0)*sj4*x2497))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2497))+((sj4*x2496))+(((-1.0)*cj4*r22))+(((0.33731553056922)*x2496))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2499=IKsin(j1);
IkReal x2500=IKcos(j1);
IkReal x2501=((0.35575)*cj0);
IkReal x2502=(cj4*r02);
IkReal x2503=((1.0)*py);
IkReal x2504=((0.35575)*sj0);
IkReal x2505=(sj3*sj5);
IkReal x2506=(r21*sj5);
IkReal x2507=((0.12)*sj0);
IkReal x2508=(sj4*sj5);
IkReal x2509=(cj5*sj4);
IkReal x2510=((0.35575)*sj4);
IkReal x2511=((0.35575)*r10);
IkReal x2512=((0.35575)*r00);
IkReal x2513=(cj5*r10);
IkReal x2514=(cj4*r12);
IkReal x2515=((0.35575)*cj4);
IkReal x2516=(cj5*sj3);
IkReal x2517=(cj5*r20);
IkReal x2518=(cj3*cj4);
IkReal x2519=((1.0)*px);
IkReal x2520=(cj5*r00);
IkReal x2521=(r11*sj5);
IkReal x2522=(r01*sj5);
IkReal x2523=((0.12)*cj0*cj5);
IkReal x2524=((0.35575)*x2499);
IkReal x2525=((0.12)*cj0*sj5);
IkReal x2526=(cj3*r22*sj4);
IkReal x2527=(sj0*x2499*x2501);
evalcond[0]=(((x2506*x2510))+((r22*x2515))+(((-1.0)*pz))+(((-0.12)*x2517))+(((0.35575)*x2500))+(((0.12)*x2506))+(((-0.35575)*r20*x2509)));
evalcond[1]=(((sj0*x2499*x2504))+((x2504*x2514))+(((-1.0)*r10*x2504*x2509))+((x2507*x2521))+(((-1.0)*sj0*x2503))+(((-1.0)*x2507*x2513))+((r11*x2504*x2508)));
evalcond[2]=(((cj0*x2499*x2501))+((x2501*x2502))+(((-1.0)*cj0*x2519))+((r01*x2501*x2508))+(((-0.12)*cj0*x2520))+(((-1.0)*r00*x2501*x2509))+(((0.12)*cj0*x2522)));
evalcond[3]=(((x2505*x2511))+(((-1.0)*x2500*x2504))+(((0.35575)*r11*x2516))+((x2507*x2517))+((cj3*x2515*x2521))+((pz*sj0))+(((-1.0)*cj3*r12*x2510))+(((-1.0)*x2506*x2507))+(((-1.0)*cj5*x2511*x2518)));
evalcond[4]=((((-1.0)*cj5*x2512*x2518))+(((-1.0)*cj3*r02*x2510))+((x2505*x2512))+(((0.12)*cj0*x2517))+(((-0.12)*cj0*x2506))+(((-1.0)*x2500*x2501))+(((0.35575)*r01*x2516))+((cj3*x2515*x2522))+((cj0*pz)));
evalcond[5]=((((-1.0)*x2504*x2517*x2518))+(((-1.0)*x2503))+(((0.12)*x2521))+((x2504*x2506*x2518))+((x2499*x2504))+(((-0.12)*x2513))+(((-1.0)*x2504*x2526))+((r20*x2504*x2505))+((r21*x2504*x2516)));
evalcond[6]=((((-1.0)*x2519))+(((0.12)*x2522))+(((-0.12)*x2520))+(((-1.0)*x2501*x2526))+((x2499*x2501))+((r20*x2501*x2505))+(((-1.0)*x2501*x2517*x2518))+((r21*x2501*x2516))+((x2501*x2506*x2518)));
evalcond[7]=(x2527+((x2501*x2514))+((x2507*x2522))+(((-1.0)*r10*x2501*x2509))+(((-1.0)*sj0*x2519))+((r11*x2501*x2508))+(((-1.0)*x2507*x2520)));
evalcond[8]=(x2527+(((-1.0)*r00*x2504*x2509))+(((-0.12)*cj0*x2513))+(((-1.0)*cj0*x2503))+((r01*x2504*x2508))+(((0.12)*cj0*x2521))+((x2502*x2504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2528=((1.0)*cj1);
IkReal x2529=(cj4*r22);
IkReal x2530=(cj5*sj4);
IkReal x2531=(sj4*sj5);
IkReal x2532=((1.0)*sj1);
IkReal x2533=(cj4*r02);
if( IKabs(((((-1.0)*x2528*x2529))+(((-1.0)*r01*x2531*x2532))+((r00*sj1*x2530))+(((-1.0)*r21*x2528*x2531))+((cj1*r20*x2530))+(((-1.0)*x2532*x2533)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2531*x2532))+(((-1.0)*r00*x2528*x2530))+((r20*sj1*x2530))+((cj1*x2533))+((cj1*r01*x2531))+(((-1.0)*x2529*x2532)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2528*x2529))+(((-1.0)*r01*x2531*x2532))+((r00*sj1*x2530))+(((-1.0)*r21*x2528*x2531))+((cj1*r20*x2530))+(((-1.0)*x2532*x2533))))+IKsqr(((((-1.0)*r21*x2531*x2532))+(((-1.0)*r00*x2528*x2530))+((r20*sj1*x2530))+((cj1*x2533))+((cj1*r01*x2531))+(((-1.0)*x2529*x2532))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2528*x2529))+(((-1.0)*r01*x2531*x2532))+((r00*sj1*x2530))+(((-1.0)*r21*x2528*x2531))+((cj1*r20*x2530))+(((-1.0)*x2532*x2533))), ((((-1.0)*r21*x2531*x2532))+(((-1.0)*r00*x2528*x2530))+((r20*sj1*x2530))+((cj1*x2533))+((cj1*r01*x2531))+(((-1.0)*x2529*x2532))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2534=IKcos(j2);
IkReal x2535=IKsin(j2);
IkReal x2536=((1.0)*cj3);
IkReal x2537=(cj5*r00);
IkReal x2538=((0.35575)*sj1);
IkReal x2539=(cj5*sj3);
IkReal x2540=((1.0)*cj4);
IkReal x2541=(cj5*r20);
IkReal x2542=((1.0)*sj1);
IkReal x2543=(sj3*sj5);
IkReal x2544=((0.12)*sj5);
IkReal x2545=((0.35575)*cj1);
IkReal x2546=(cj1*x2534);
IkReal x2547=(cj3*cj4*sj5);
IkReal x2548=((1.0)*sj4*sj5);
IkReal x2549=(x2534*x2542);
IkReal x2550=((1.0)*cj1*x2535);
IkReal x2551=(x2550+x2549);
evalcond[0]=(x2546+((sj4*x2537))+(((-1.0)*x2535*x2542))+(((-1.0)*r01*x2548))+(((-1.0)*r02*x2540)));
evalcond[1]=((((-1.0)*r21*x2548))+(((-1.0)*r22*x2540))+(((-1.0)*x2551))+((sj4*x2541)));
evalcond[2]=(x2545+((r21*x2544))+(((-1.0)*x2534*x2538))+(((-0.12)*x2541))+(((-1.0)*pz))+(((-1.0)*x2535*x2545)));
evalcond[3]=(x2538+((x2534*x2545))+(((-1.0)*x2535*x2538))+(((-1.0)*px))+((r01*x2544))+(((-0.12)*x2537)));
evalcond[4]=(((r21*x2547))+((sj1*x2535))+(((-1.0)*cj4*x2536*x2541))+((r21*x2539))+(((-1.0)*x2546))+((r20*x2543))+(((-1.0)*r22*sj4*x2536)));
evalcond[5]=(((r01*x2539))+((r00*x2543))+((r01*x2547))+(((-1.0)*r02*sj4*x2536))+(((-1.0)*cj4*x2536*x2537))+(((-1.0)*x2551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2552=(sj1*sj4);
IkReal x2553=(r01*sj5);
IkReal x2554=((1.0)*cj1);
IkReal x2555=(cj4*r22);
IkReal x2556=(cj4*r02);
IkReal x2557=(cj5*r20);
IkReal x2558=(cj1*sj4);
IkReal x2559=(cj5*r00);
IkReal x2560=(r21*sj5);
if( IKabs(((((-1.0)*x2554*x2555))+(((-1.0)*sj4*x2554*x2560))+((x2557*x2558))+((sj1*x2556))+((x2552*x2553))+(((-1.0)*x2552*x2559)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2554*x2556))+(((-1.0)*sj4*x2553*x2554))+(((-1.0)*x2552*x2560))+((x2558*x2559))+((x2552*x2557))+(((-1.0)*sj1*x2555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2554*x2555))+(((-1.0)*sj4*x2554*x2560))+((x2557*x2558))+((sj1*x2556))+((x2552*x2553))+(((-1.0)*x2552*x2559))))+IKsqr(((((-1.0)*x2554*x2556))+(((-1.0)*sj4*x2553*x2554))+(((-1.0)*x2552*x2560))+((x2558*x2559))+((x2552*x2557))+(((-1.0)*sj1*x2555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2554*x2555))+(((-1.0)*sj4*x2554*x2560))+((x2557*x2558))+((sj1*x2556))+((x2552*x2553))+(((-1.0)*x2552*x2559))), ((((-1.0)*x2554*x2556))+(((-1.0)*sj4*x2553*x2554))+(((-1.0)*x2552*x2560))+((x2558*x2559))+((x2552*x2557))+(((-1.0)*sj1*x2555))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2561=IKcos(j2);
IkReal x2562=IKsin(j2);
IkReal x2563=(cj3*cj4);
IkReal x2564=(r21*sj5);
IkReal x2565=(cj5*r00);
IkReal x2566=((0.35575)*sj1);
IkReal x2567=(r01*sj5);
IkReal x2568=((1.0)*sj4);
IkReal x2569=(cj5*sj3);
IkReal x2570=((1.0)*cj4);
IkReal x2571=(cj5*r20);
IkReal x2572=(sj3*sj5);
IkReal x2573=(sj1*x2562);
IkReal x2574=(cj1*x2562);
IkReal x2575=(cj1*x2561);
IkReal x2576=(sj1*x2561);
IkReal x2577=((1.0)*x2575);
evalcond[0]=(x2573+((sj4*x2565))+(((-1.0)*x2577))+(((-1.0)*x2567*x2568))+(((-1.0)*r02*x2570)));
evalcond[1]=((((-1.0)*x2576))+(((-1.0)*x2574))+(((-1.0)*x2564*x2568))+(((-1.0)*r22*x2570))+((sj4*x2571)));
evalcond[2]=((((-0.12)*x2571))+(((-1.0)*x2561*x2566))+(((0.12)*x2564))+(((-1.0)*pz))+(((0.35575)*cj1))+(((-0.35575)*x2574)));
evalcond[3]=((((-0.12)*x2565))+((x2562*x2566))+(((-1.0)*x2566))+(((0.12)*x2567))+(((-1.0)*px))+(((-0.35575)*x2575)));
evalcond[4]=((((-1.0)*cj3*r02*x2568))+x2576+x2574+((r01*x2569))+(((-1.0)*x2563*x2565))+((x2563*x2567))+((r00*x2572)));
evalcond[5]=(x2573+((x2563*x2564))+((r20*x2572))+(((-1.0)*x2577))+(((-1.0)*cj3*r22*x2568))+(((-1.0)*x2563*x2571))+((r21*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2578=(cj1*cj4);
IkReal x2579=((1.0)*r22);
IkReal x2580=(cj5*sj4);
IkReal x2581=((1.0)*cj1);
IkReal x2582=((1.0)*sj1);
IkReal x2583=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r12*x2582))+(((-1.0)*r21*x2581*x2583))+(((-1.0)*r11*x2582*x2583))+((r10*sj1*x2580))+(((-1.0)*x2578*x2579))+((cj1*r20*x2580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2582*x2583))+((cj1*r11*x2583))+((r12*x2578))+(((-1.0)*cj4*sj1*x2579))+(((-1.0)*r10*x2580*x2581))+((r20*sj1*x2580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r12*x2582))+(((-1.0)*r21*x2581*x2583))+(((-1.0)*r11*x2582*x2583))+((r10*sj1*x2580))+(((-1.0)*x2578*x2579))+((cj1*r20*x2580))))+IKsqr(((((-1.0)*r21*x2582*x2583))+((cj1*r11*x2583))+((r12*x2578))+(((-1.0)*cj4*sj1*x2579))+(((-1.0)*r10*x2580*x2581))+((r20*sj1*x2580))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj4*r12*x2582))+(((-1.0)*r21*x2581*x2583))+(((-1.0)*r11*x2582*x2583))+((r10*sj1*x2580))+(((-1.0)*x2578*x2579))+((cj1*r20*x2580))), ((((-1.0)*r21*x2582*x2583))+((cj1*r11*x2583))+((r12*x2578))+(((-1.0)*cj4*sj1*x2579))+(((-1.0)*r10*x2580*x2581))+((r20*sj1*x2580))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2584=IKcos(j2);
IkReal x2585=IKsin(j2);
IkReal x2586=(cj3*cj4);
IkReal x2587=(r21*sj5);
IkReal x2588=((0.35575)*sj1);
IkReal x2589=((1.0)*sj4);
IkReal x2590=((1.0)*cj5);
IkReal x2591=(cj5*sj3);
IkReal x2592=((1.0)*sj1);
IkReal x2593=(cj5*r10);
IkReal x2594=((1.0)*cj4);
IkReal x2595=(cj5*r20);
IkReal x2596=(sj3*sj5);
IkReal x2597=((0.35575)*cj1);
IkReal x2598=(r11*sj5);
IkReal x2599=(cj1*x2584);
IkReal x2600=(x2584*x2592);
IkReal x2601=((1.0)*cj1*x2585);
IkReal x2602=(x2600+x2601);
evalcond[0]=(x2599+(((-1.0)*x2585*x2592))+(((-1.0)*x2589*x2598))+((sj4*x2593))+(((-1.0)*r12*x2594)));
evalcond[1]=((((-1.0)*r22*x2594))+(((-1.0)*x2587*x2589))+((sj4*x2595))+(((-1.0)*x2602)));
evalcond[2]=((((-0.12)*x2595))+x2597+(((-1.0)*x2585*x2597))+(((0.12)*x2587))+(((-1.0)*pz))+(((-1.0)*x2584*x2588)));
evalcond[3]=((((-0.12)*x2593))+x2588+(((-1.0)*x2585*x2588))+(((0.12)*x2598))+(((-1.0)*py))+((x2584*x2597)));
evalcond[4]=((((-1.0)*x2599))+(((-1.0)*r20*x2586*x2590))+((r20*x2596))+((x2586*x2587))+(((-1.0)*cj3*r22*x2589))+((sj1*x2585))+((r21*x2591)));
evalcond[5]=(((r10*x2596))+((x2586*x2598))+(((-1.0)*r10*x2586*x2590))+((r11*x2591))+(((-1.0)*x2602))+(((-1.0)*cj3*r12*x2589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2603=(cj1*sj4);
IkReal x2604=(cj5*r20);
IkReal x2605=(r11*sj5);
IkReal x2606=(sj1*sj4);
IkReal x2607=(cj4*r12);
IkReal x2608=(cj5*r10);
IkReal x2609=((1.0)*cj4*r22);
IkReal x2610=((1.0)*r21*sj5);
if( IKabs((((x2603*x2604))+(((-1.0)*x2606*x2608))+((x2605*x2606))+(((-1.0)*cj1*x2609))+(((-1.0)*x2603*x2610))+((sj1*x2607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2603*x2608))+(((-1.0)*x2606*x2610))+(((-1.0)*sj1*x2609))+(((-1.0)*x2603*x2605))+(((-1.0)*cj1*x2607))+((x2604*x2606)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2603*x2604))+(((-1.0)*x2606*x2608))+((x2605*x2606))+(((-1.0)*cj1*x2609))+(((-1.0)*x2603*x2610))+((sj1*x2607))))+IKsqr((((x2603*x2608))+(((-1.0)*x2606*x2610))+(((-1.0)*sj1*x2609))+(((-1.0)*x2603*x2605))+(((-1.0)*cj1*x2607))+((x2604*x2606))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2603*x2604))+(((-1.0)*x2606*x2608))+((x2605*x2606))+(((-1.0)*cj1*x2609))+(((-1.0)*x2603*x2610))+((sj1*x2607))), (((x2603*x2608))+(((-1.0)*x2606*x2610))+(((-1.0)*sj1*x2609))+(((-1.0)*x2603*x2605))+(((-1.0)*cj1*x2607))+((x2604*x2606))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2611=IKcos(j2);
IkReal x2612=IKsin(j2);
IkReal x2613=(cj3*cj4);
IkReal x2614=(r21*sj5);
IkReal x2615=((0.35575)*sj1);
IkReal x2616=((1.0)*sj4);
IkReal x2617=((1.0)*cj5);
IkReal x2618=(cj5*sj3);
IkReal x2619=(cj5*r10);
IkReal x2620=((1.0)*cj4);
IkReal x2621=(cj5*r20);
IkReal x2622=(r11*sj5);
IkReal x2623=(sj3*sj5);
IkReal x2624=(sj1*x2612);
IkReal x2625=(cj1*x2611);
IkReal x2626=(cj1*x2612);
IkReal x2627=(sj1*x2611);
IkReal x2628=((1.0)*x2625);
evalcond[0]=((((-1.0)*r12*x2620))+((sj4*x2619))+(((-1.0)*x2628))+(((-1.0)*x2616*x2622))+x2624);
evalcond[1]=((((-1.0)*x2626))+(((-1.0)*x2627))+(((-1.0)*r22*x2620))+((sj4*x2621))+(((-1.0)*x2614*x2616)));
evalcond[2]=((((-0.12)*x2621))+(((-1.0)*x2611*x2615))+(((0.12)*x2614))+(((-0.35575)*x2626))+(((-1.0)*pz))+(((0.35575)*cj1)));
evalcond[3]=((((0.12)*x2622))+(((-0.12)*x2619))+(((-0.35575)*x2625))+(((-1.0)*py))+(((-1.0)*x2615))+((x2612*x2615)));
evalcond[4]=((((-1.0)*cj3*r12*x2616))+((r11*x2618))+((r10*x2623))+(((-1.0)*r10*x2613*x2617))+((x2613*x2622))+x2626+x2627);
evalcond[5]=(((x2613*x2614))+((r20*x2623))+(((-1.0)*r20*x2613*x2617))+(((-1.0)*cj3*r22*x2616))+(((-1.0)*x2628))+((r21*x2618))+x2624);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2629=(r20*sj0);
IkReal x2630=((1.0)*sj1);
IkReal x2631=(cj4*r12);
IkReal x2632=(cj5*sj1*sj4);
IkReal x2633=(cj1*cj5*sj4);
IkReal x2634=(cj4*r22*sj0);
IkReal x2635=(r11*sj4*sj5);
IkReal x2636=((1.0)*r21*sj0*sj4*sj5);
CheckValue<IkReal> x2637=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2637.valid){
continue;
}
CheckValue<IkReal> x2638 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x2634))+((r10*x2632))+(((-1.0)*cj1*x2636))+(((-1.0)*x2630*x2631))+(((-1.0)*x2630*x2635))+((x2629*x2633)))),IkReal((((cj1*x2631))+((cj1*x2635))+(((-1.0)*r21*sj0*sj4*sj5*x2630))+(((-1.0)*x2630*x2634))+(((-1.0)*r10*x2633))+((x2629*x2632)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2638.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2637.value)))+(x2638.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2639=IKcos(j2);
IkReal x2640=IKsin(j2);
IkReal x2641=((1.0)*cj3);
IkReal x2642=(cj4*cj5);
IkReal x2643=(cj5*r10);
IkReal x2644=(cj5*sj3);
IkReal x2645=((0.35575)*cj1);
IkReal x2646=((0.35575)*sj0);
IkReal x2647=((1.0)*sj1);
IkReal x2648=(sj3*sj5);
IkReal x2649=((1.0)*cj4);
IkReal x2650=((0.12)*cj5);
IkReal x2651=((1.0)*cj1);
IkReal x2652=(cj5*sj4);
IkReal x2653=((0.12)*sj5);
IkReal x2654=((0.35575)*cj0*sj1);
IkReal x2655=(cj3*cj4*sj5);
IkReal x2656=(cj1*x2639);
IkReal x2657=((1.0)*sj4*sj5);
IkReal x2658=(sj0*x2647);
IkReal x2659=(cj0*x2640);
IkReal x2660=(sj1*x2640);
evalcond[0]=((((-1.0)*r22*x2649))+(((-1.0)*x2640*x2651))+(((-1.0)*r21*x2657))+(((-1.0)*x2639*x2647))+((r20*x2652)));
evalcond[1]=(((r21*x2653))+(((-1.0)*x2640*x2645))+(((-1.0)*pz))+(((-1.0)*r20*x2650))+(((-0.35575)*sj1*x2639))+x2645);
evalcond[2]=((((-1.0)*r01*x2657))+(((-1.0)*x2647*x2659))+(((-1.0)*r02*x2649))+((cj0*x2656))+((r00*x2652)));
evalcond[3]=(((sj0*x2656))+(((-1.0)*r12*x2649))+(((-1.0)*r11*x2657))+((sj4*x2643))+(((-1.0)*x2640*x2658)));
evalcond[4]=((((-1.0)*r00*x2650))+((cj0*x2639*x2645))+(((-1.0)*x2640*x2654))+(((-1.0)*px))+((r01*x2653))+x2654);
evalcond[5]=(((r11*x2653))+(((-1.0)*x2646*x2660))+(((-1.0)*py))+(((-0.12)*x2643))+((sj0*x2639*x2645))+((sj1*x2646)));
evalcond[6]=(((r21*x2644))+((r21*x2655))+(((-1.0)*r22*sj4*x2641))+(((-1.0)*r20*x2641*x2642))+(((-1.0)*x2639*x2651))+x2660+((r20*x2648)));
evalcond[7]=((((-1.0)*x2651*x2659))+(((-1.0)*r02*sj4*x2641))+(((-1.0)*r00*x2641*x2642))+((r00*x2648))+((r01*x2655))+(((-1.0)*cj0*x2639*x2647))+((r01*x2644)));
evalcond[8]=(((r11*x2655))+((r11*x2644))+((r10*x2648))+(((-1.0)*sj0*x2640*x2651))+(((-1.0)*r10*x2641*x2642))+(((-1.0)*x2639*x2658))+(((-1.0)*r12*sj4*x2641)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2661=(sj4*sj5);
IkReal x2662=((1.0)*cj0);
IkReal x2663=(cj1*cj4);
IkReal x2664=(cj5*sj4);
IkReal x2665=(cj4*sj1);
IkReal x2666=(cj0*r20);
CheckValue<IkReal> x2667=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2667.valid){
continue;
}
CheckValue<IkReal> x2668 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*r21*x2661*x2662))+((cj1*x2664*x2666))+((r00*sj1*x2664))+(((-1.0)*r02*x2665))+(((-1.0)*r22*x2662*x2663))+(((-1.0)*r01*sj1*x2661)))),IkReal(((((-1.0)*r21*sj1*x2661*x2662))+((sj1*x2664*x2666))+((cj1*r01*x2661))+((r02*x2663))+(((-1.0)*cj1*r00*x2664))+(((-1.0)*r22*x2662*x2665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2668.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2667.value)))+(x2668.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2669=IKcos(j2);
IkReal x2670=IKsin(j2);
IkReal x2671=((1.0)*cj3);
IkReal x2672=(cj4*cj5);
IkReal x2673=(cj5*r10);
IkReal x2674=(cj5*sj3);
IkReal x2675=((0.35575)*cj1);
IkReal x2676=((0.35575)*sj0);
IkReal x2677=((1.0)*sj1);
IkReal x2678=(sj3*sj5);
IkReal x2679=((1.0)*cj4);
IkReal x2680=((0.12)*cj5);
IkReal x2681=((1.0)*cj1);
IkReal x2682=(cj5*sj4);
IkReal x2683=((0.12)*sj5);
IkReal x2684=((0.35575)*cj0*sj1);
IkReal x2685=(cj3*cj4*sj5);
IkReal x2686=(cj1*x2669);
IkReal x2687=((1.0)*sj4*sj5);
IkReal x2688=(sj0*x2677);
IkReal x2689=(cj0*x2670);
IkReal x2690=(sj1*x2670);
evalcond[0]=((((-1.0)*x2670*x2681))+(((-1.0)*r21*x2687))+(((-1.0)*x2669*x2677))+((r20*x2682))+(((-1.0)*r22*x2679)));
evalcond[1]=((((-1.0)*x2670*x2675))+((r21*x2683))+(((-1.0)*pz))+(((-1.0)*r20*x2680))+(((-0.35575)*sj1*x2669))+x2675);
evalcond[2]=(((cj0*x2686))+(((-1.0)*r01*x2687))+((r00*x2682))+(((-1.0)*r02*x2679))+(((-1.0)*x2677*x2689)));
evalcond[3]=((((-1.0)*x2670*x2688))+(((-1.0)*r12*x2679))+((sj4*x2673))+((sj0*x2686))+(((-1.0)*r11*x2687)));
evalcond[4]=((((-1.0)*x2670*x2684))+((r01*x2683))+(((-1.0)*r00*x2680))+(((-1.0)*px))+((cj0*x2669*x2675))+x2684);
evalcond[5]=(((r11*x2683))+((sj1*x2676))+((sj0*x2669*x2675))+(((-1.0)*x2676*x2690))+(((-1.0)*py))+(((-0.12)*x2673)));
evalcond[6]=(((r21*x2674))+((r21*x2685))+(((-1.0)*r22*sj4*x2671))+(((-1.0)*x2669*x2681))+(((-1.0)*r20*x2671*x2672))+((r20*x2678))+x2690);
evalcond[7]=((((-1.0)*r02*sj4*x2671))+((r01*x2685))+(((-1.0)*r00*x2671*x2672))+(((-1.0)*cj0*x2669*x2677))+(((-1.0)*x2681*x2689))+((r00*x2678))+((r01*x2674)));
evalcond[8]=(((r11*x2685))+(((-1.0)*r12*sj4*x2671))+(((-1.0)*sj0*x2670*x2681))+((r10*x2678))+(((-1.0)*r10*x2671*x2672))+(((-1.0)*x2669*x2688))+((r11*x2674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2691=((0.12)*sj0);
IkReal x2692=(r11*sj5);
IkReal x2693=(cj5*r20);
IkReal x2694=(cj5*r10);
IkReal x2695=(r21*sj5);
IkReal x2696=((0.35575)*sj0*sj4);
CheckValue<IkReal> x2697=IKPowWithIntegerCheck(sj0,-2);
if(!x2697.valid){
continue;
}
if( IKabs(((-2.8109627547435)*(x2697.value)*((((x2691*x2692))+(((0.35575)*cj4*r12*sj0))+(((-1.0)*x2691*x2694))+(((-1.0)*py*sj0))+((x2692*x2696))+(((-1.0)*x2694*x2696)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj4*x2693))+(((-1.0)*sj4*x2695))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2695))+(((0.33731553056922)*x2693))+(((-1.0)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.8109627547435)*(x2697.value)*((((x2691*x2692))+(((0.35575)*cj4*r12*sj0))+(((-1.0)*x2691*x2694))+(((-1.0)*py*sj0))+((x2692*x2696))+(((-1.0)*x2694*x2696))))))+IKsqr((((sj4*x2693))+(((-1.0)*sj4*x2695))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2695))+(((0.33731553056922)*x2693))+(((-1.0)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2.8109627547435)*(x2697.value)*((((x2691*x2692))+(((0.35575)*cj4*r12*sj0))+(((-1.0)*x2691*x2694))+(((-1.0)*py*sj0))+((x2692*x2696))+(((-1.0)*x2694*x2696))))), (((sj4*x2693))+(((-1.0)*sj4*x2695))+(((2.8109627547435)*pz))+(((-0.33731553056922)*x2695))+(((0.33731553056922)*x2693))+(((-1.0)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2698=IKsin(j1);
IkReal x2699=IKcos(j1);
IkReal x2700=((0.35575)*cj0);
IkReal x2701=(cj4*r02);
IkReal x2702=((1.0)*py);
IkReal x2703=((0.35575)*sj0);
IkReal x2704=(sj3*sj5);
IkReal x2705=(r21*sj5);
IkReal x2706=((0.12)*sj0);
IkReal x2707=(sj4*sj5);
IkReal x2708=(cj5*sj4);
IkReal x2709=((0.35575)*sj4);
IkReal x2710=((0.35575)*r10);
IkReal x2711=((0.35575)*r00);
IkReal x2712=(cj5*r10);
IkReal x2713=(cj4*r12);
IkReal x2714=((0.35575)*cj4);
IkReal x2715=(cj5*sj3);
IkReal x2716=(cj5*r20);
IkReal x2717=(cj3*cj4);
IkReal x2718=((1.0)*px);
IkReal x2719=(cj5*r00);
IkReal x2720=(r11*sj5);
IkReal x2721=(r01*sj5);
IkReal x2722=((0.12)*cj0*cj5);
IkReal x2723=((0.35575)*x2698);
IkReal x2724=((0.12)*cj0*sj5);
IkReal x2725=(cj3*r22*sj4);
IkReal x2726=(sj0*x2698*x2700);
evalcond[0]=(((x2705*x2709))+((r22*x2714))+(((-1.0)*pz))+(((-0.12)*x2716))+(((0.35575)*x2699))+(((-0.35575)*r20*x2708))+(((0.12)*x2705)));
evalcond[1]=(((sj0*x2698*x2703))+(((-1.0)*sj0*x2702))+((x2703*x2713))+((r11*x2703*x2707))+(((-1.0)*r10*x2703*x2708))+(((-1.0)*x2706*x2712))+((x2706*x2720)));
evalcond[2]=((((0.12)*cj0*x2721))+(((-1.0)*r00*x2700*x2708))+((cj0*x2698*x2700))+((r01*x2700*x2707))+((x2700*x2701))+(((-0.12)*cj0*x2719))+(((-1.0)*cj0*x2718)));
evalcond[3]=((((-1.0)*cj3*r12*x2709))+(((0.35575)*r11*x2715))+((x2706*x2716))+(((-1.0)*x2705*x2706))+(((-1.0)*cj5*x2710*x2717))+((pz*sj0))+((x2704*x2710))+(((-1.0)*x2699*x2703))+((cj3*x2714*x2720)));
evalcond[4]=((((-1.0)*cj3*r02*x2709))+(((-1.0)*cj5*x2711*x2717))+(((0.35575)*r01*x2715))+(((0.12)*cj0*x2716))+((cj0*pz))+((x2704*x2711))+(((-1.0)*x2699*x2700))+(((-0.12)*cj0*x2705))+((cj3*x2714*x2721)));
evalcond[5]=(((x2698*x2703))+((x2703*x2705*x2717))+(((-1.0)*x2703*x2716*x2717))+(((0.12)*x2720))+(((-1.0)*x2703*x2725))+(((-0.12)*x2712))+((r21*x2703*x2715))+(((-1.0)*x2702))+((r20*x2703*x2704)));
evalcond[6]=(((x2700*x2705*x2717))+(((-1.0)*x2718))+((x2698*x2700))+(((0.12)*x2721))+(((-1.0)*x2700*x2725))+(((-0.12)*x2719))+((r21*x2700*x2715))+((r20*x2700*x2704))+(((-1.0)*x2700*x2716*x2717)));
evalcond[7]=(x2726+((r11*x2700*x2707))+((x2700*x2713))+(((-1.0)*r10*x2700*x2708))+(((-1.0)*x2706*x2719))+(((-1.0)*sj0*x2718))+((x2706*x2721)));
evalcond[8]=(x2726+(((-1.0)*cj0*x2702))+(((0.12)*cj0*x2720))+((r01*x2703*x2707))+(((-1.0)*r00*x2703*x2708))+(((-0.12)*cj0*x2712))+((x2701*x2703)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2727=((1.0)*cj1);
IkReal x2728=(cj4*r22);
IkReal x2729=(cj5*sj4);
IkReal x2730=(sj4*sj5);
IkReal x2731=((1.0)*sj1);
IkReal x2732=(cj4*r02);
if( IKabs(((((-1.0)*x2731*x2732))+(((-1.0)*x2727*x2728))+((r00*sj1*x2729))+(((-1.0)*r01*x2730*x2731))+(((-1.0)*r21*x2727*x2730))+((cj1*r20*x2729)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2727*x2729))+((cj1*x2732))+(((-1.0)*x2728*x2731))+((cj1*r01*x2730))+(((-1.0)*r21*x2730*x2731))+((r20*sj1*x2729)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2731*x2732))+(((-1.0)*x2727*x2728))+((r00*sj1*x2729))+(((-1.0)*r01*x2730*x2731))+(((-1.0)*r21*x2727*x2730))+((cj1*r20*x2729))))+IKsqr(((((-1.0)*r00*x2727*x2729))+((cj1*x2732))+(((-1.0)*x2728*x2731))+((cj1*r01*x2730))+(((-1.0)*r21*x2730*x2731))+((r20*sj1*x2729))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2731*x2732))+(((-1.0)*x2727*x2728))+((r00*sj1*x2729))+(((-1.0)*r01*x2730*x2731))+(((-1.0)*r21*x2727*x2730))+((cj1*r20*x2729))), ((((-1.0)*r00*x2727*x2729))+((cj1*x2732))+(((-1.0)*x2728*x2731))+((cj1*r01*x2730))+(((-1.0)*r21*x2730*x2731))+((r20*sj1*x2729))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2733=IKcos(j2);
IkReal x2734=IKsin(j2);
IkReal x2735=((1.0)*cj3);
IkReal x2736=(cj5*r00);
IkReal x2737=((0.35575)*sj1);
IkReal x2738=(cj5*sj3);
IkReal x2739=((1.0)*cj4);
IkReal x2740=(cj5*r20);
IkReal x2741=((1.0)*sj1);
IkReal x2742=(sj3*sj5);
IkReal x2743=((0.12)*sj5);
IkReal x2744=((0.35575)*cj1);
IkReal x2745=(cj1*x2733);
IkReal x2746=(cj3*cj4*sj5);
IkReal x2747=((1.0)*sj4*sj5);
IkReal x2748=(x2733*x2741);
IkReal x2749=((1.0)*cj1*x2734);
IkReal x2750=(x2749+x2748);
evalcond[0]=(x2745+(((-1.0)*r01*x2747))+(((-1.0)*x2734*x2741))+(((-1.0)*r02*x2739))+((sj4*x2736)));
evalcond[1]=(((sj4*x2740))+(((-1.0)*r22*x2739))+(((-1.0)*x2750))+(((-1.0)*r21*x2747)));
evalcond[2]=(x2744+((r21*x2743))+(((-0.12)*x2740))+(((-1.0)*x2733*x2737))+(((-1.0)*pz))+(((-1.0)*x2734*x2744)));
evalcond[3]=(x2737+(((-1.0)*x2734*x2737))+(((-0.12)*x2736))+((x2733*x2744))+(((-1.0)*px))+((r01*x2743)));
evalcond[4]=(((r21*x2746))+((r21*x2738))+(((-1.0)*r22*sj4*x2735))+(((-1.0)*cj4*x2735*x2740))+((r20*x2742))+((sj1*x2734))+(((-1.0)*x2745)));
evalcond[5]=((((-1.0)*r02*sj4*x2735))+((r01*x2738))+((r01*x2746))+((r00*x2742))+(((-1.0)*x2750))+(((-1.0)*cj4*x2735*x2736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2751=(sj1*sj4);
IkReal x2752=(r01*sj5);
IkReal x2753=((1.0)*cj1);
IkReal x2754=(cj4*r22);
IkReal x2755=(cj4*r02);
IkReal x2756=(cj5*r20);
IkReal x2757=(cj1*sj4);
IkReal x2758=(cj5*r00);
IkReal x2759=(r21*sj5);
if( IKabs(((((-1.0)*x2751*x2758))+(((-1.0)*sj4*x2753*x2759))+((x2756*x2757))+(((-1.0)*x2753*x2754))+((sj1*x2755))+((x2751*x2752)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2751*x2759))+(((-1.0)*sj1*x2754))+(((-1.0)*sj4*x2752*x2753))+((x2757*x2758))+(((-1.0)*x2753*x2755))+((x2751*x2756)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2751*x2758))+(((-1.0)*sj4*x2753*x2759))+((x2756*x2757))+(((-1.0)*x2753*x2754))+((sj1*x2755))+((x2751*x2752))))+IKsqr(((((-1.0)*x2751*x2759))+(((-1.0)*sj1*x2754))+(((-1.0)*sj4*x2752*x2753))+((x2757*x2758))+(((-1.0)*x2753*x2755))+((x2751*x2756))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2751*x2758))+(((-1.0)*sj4*x2753*x2759))+((x2756*x2757))+(((-1.0)*x2753*x2754))+((sj1*x2755))+((x2751*x2752))), ((((-1.0)*x2751*x2759))+(((-1.0)*sj1*x2754))+(((-1.0)*sj4*x2752*x2753))+((x2757*x2758))+(((-1.0)*x2753*x2755))+((x2751*x2756))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2760=IKcos(j2);
IkReal x2761=IKsin(j2);
IkReal x2762=(cj3*cj4);
IkReal x2763=(r21*sj5);
IkReal x2764=(cj5*r00);
IkReal x2765=((0.35575)*sj1);
IkReal x2766=(r01*sj5);
IkReal x2767=((1.0)*sj4);
IkReal x2768=(cj5*sj3);
IkReal x2769=((1.0)*cj4);
IkReal x2770=(cj5*r20);
IkReal x2771=(sj3*sj5);
IkReal x2772=(sj1*x2761);
IkReal x2773=(cj1*x2761);
IkReal x2774=(cj1*x2760);
IkReal x2775=(sj1*x2760);
IkReal x2776=((1.0)*x2774);
evalcond[0]=(x2772+((sj4*x2764))+(((-1.0)*x2776))+(((-1.0)*r02*x2769))+(((-1.0)*x2766*x2767)));
evalcond[1]=((((-1.0)*x2773))+(((-1.0)*x2775))+((sj4*x2770))+(((-1.0)*r22*x2769))+(((-1.0)*x2763*x2767)));
evalcond[2]=((((-0.12)*x2770))+(((-1.0)*x2760*x2765))+(((-1.0)*pz))+(((0.12)*x2763))+(((0.35575)*cj1))+(((-0.35575)*x2773)));
evalcond[3]=((((-0.12)*x2764))+((x2761*x2765))+(((-1.0)*x2765))+(((-1.0)*px))+(((0.12)*x2766))+(((-0.35575)*x2774)));
evalcond[4]=((((-1.0)*cj3*r02*x2767))+x2773+x2775+((r00*x2771))+((x2762*x2766))+((r01*x2768))+(((-1.0)*x2762*x2764)));
evalcond[5]=(x2772+((x2762*x2763))+((r20*x2771))+(((-1.0)*x2762*x2770))+(((-1.0)*x2776))+(((-1.0)*cj3*r22*x2767))+((r21*x2768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2777=(cj1*cj4);
IkReal x2778=((1.0)*r22);
IkReal x2779=(cj5*sj4);
IkReal x2780=((1.0)*cj1);
IkReal x2781=((1.0)*sj1);
IkReal x2782=(sj4*sj5);
if( IKabs(((((-1.0)*r21*x2780*x2782))+(((-1.0)*x2777*x2778))+(((-1.0)*r11*x2781*x2782))+((cj1*r20*x2779))+(((-1.0)*cj4*r12*x2781))+((r10*sj1*x2779)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x2781*x2782))+((cj1*r11*x2782))+((r20*sj1*x2779))+(((-1.0)*cj4*sj1*x2778))+(((-1.0)*r10*x2779*x2780))+((r12*x2777)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2780*x2782))+(((-1.0)*x2777*x2778))+(((-1.0)*r11*x2781*x2782))+((cj1*r20*x2779))+(((-1.0)*cj4*r12*x2781))+((r10*sj1*x2779))))+IKsqr(((((-1.0)*r21*x2781*x2782))+((cj1*r11*x2782))+((r20*sj1*x2779))+(((-1.0)*cj4*sj1*x2778))+(((-1.0)*r10*x2779*x2780))+((r12*x2777))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2780*x2782))+(((-1.0)*x2777*x2778))+(((-1.0)*r11*x2781*x2782))+((cj1*r20*x2779))+(((-1.0)*cj4*r12*x2781))+((r10*sj1*x2779))), ((((-1.0)*r21*x2781*x2782))+((cj1*r11*x2782))+((r20*sj1*x2779))+(((-1.0)*cj4*sj1*x2778))+(((-1.0)*r10*x2779*x2780))+((r12*x2777))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2783=IKcos(j2);
IkReal x2784=IKsin(j2);
IkReal x2785=(cj3*cj4);
IkReal x2786=(r21*sj5);
IkReal x2787=((0.35575)*sj1);
IkReal x2788=((1.0)*sj4);
IkReal x2789=((1.0)*cj5);
IkReal x2790=(cj5*sj3);
IkReal x2791=((1.0)*sj1);
IkReal x2792=(cj5*r10);
IkReal x2793=((1.0)*cj4);
IkReal x2794=(cj5*r20);
IkReal x2795=(sj3*sj5);
IkReal x2796=((0.35575)*cj1);
IkReal x2797=(r11*sj5);
IkReal x2798=(cj1*x2783);
IkReal x2799=(x2783*x2791);
IkReal x2800=((1.0)*cj1*x2784);
IkReal x2801=(x2799+x2800);
evalcond[0]=(x2798+(((-1.0)*x2784*x2791))+((sj4*x2792))+(((-1.0)*x2788*x2797))+(((-1.0)*r12*x2793)));
evalcond[1]=((((-1.0)*x2801))+(((-1.0)*x2786*x2788))+(((-1.0)*r22*x2793))+((sj4*x2794)));
evalcond[2]=(x2796+(((-1.0)*x2784*x2796))+(((0.12)*x2786))+(((-1.0)*x2783*x2787))+(((-1.0)*pz))+(((-0.12)*x2794)));
evalcond[3]=(x2787+(((-1.0)*x2784*x2787))+(((0.12)*x2797))+((x2783*x2796))+(((-1.0)*py))+(((-0.12)*x2792)));
evalcond[4]=(((r21*x2790))+((x2785*x2786))+(((-1.0)*x2798))+(((-1.0)*cj3*r22*x2788))+((sj1*x2784))+(((-1.0)*r20*x2785*x2789))+((r20*x2795)));
evalcond[5]=((((-1.0)*x2801))+((x2785*x2797))+((r11*x2790))+(((-1.0)*cj3*r12*x2788))+((r10*x2795))+(((-1.0)*r10*x2785*x2789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2802=(cj1*sj4);
IkReal x2803=(cj5*r20);
IkReal x2804=(r11*sj5);
IkReal x2805=(sj1*sj4);
IkReal x2806=(cj4*r12);
IkReal x2807=(cj5*r10);
IkReal x2808=((1.0)*cj4*r22);
IkReal x2809=((1.0)*r21*sj5);
if( IKabs((((sj1*x2806))+(((-1.0)*cj1*x2808))+((x2804*x2805))+(((-1.0)*x2802*x2809))+((x2802*x2803))+(((-1.0)*x2805*x2807)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj1*x2808))+(((-1.0)*x2805*x2809))+(((-1.0)*cj1*x2806))+((x2803*x2805))+((x2802*x2807))+(((-1.0)*x2802*x2804)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x2806))+(((-1.0)*cj1*x2808))+((x2804*x2805))+(((-1.0)*x2802*x2809))+((x2802*x2803))+(((-1.0)*x2805*x2807))))+IKsqr(((((-1.0)*sj1*x2808))+(((-1.0)*x2805*x2809))+(((-1.0)*cj1*x2806))+((x2803*x2805))+((x2802*x2807))+(((-1.0)*x2802*x2804))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((sj1*x2806))+(((-1.0)*cj1*x2808))+((x2804*x2805))+(((-1.0)*x2802*x2809))+((x2802*x2803))+(((-1.0)*x2805*x2807))), ((((-1.0)*sj1*x2808))+(((-1.0)*x2805*x2809))+(((-1.0)*cj1*x2806))+((x2803*x2805))+((x2802*x2807))+(((-1.0)*x2802*x2804))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2810=IKcos(j2);
IkReal x2811=IKsin(j2);
IkReal x2812=(cj3*cj4);
IkReal x2813=(r21*sj5);
IkReal x2814=((0.35575)*sj1);
IkReal x2815=((1.0)*sj4);
IkReal x2816=((1.0)*cj5);
IkReal x2817=(cj5*sj3);
IkReal x2818=(cj5*r10);
IkReal x2819=((1.0)*cj4);
IkReal x2820=(cj5*r20);
IkReal x2821=(r11*sj5);
IkReal x2822=(sj3*sj5);
IkReal x2823=(sj1*x2811);
IkReal x2824=(cj1*x2810);
IkReal x2825=(cj1*x2811);
IkReal x2826=(sj1*x2810);
IkReal x2827=((1.0)*x2824);
evalcond[0]=((((-1.0)*r12*x2819))+((sj4*x2818))+(((-1.0)*x2827))+x2823+(((-1.0)*x2815*x2821)));
evalcond[1]=((((-1.0)*x2813*x2815))+(((-1.0)*x2825))+(((-1.0)*x2826))+(((-1.0)*r22*x2819))+((sj4*x2820)));
evalcond[2]=((((-1.0)*x2810*x2814))+(((0.12)*x2813))+(((-1.0)*pz))+(((-0.35575)*x2825))+(((-0.12)*x2820))+(((0.35575)*cj1)));
evalcond[3]=((((0.12)*x2821))+(((-1.0)*py))+(((-0.35575)*x2824))+(((-1.0)*x2814))+(((-0.12)*x2818))+((x2811*x2814)));
evalcond[4]=(((r10*x2822))+(((-1.0)*cj3*r12*x2815))+((x2812*x2821))+((r11*x2817))+x2825+x2826+(((-1.0)*r10*x2812*x2816)));
evalcond[5]=((((-1.0)*cj3*r22*x2815))+((r20*x2822))+((x2812*x2813))+((r21*x2817))+(((-1.0)*r20*x2812*x2816))+(((-1.0)*x2827))+x2823);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2828=(r20*sj0);
IkReal x2829=((1.0)*sj1);
IkReal x2830=(cj4*r12);
IkReal x2831=(cj5*sj1*sj4);
IkReal x2832=(cj1*cj5*sj4);
IkReal x2833=(cj4*r22*sj0);
IkReal x2834=(r11*sj4*sj5);
IkReal x2835=((1.0)*r21*sj0*sj4*sj5);
CheckValue<IkReal> x2836=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2836.valid){
continue;
}
CheckValue<IkReal> x2837 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*x2835))+((r10*x2831))+((x2828*x2832))+(((-1.0)*cj1*x2833))+(((-1.0)*x2829*x2830))+(((-1.0)*x2829*x2834)))),IkReal((((cj1*x2830))+((cj1*x2834))+((x2828*x2831))+(((-1.0)*r10*x2832))+(((-1.0)*r21*sj0*sj4*sj5*x2829))+(((-1.0)*x2829*x2833)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2837.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2836.value)))+(x2837.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2838=IKcos(j2);
IkReal x2839=IKsin(j2);
IkReal x2840=((1.0)*cj3);
IkReal x2841=(cj4*cj5);
IkReal x2842=(cj5*r10);
IkReal x2843=(cj5*sj3);
IkReal x2844=((0.35575)*cj1);
IkReal x2845=((0.35575)*sj0);
IkReal x2846=((1.0)*sj1);
IkReal x2847=(sj3*sj5);
IkReal x2848=((1.0)*cj4);
IkReal x2849=((0.12)*cj5);
IkReal x2850=((1.0)*cj1);
IkReal x2851=(cj5*sj4);
IkReal x2852=((0.12)*sj5);
IkReal x2853=((0.35575)*cj0*sj1);
IkReal x2854=(cj3*cj4*sj5);
IkReal x2855=(cj1*x2838);
IkReal x2856=((1.0)*sj4*sj5);
IkReal x2857=(sj0*x2846);
IkReal x2858=(cj0*x2839);
IkReal x2859=(sj1*x2839);
evalcond[0]=((((-1.0)*r21*x2856))+((r20*x2851))+(((-1.0)*x2839*x2850))+(((-1.0)*x2838*x2846))+(((-1.0)*r22*x2848)));
evalcond[1]=(((r21*x2852))+(((-1.0)*r20*x2849))+(((-1.0)*x2839*x2844))+(((-1.0)*pz))+(((-0.35575)*sj1*x2838))+x2844);
evalcond[2]=((((-1.0)*r01*x2856))+((cj0*x2855))+(((-1.0)*r02*x2848))+((r00*x2851))+(((-1.0)*x2846*x2858)));
evalcond[3]=(((sj0*x2855))+(((-1.0)*r12*x2848))+(((-1.0)*r11*x2856))+(((-1.0)*x2839*x2857))+((sj4*x2842)));
evalcond[4]=((((-1.0)*r00*x2849))+(((-1.0)*x2839*x2853))+((cj0*x2838*x2844))+(((-1.0)*px))+((r01*x2852))+x2853);
evalcond[5]=(((sj1*x2845))+(((-1.0)*x2845*x2859))+((r11*x2852))+(((-0.12)*x2842))+(((-1.0)*py))+((sj0*x2838*x2844)));
evalcond[6]=(((r21*x2854))+((r21*x2843))+((r20*x2847))+(((-1.0)*r20*x2840*x2841))+(((-1.0)*r22*sj4*x2840))+(((-1.0)*x2838*x2850))+x2859);
evalcond[7]=((((-1.0)*cj0*x2838*x2846))+(((-1.0)*x2850*x2858))+(((-1.0)*r00*x2840*x2841))+(((-1.0)*r02*sj4*x2840))+((r00*x2847))+((r01*x2854))+((r01*x2843)));
evalcond[8]=((((-1.0)*r10*x2840*x2841))+((r11*x2843))+((r11*x2854))+(((-1.0)*r12*sj4*x2840))+(((-1.0)*sj0*x2839*x2850))+(((-1.0)*x2838*x2857))+((r10*x2847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2860=(sj4*sj5);
IkReal x2861=((1.0)*cj0);
IkReal x2862=(cj1*cj4);
IkReal x2863=(cj5*sj4);
IkReal x2864=(cj4*sj1);
IkReal x2865=(cj0*r20);
CheckValue<IkReal> x2866=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2866.valid){
continue;
}
CheckValue<IkReal> x2867 = IKatan2WithCheck(IkReal(((((-1.0)*cj1*r21*x2860*x2861))+((r00*sj1*x2863))+(((-1.0)*r22*x2861*x2862))+((cj1*x2863*x2865))+(((-1.0)*r01*sj1*x2860))+(((-1.0)*r02*x2864)))),IkReal((((cj1*r01*x2860))+(((-1.0)*r22*x2861*x2864))+((r02*x2862))+((sj1*x2863*x2865))+(((-1.0)*r21*sj1*x2860*x2861))+(((-1.0)*cj1*r00*x2863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2867.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2866.value)))+(x2867.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2868=IKcos(j2);
IkReal x2869=IKsin(j2);
IkReal x2870=((1.0)*cj3);
IkReal x2871=(cj4*cj5);
IkReal x2872=(cj5*r10);
IkReal x2873=(cj5*sj3);
IkReal x2874=((0.35575)*cj1);
IkReal x2875=((0.35575)*sj0);
IkReal x2876=((1.0)*sj1);
IkReal x2877=(sj3*sj5);
IkReal x2878=((1.0)*cj4);
IkReal x2879=((0.12)*cj5);
IkReal x2880=((1.0)*cj1);
IkReal x2881=(cj5*sj4);
IkReal x2882=((0.12)*sj5);
IkReal x2883=((0.35575)*cj0*sj1);
IkReal x2884=(cj3*cj4*sj5);
IkReal x2885=(cj1*x2868);
IkReal x2886=((1.0)*sj4*sj5);
IkReal x2887=(sj0*x2876);
IkReal x2888=(cj0*x2869);
IkReal x2889=(sj1*x2869);
evalcond[0]=(((r20*x2881))+(((-1.0)*x2869*x2880))+(((-1.0)*r22*x2878))+(((-1.0)*x2868*x2876))+(((-1.0)*r21*x2886)));
evalcond[1]=((((-0.35575)*sj1*x2868))+((r21*x2882))+(((-1.0)*x2869*x2874))+(((-1.0)*pz))+(((-1.0)*r20*x2879))+x2874);
evalcond[2]=((((-1.0)*r02*x2878))+((cj0*x2885))+((r00*x2881))+(((-1.0)*x2876*x2888))+(((-1.0)*r01*x2886)));
evalcond[3]=((((-1.0)*r11*x2886))+(((-1.0)*x2869*x2887))+((sj4*x2872))+((sj0*x2885))+(((-1.0)*r12*x2878)));
evalcond[4]=((((-1.0)*x2869*x2883))+((r01*x2882))+(((-1.0)*px))+((cj0*x2868*x2874))+(((-1.0)*r00*x2879))+x2883);
evalcond[5]=(((r11*x2882))+(((-1.0)*py))+((sj1*x2875))+(((-0.12)*x2872))+(((-1.0)*x2875*x2889))+((sj0*x2868*x2874)));
evalcond[6]=((((-1.0)*x2868*x2880))+((r21*x2884))+((r21*x2873))+((r20*x2877))+(((-1.0)*r20*x2870*x2871))+x2889+(((-1.0)*r22*sj4*x2870)));
evalcond[7]=(((r00*x2877))+(((-1.0)*r00*x2870*x2871))+(((-1.0)*r02*sj4*x2870))+(((-1.0)*cj0*x2868*x2876))+((r01*x2873))+((r01*x2884))+(((-1.0)*x2880*x2888)));
evalcond[8]=((((-1.0)*x2868*x2887))+((r10*x2877))+(((-1.0)*r12*sj4*x2870))+((r11*x2884))+(((-1.0)*sj0*x2869*x2880))+((r11*x2873))+(((-1.0)*r10*x2870*x2871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - owr_gripper (6f7cf26bab8be0b9d49958ae8679caf5)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
